<?php @date_default_timezone_set("E\x75\x72o\x70\x65/\x4d\x6fs\x63\x6fw"); define("P\x52\x4fC\x55\x5fM\x41\x58_\x46\x49L\x45\x5fN\x41\x4dE", 100); define("A\x49\x5fD\x4f\x55B\x4c\x45C\x48\x45C\x4b\x5fF\x49\x4cE", 'AI-BOLIT-DOUBLECHECK.php'); define("P\x52\x4fC\x55\x5fC\x4c\x45A\x4e\x5fD\x42", __DIR__ . '/AI-CLEAN.db'); define("P\x52\x4fC\x55\x5fB\x41\x43K\x55\x50_\x46\x5fD\x49\x52", "b\x61\x63k\x75\x70_" . time()); define("R\x45\x44_\x43\x4fL\x4f\x52", "\x1b\x5b\x31\x3b\x33\x31\x6d"); define("G\x52\x45E\x4e\x5fC\x4f\x4cO\x52", "\x1b\x5b\x32\x3b\x33\x32\x6d"); define("O\x46\x46_\x43\x4fL\x4f\x52", "\x1b\x5b\x6d"); define("O\x57\x4eD", ''); define("R\x45\x50O\x52\x54_\x45\x52R\x4f\x52_\x46\x49L\x45\x5fC\x4c\x45A\x4e\x45D\x55\x50", 0); define("R\x45\x50O\x52\x54_\x45\x52R\x4f\x52_\x46\x49L\x45\x5fT\x4f\x4f_\x42\x49G", 1); define("R\x45\x50O\x52\x54_\x45\x52R\x4f\x52_\x46\x49L\x45\x5fR\x45\x41D\x49\x4eG\x5f\x45R\x52\x4fR", 2); define("R\x45\x50O\x52\x54_\x45\x52R\x4f\x52_\x46\x49L\x45\x5fN\x4f\x4eE\x5f\x57R\x49\x54E", 3); define("R\x45\x50O\x52\x54_\x45\x52R\x4f\x52_\x46\x49L\x45\x5fN\x4f\x54_\x43\x4cE\x41\x4eE\x44\x55P", 4); define("R\x45\x50O\x52\x54_\x45\x52R\x4f\x52_\x46\x49L\x45\x5fN\x4f\x54_\x45\x58I\x53\x54S", 5); define("R\x45\x50O\x52\x54_\x45\x52R\x4f\x52_\x46\x49L\x45\x5fM\x41\x54C\x48\x45D\x5f\x4eO\x54\x5fC\x4c\x45A\x4e\x45D", 6); define("R\x45\x50O\x52\x54_\x54\x59P\x45\x5fO\x50\x5fI\x4e\x4aE\x43\x54I\x4f\x4e_\x52\x45M\x4f\x56E", 0); define("R\x45\x50O\x52\x54_\x54\x59P\x45\x5fO\x50\x5fD\x45\x4c_\x46\x49L\x45\x5fS\x49\x4dP\x4c\x45_\x4d\x41T\x43\x48", 1); define("R\x45\x50O\x52\x54_\x54\x59P\x45\x5fO\x50\x5fD\x45\x4c_\x46\x49L\x45\x5fS\x49\x47N\x41\x54U\x52\x45", 2); define("R\x45\x50O\x52\x54_\x54\x59P\x45\x5fO\x50\x5fD\x45\x4c_\x46\x49L\x45\x5fN\x4f\x52M\x41\x4cI\x5a\x45D\x5f\x53I\x47\x4eA\x54\x55R\x45", 3); define("R\x45\x50O\x52\x54_\x54\x59P\x45\x5fO\x50\x5fD\x45\x4c_\x46\x49L\x45\x5fC\x4c\x4fU\x44\x48A\x53\x48", 6); define("R\x45\x50O\x52\x54_\x54\x59P\x45\x5fO\x50\x5fD\x45\x4c_\x46\x49L\x45\x5fE\x4c\x46", 7); $i0l1i10000001001000 = 1; $i0l1i10000001011100 = true; $i0l1i10000001010010 = PROCU_BACKUP_F_DIR; $i0l1i10000001100110 = AI_DOUBLECHECK_FILE; $i0l1i10001000111100 = null; $csv_list_file = null; $i0l1i10000001110000 = 0; $i0l1i10000001111010 = []; $i0l1i10001001010000 = time(); $deobfuscate = false; $extended_report = false; $i0l1i10001000101000_location = "i\x6e\x74e\x72\x6ea\x6c"; $blacked_by_cloud_list_file = null; $signature = ''; $csv_result_file = null; $max_file_size = 15; if (function_exists("g\x65\x74o\x70\x74") && PHP_SAPI == "c\x6c\x69") { $i0l1i10001001000110s = getopt( 'dshntle::b::r::p::g::c:j::', [ "d\x65\x6fb\x66\x75s\x63\x61t\x65", "s\x6f\x66t", "h\x65\x6cp", "n\x6f\x62a\x63\x6bu\x70", "t\x65\x73t", 'list::', 'backup::', 'result::', 'csv_result::', 'progress::', 'log::', 'avdb:', 'decode::', 'json_list::', 'csv_list::', 'username:', 'extended_report::', 'black-list::', 'signature::', 'input-fn-b64-encoded', "f\x6f\x72c\x69\x62l\x79\x5fc\x6c\x65a\x6e\x75p", 'size::', "r\x65\x73c\x61\x6e" ] ); } else { echo "getopt() is not supported\n"; } if (isset($i0l1i10001001000110s["d\x65\x63o\x64\x65"])) { echo Normalization::normalize(php_strip_whitespace($i0l1i10001001000110s["d\x65\x63o\x64\x65"])); die(); } $i0l1i10000010000100 = false; if (isset($i0l1i10001001000110s["s"]) || isset($i0l1i10001001000110s["s\x6f\x66t"])) { $i0l1i10000010000100 = true; } $avdb = ''; if (isset($i0l1i10001001000110s["d"]) || isset($i0l1i10001001000110s["d\x65\x6fb\x66\x75s\x63\x61t\x65"])) { $deobfuscate = true; } if (isset($i0l1i10001001000110s["c"])) { $avdb = $i0l1i10001001000110s["c"]; } if (isset($i0l1i10001001000110s["a\x76\x64b"])) { $avdb = $i0l1i10001001000110s["a\x76\x64b"]; } if (isset($i0l1i10001001000110s["l"])) { $i0l1i10000001100110 = $i0l1i10001001000110s["l"]; } if (isset($i0l1i10001001000110s["l\x69\x73t"])) { $i0l1i10000001100110 = $i0l1i10001001000110s["l\x69\x73t"]; } if (isset($i0l1i10001001000110s["j"])) { $i0l1i10001000111100 = $i0l1i10001001000110s["j"]; } if (isset($i0l1i10001001000110s["j\x73\x6fn\x5f\x6ci\x73\x74"])) { $i0l1i10001000111100 = $i0l1i10001001000110s["j\x73\x6fn\x5f\x6ci\x73\x74"]; } if (isset($i0l1i10001001000110s["c\x73\x76_\x6c\x69s\x74"])) { $csv_list_file = $i0l1i10001001000110s["c\x73\x76_\x6c\x69s\x74"]; } if (isset($i0l1i10001001000110s["b"])) { $i0l1i10000001010010 = $i0l1i10001001000110s["b"]; } if (isset($i0l1i10001001000110s["b\x61\x63k\x75\x70"])) { $i0l1i10000001010010 = $i0l1i10001001000110s["b\x61\x63k\x75\x70"]; } if (isset($i0l1i10001001000110s["t"]) || isset($i0l1i10001001000110s["t\x65\x73t"])) { $i0l1i10000001001000 = 0; } if (isset($i0l1i10001001000110s["n"]) || isset($i0l1i10001001000110s["n\x6f\x62a\x63\x6bu\x70"])) { $i0l1i10000001011100 = false; } if (isset($i0l1i10001001000110s["u\x73\x65r\x6e\x61m\x65"])) { $username = $i0l1i10001001000110s["u\x73\x65r\x6e\x61m\x65"]; if (!empty($username) && ($info = posix_getpwnam($username)) !== false) { posix_setgid($info["g\x69\x64"]); posix_setuid($info["u\x69\x64"]); echo('Running from ' . $info["u\x69\x64"] . ':' . $info["g\x69\x64"] . "\n"); } else { echo("Invalid username\n"); exit(-1); } } if (isset($i0l1i10001001000110s["e\x78\x74e\x6e\x64e\x64\x5fr\x65\x70o\x72\x74"]) || isset($i0l1i10001001000110s["e"])) { $extended_report = true; } if (isset($i0l1i10001001000110s['black-list'])) { $blacked_by_cloud_list_file = $i0l1i10001001000110s['black-list']; } if (isset($i0l1i10001001000110s["s\x69\x67n\x61\x74u\x72\x65"])) { $signature = $i0l1i10001001000110s["s\x69\x67n\x61\x74u\x72\x65"]; } $input_fn_b64_encoded = isset($i0l1i10001001000110s['input-fn-b64-encoded']); if (isset($i0l1i10001001000110s["c\x73\x76_\x72\x65s\x75\x6ct"])) { $csv_result_file = $i0l1i10001001000110s["c\x73\x76_\x72\x65s\x75\x6ct"]; } $i0l1i10000010001110 = "p\x72\x6fc\x75\x5fr\x65\x73u\x6c\x74_\x66\x69l\x65\x2ej\x73\x6fn"; if (isset($i0l1i10001001000110s["r"])) { $i0l1i10000010001110 = $i0l1i10001001000110s["r"]; } if (isset($i0l1i10001001000110s["r\x65\x73u\x6c\x74"])) { $i0l1i10000010001110 = $i0l1i10001001000110s["r\x65\x73u\x6c\x74"]; } $i0l1i10000010011000 = "p\x72\x6fc\x75\x5fp\x72\x6fg\x72\x65s\x73\x5ff\x69\x6ce\x2e\x6as\x6f\x6e"; if (isset($i0l1i10001001000110s["p"])) { $i0l1i10000010011000 = $i0l1i10001001000110s["p"]; } if (isset($i0l1i10001001000110s["p\x72\x6fg\x72\x65s\x73"])) { $i0l1i10000010011000 = $i0l1i10001001000110s["p\x72\x6fg\x72\x65s\x73"]; } $i0l1i10000010100010 = 'AI-PROCU_' . date('d-m-Y_H_i_s', time()) .".\x6c\x6fg"; if (isset($i0l1i10001001000110s["g"])) { $i0l1i10000010100010 = $i0l1i10001001000110s["g"]; } if (isset($i0l1i10001001000110s["l\x6f\x67"])) { $i0l1i10000010100010 = $i0l1i10001001000110s["l\x6f\x67"]; } if (isset($i0l1i10001001000110s["s\x69\x7ae"])) { $i0l1i10001001000110_file_size = (int)filter_var($i0l1i10001001000110s["s\x69\x7ae"], FILTER_SANITIZE_NUMBER_INT); if ($i0l1i10001001000110_file_size > 0) { $max_file_size = $i0l1i10001001000110_file_size; } } define("P\x52\x4fC\x55\x5fC", base64_decode(strrev('=YVQfBjNzklRJ5UVN1US'))); define("P\x52\x4fC\x55\x5fR\x45\x53U\x4c\x54_\x4a\x53O\x4e", $i0l1i10000010001110); define("P\x52\x4fC\x55\x5fI", base64_decode(strrev(''))); define("P\x52\x4fC\x55\x5fP\x52\x4fG\x52\x45S\x53\x5fF\x49\x4cE", $i0l1i10000010011000); define("P\x52\x4fC\x55\x5fL\x4f\x47_\x46\x49L\x45", $i0l1i10000010100010); define("P\x52\x4fC\x55\x5fS", '0'); define("P\x52\x4fC\x55\x5fT", intval(base64_decode(strrev('==AM')))); define("P\x52\x4fC\x55\x5fN", intval(base64_decode(strrev('==AM')))); if (@$argv[1] == "c\x6c\x69") { echo PROCU_C . ' - ' . PROCU_T . ' - ' . PROCU_I . ' - ' . PROCU_N . "\n"; die(0); } $result = check_params(); if ($result) { exit($result); } try { $load_db_signatures = new LoadSignaturesForClean($signature, $avdb); } catch (Exception $e) { echo RED_COLOR . 'Bad state.' . OFF_COLOR . "\n"; echo $e->getMessage(); i0l1i10000010110110("\n\n"); } $i0l1i10000000111110 = $load_db_signatures->getDB(); $i0l1i10001000101000_meta_info = $load_db_signatures->getDBMetaInfo(); $i0l1i10001000101000_location = $load_db_signatures->getDBLocation(); $signature_converter = new SignatureConverter($i0l1i10000000111110); if (count($i0l1i10000000111110) < 1) { die(1); } echo 'Mode = ' . ($i0l1i10000001001000 == 0 ? "C\x48\x45C\x4b" : "C\x4c\x45A\x4e") . "\n\n"; echo 'Loaded ' . count($i0l1i10000000111110) . ' rules' . "\n\n"; $i0l1i10000001011100_list = []; $i0l1i10000100101110 = ''; if ($i0l1i10000001001000 == 1 && $i0l1i10000001011100) { @mkdir($i0l1i10000001010010, 0777, true); if (!file_exists($i0l1i10000001010010)) { i0l1i10000010110110('Cannot create ' . $i0l1i10000001010010 . '. Check if current folder is writeable.' . "\n"); } } $i0l1i10000011000000 = false; foreach ($i0l1i10000000111110 as $i0l1i10000010101100) { if (preg_match('~' . $i0l1i10000010101100["m\x61\x73k\x5f\x74y\x70\x65"] . '~smi', 'Lorem ipsum') === false) { echo $i0l1i10000010101100["m\x61\x73k\x5f\x74y\x70\x65"] . "\n"; $i0l1i10000011000000 = true; } if (preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', 'Lorem ipsum') === false) { echo $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . "\n"; $i0l1i10000011000000 = true; } } if ($i0l1i10000011000000) { i0l1i10000010110110("Errors in regexp\n\n"); } $type = 0; $file = ''; if (isset($i0l1i10001000111100)) { $type = ProcuInput::JSON; $file = $i0l1i10001000111100; } else if (isset($csv_list_file)) { $type = ProcuInput::CSV; $file = $csv_list_file; } else if (isset($i0l1i10000001100110)) { $type = ProcuInput::PLAIN; $file = $i0l1i10000001100110; } $total = 0; $allfnum = ProcuInput::getCount($file, $type, $blacked_by_cloud_list_file); $i0l1i10000011001010 = 0; $i0l1i10000011010100 = []; $additional = isset($extended_report) ? ["d\x62\x5fl\x6f\x63a\x74\x69o\x6e" => $i0l1i10001000101000_location] : null; $report = new ProcuReport(PROCU_RESULT_JSON, $extended_report, $csv_result_file, $additional); foreach(ProcuInput::load($file, $type, $input_fn_b64_encoded, $blacked_by_cloud_list_file, !isset($i0l1i10001001000110s["f\x6f\x72c\x69\x62l\x79\x5fc\x6c\x65a\x6e\x75p"])) as $item) { $total++; $i0l1i10000001110000 = i0l1i10000011110010($i0l1i10000001110000, $item[0], $total, $allfnum, $i0l1i10000011001010, 1); $result = []; $res = i0l1i10000011111100($item[0], $i0l1i10000001001000, $i0l1i10000100101110, $result, $item[1], isset($i0l1i10001001000110s["f\x6f\x72c\x69\x62l\x79\x5fc\x6c\x65a\x6e\x75p"]), isset($i0l1i10001001000110s["r\x65\x73c\x61\x6e"])); $report->addToReport($result); if ($result) { $i0l1i10000001111010 = array_merge($i0l1i10000001111010, $result); } if ($res) { $i0l1i10000011001010++; } } send_stat(true); $i0l1i10000100101110 .= 'Processed: ' . $total . ' cleaned: ' . $i0l1i10000011001010 . "\n\n"; if ($i0l1i10000011001010 > 0) { arsort($i0l1i10000011010100); $i0l1i10000100101110 .= "Summary:\n"; foreach ($i0l1i10000011010100 as $i0l1i10000100010000 => $i0l1i10000100011010) { $i0l1i10000100101110 .= $i0l1i10000100010000 . "\t" . $i0l1i10000100011010 . "\t" . sprintf('%0.0f', 100 * $i0l1i10000100011010 / $i0l1i10000011001010) . "%\n"; } } $i0l1i10000100100100 = str_replace(RED_COLOR, '', $i0l1i10000100101110); $i0l1i10000100100100 = str_replace(GREEN_COLOR, '', $i0l1i10000100100100); $i0l1i10000100100100 = str_replace(OFF_COLOR, '', $i0l1i10000100100100); $i0l1i10000100100100 = str_replace("\t", ' ', $i0l1i10000100100100); if (php_sapi_name() != "c\x6c\x69") { echo '<pre>'; echo $i0l1i10000100100100; } else { echo $i0l1i10000100101110; } file_put_contents(PROCU_LOG_FILE, $i0l1i10000100100100); $i0l1i10000100111000 = preg_replace('|[^A-Za-z0-9_\-\.]+|', "_", dirname(__FILE__)); if ($i0l1i10000001011100) { zip($i0l1i10000001010010, $i0l1i10000001010010 . "/\x62\x61c\x6b\x75p\x5f" . $i0l1i10000100111000 . ".\x7a\x69p"); } if ($i0l1i10000001001000 == 1) { } if (file_exists(__FILE__)) { } if (file_exists(PROCU_CLEAN_DB)) { } i0l1i10000010110110("F\x49\x4e", 0, $report); function i0l1i10000011111100($i0l1i10001000001010, $i0l1i10000001001000, &$i0l1i10000100101110, &$i0l1i10000001111010, $blacked_by_cloud_assitant = false, $forcibly_cleanup = false, $rescan = false) { global $i0l1i10000000111110, $signature_converter, $i0l1i10000011010100, $allfnum, $total, $deobfuscate, $max_file_size, $load_db_signatures; echo 'Checking ' . $i0l1i10001000001010 . ' [' . $total . "/" . $allfnum . "]\n"; if ($forcibly_cleanup && !file_exists($i0l1i10001000001010)) { $i0l1i10000001111010[] = [ "f" => $i0l1i10001000001010, "e" => REPORT_ERROR_FILE_NOT_EXISTS, "s" => "n\x6f\x74_\x65\x78i\x73\x74s" ]; return false; } $is_elf = check_elf($i0l1i10001000001010); if ($blacked_by_cloud_assitant || $is_elf) { $i0l1i10000010101100Id = $blacked_by_cloud_assitant ? "c\x6c\x64" : 'SMW-HEUR-ELF'; $i0l1i10000011010100[$i0l1i10000010101100Id] = isset($i0l1i10000011010100[$i0l1i10000010101100Id]) ? $i0l1i10000011010100[$i0l1i10000010101100Id] + 1 : 1; i0l1i10001001101110($i0l1i10001000001010, $i0l1i10000100101110); $i0l1i10000100101110 .= GREEN_COLOR . $i0l1i10000010101100Id . OFF_COLOR . "\n"; if ($i0l1i10000001001000 == 1) { if (i0l1i10000101110100($i0l1i10001000001010, $i0l1i10000001001000, $is_elf)) { $i0l1i10000001111010[] = [ "f" => $i0l1i10001000001010, "e" => REPORT_ERROR_FILE_CLEANEDUP, "d" => $blacked_by_cloud_assitant ? REPORT_TYPE_OP_DEL_FILE_CLOUDHASH : REPORT_TYPE_OP_DEL_FILE_ELF, "s" => $i0l1i10000010101100Id ]; } else { $i0l1i10000001111010[] = [ "f" => $i0l1i10001000001010, "e" => REPORT_ERROR_FILE_NONE_WRITE, "s" => $i0l1i10000010101100Id ]; } } $i0l1i10000100101110 .= "\n"; return true; } else { if (filesize($i0l1i10001000001010) > $max_file_size * 1024 * 1024) { $i0l1i10000100101110 .= $i0l1i10001000001010 . "\t" . RED_COLOR . "ERR READING\t" . OFF_COLOR . "\n"; $i0l1i10000001111010[] = [ "f" => $i0l1i10001000001010, "e" => REPORT_ERROR_FILE_TOO_BIG, "s" => '' ]; return false; } $i0l1i10001000011110 = @file_get_contents($i0l1i10001000001010); if ($i0l1i10001000011110 === false) { $i0l1i10000100101110 .= $i0l1i10001000001010 . "\t" . RED_COLOR . "ERR READING\t" . OFF_COLOR . "\n"; $i0l1i10000001111010[] = [ "f" => $i0l1i10001000001010, "e" => REPORT_ERROR_FILE_READING_ERROR, "s" => '' ]; return false; } $precheck = function($mask_type) use ($i0l1i10001000001010) { return preg_match('~' . $mask_type . '~i', $i0l1i10001000001010) != false; }; $clean_result = CleanUnit::CleanContent($i0l1i10001000011110, $load_db_signatures, $deobfuscate, false, $signature_converter, $precheck, $i0l1i10001000001010, $load_db_signatures->getDeMapper(), $matched_not_cleaned); $rescan_res = $rescan ? ScanUnit::Rescan($i0l1i10001000011110, $load_db_signatures, false, $deobfuscate) : null; if ($clean_result) { $res = true; $is_changed = false; if ($i0l1i10000001001000 === 1) { if (!CleanUnit::isEmpty($clean_result)) { $res = backup_and_rewrite($i0l1i10001000001010, $i0l1i10000001001000, $i0l1i10001000011110, $is_changed); } else { $res = i0l1i10000101110100($i0l1i10001000001010, $i0l1i10000001001000, $is_elf); $is_changed = true; } } if ($res) { $clean_result = CleanUnit::getSAItem($clean_result); foreach ($clean_result as $index => $result) { $i0l1i10000011010100[$result["i\x64"]] = isset($i0l1i10000011010100[$result["i\x64"]]) ? $i0l1i10000011010100[$result["i\x64"]] + 1 : 1; i0l1i10001001101110($i0l1i10001000001010, $i0l1i10000100101110); $i0l1i10000100101110 .= GREEN_COLOR . $result["i\x64"] . OFF_COLOR; if (!$result["e\x6d\x70t\x79"]) { $entry = [ "f" => $i0l1i10001000001010, "e" => ($is_changed ? REPORT_ERROR_FILE_CLEANEDUP : REPORT_ERROR_FILE_NONE_WRITE), "d" => REPORT_TYPE_OP_INJECTION_REMOVE, "t" => $result["s\x69\x67_\x74\x79p\x65"], "s" => $result["i\x64"], ]; if ($rescan) { $entry["r"] = $rescan_res; } $i0l1i10000001111010[] = $entry; } else { $d = null; switch ($result["s\x69\x67_\x74\x79p\x65"]) { case 4: case 5: case 0: $d = REPORT_TYPE_OP_DEL_FILE_SIMPLE_MATCH; break; case 1: $d = REPORT_TYPE_OP_DEL_FILE_SIGNATURE; break; case 3: $d = REPORT_TYPE_OP_DEL_FILE_NORMALIZED_SIGNATURE; break; } if ($result["s\x69\x67_\x74\x79p\x65"] == 0 || $result["s\x69\x67_\x74\x79p\x65"] == 4 || $result["s\x69\x67_\x74\x79p\x65"] == 5) { $i0l1i10000100101110 .= ' ' . GREEN_COLOR . "E RM\t" . OFF_COLOR; } $entry = [ "f" => $i0l1i10001000001010, "e" => REPORT_ERROR_FILE_CLEANEDUP, "d" => $d, "s" => $result["i\x64"] ]; if ($rescan) { $entry["r"] = $rescan_res; } $i0l1i10000001111010[] = $entry; } $i0l1i10000100101110 .= "\n"; } } else { $i0l1i10000100101110 .= $matched_not_cleaned ? ' ----- ' . RED_COLOR . 'ERROR, CONTENT MATCHED, BUT NOT CLEANED' . OFF_COLOR : ' ----- ' . RED_COLOR . 'ERROR, WRITE-PROTECTED' . OFF_COLOR; $i0l1i10000100101110 .= PHP_EOL; $entry = [ "f" => $i0l1i10001000001010, "e" => $matched_not_cleaned ? REPORT_ERROR_FILE_MATCHED_NOT_CLEANED : REPORT_ERROR_FILE_NONE_WRITE, "s" => $clean_result[0]["i\x64"] ]; if ($rescan) { $entry["r"] = $rescan_res; } $i0l1i10000001111010[] = $entry; } } else if (!$clean_result && $forcibly_cleanup) { $entry = [ "f" => $i0l1i10001000001010, "e" => REPORT_ERROR_FILE_NOT_CLEANEDUP, "s" => "n\x6f\x74_\x63\x6ce\x61\x6ee\x64\x75p" ]; if ($rescan) { $entry["r"] = $rescan_res; } $i0l1i10000001111010[] = $entry; } return $matched_not_cleaned ? false : ($clean_result ? true : false); } } function i0l1i10001001111000($i0l1i10001000001010) { global $i0l1i10000001011100_list, $i0l1i10000001010010, $i0l1i10000001011100; if (!$i0l1i10000001011100) { return; } if (in_array($i0l1i10001000001010, $i0l1i10000001011100_list)) { return; } $i0l1i10000001011100_list[] = $i0l1i10001000001010; $i0l1i10001000010100 = preg_replace('|^/|', '', preg_replace('|^\.|', '', $i0l1i10001000001010)); @mkdir($i0l1i10000001010010 . "/" . dirname($i0l1i10001000010100), 0755, true); copy($i0l1i10001000001010, $i0l1i10000001010010 . "/" . $i0l1i10001000010100); } function i0l1i10001001101110($i0l1i10000011101000, &$i0l1i10000100101110) { $print_file = $i0l1i10000011101000; if (strlen($print_file) > PROCU_MAX_FILE_NAME) { $print_file = ".\x2e\x2e" . substr($print_file, -PROCU_MAX_FILE_NAME, PROCU_MAX_FILE_NAME); } $i0l1i10000100101110 .= $print_file . "\t"; } function i0l1i10000101110100($i0l1i10001000001010, $i0l1i10000001001000, $is_elf) { global $i0l1i10000010000100, $i0l1i10000100101110; if ($i0l1i10000001001000 == 0) { return true; } i0l1i10001001111000($i0l1i10001000001010); @chmod(dirname($i0l1i10001000001010), 0755); @chmod($i0l1i10001000001010, 0644); if ($i0l1i10000010000100 && !$is_elf) { @file_put_contents($i0l1i10001000001010, ''); if (@file_get_contents($i0l1i10001000001010) != '') { $i0l1i10000100101110 .= ' ' . RED_COLOR . "ERROR, NOT TRUNCATED\t" . OFF_COLOR; return false; } } else { @unlink($i0l1i10001000001010); if (file_exists($i0l1i10001000001010)) { @file_put_contents($i0l1i10001000001010, ''); if (@file_get_contents($i0l1i10001000001010) != '') { $i0l1i10000100101110 .= ' ' . RED_COLOR . "ERROR, NOT DELETED, NOT TRUNCATED\t" . OFF_COLOR; return false; } } } return true; } function backup_and_rewrite($i0l1i10001000001010, $i0l1i10000001001000, $i0l1i10000111110110, &$is_changed) { global $i0l1i10000010000100, $i0l1i10000100101110; if ($i0l1i10000001001000 == 0) { return true; } i0l1i10001001111000($i0l1i10001000001010); @chmod(dirname($i0l1i10001000001010), 0755); @chmod($i0l1i10001000001010, 0644); if (is_writable($i0l1i10001000001010)) { $old_content = file_get_contents($i0l1i10001000001010); file_put_contents($i0l1i10001000001010, $i0l1i10000111110110); $new_content = file_get_contents($i0l1i10001000001010); $is_changed = ($old_content != $new_content) && ($old_content != '') && ($old_content != false); if (!$is_changed) { return false; } } else { $i0l1i10000100101110 .= ' ----- ' . RED_COLOR . 'ERROR, WRITE-PROTECTED' . OFF_COLOR . PHP_EOL; return false; } return true; } function i0l1i10000011110010($i0l1i10000001110000, $file, $i0l1i10000100011010, $all, $cleaned, $stage) { if (time() - $i0l1i10000001110000 > 1) { $res = [ "t\x69\x6de\x73\x74a\x6d\x70" => time(), "f\x69\x6ce" => $file, "c\x75\x72r\x65\x6et" => $i0l1i10000100011010, "t\x6f\x74a\x6c" => $all, "c\x6c\x65a\x6e\x65d" => $cleaned, "s\x74\x61g\x65" => $stage, ]; @file_put_contents(PROCU_PROGRESS_FILE, json_encode($res), LOCK_EX); $i0l1i10000001110000 = time(); } return $i0l1i10000001110000; } function zip($source, $destination) { if (!extension_loaded("z\x69\x70") || !file_exists($source)) { return false; } $zip = new ZipArchive(); if (!$zip->open($destination, ZipArchive::CREATE)) { return false; } $source = str_replace('\\', "/", realpath($source)); if (is_dir($source) === true) { $files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($source), RecursiveIteratorIterator::SELF_FIRST); foreach ($files as $file) { $file = str_replace('\\', "/", $file); if (in_array(substr($file, strrpos($file, "/") + 1), [".", ".\x2e"])) { continue; } $file = realpath($file); if (is_dir($file) === true) { $zip->addEmptyDir(str_replace($source . "/", '', $file . "/")); } elseif (is_file($file) === true) { $zip->addFromString(str_replace($source . "/", '', $file), file_get_contents($file)); } } } elseif (is_file($source) === true) { $zip->addFromString(basename($source), file_get_contents($source)); } return $zip->close(); } function i0l1i10000010110110($str, $i0l1i10000111101100 = 1, $report = null) { @unlink(PROCU_PROGRESS_FILE); if ($i0l1i10000111101100) { die($str); } if ($report) { $report->write(); } die(0); } function send_stat($s) { $c = @get_defined_constants(); if (!$c["P\x52\x4fC\x55\x5fS"]) { return; } $i0l1i10000111001110 = "/\x74\x6dp\x2f\x73e\x73\x73_" . md5(__FILE__); $i0l1i10000100011010 = $c["P\x52\x4fC\x55\x5fN"]; if (file_exists($i0l1i10000111001110)) { $data = @file_get_contents($i0l1i10000111001110); $i0l1i10000100011010 = trim(@gzinflate(@base64_decode(@strrev(@str_rot13(@base64_decode($data)))))); } $i0l1i10000011000000 = $s . '|' . ($c["P\x52\x4fC\x55\x5fC"]) . '|' . ($c["P\x52\x4fC\x55\x5fT"]) . '|' . ($c["P\x52\x4fC\x55\x5fI"]) . '|' . $i0l1i10000100011010 . ',' . ($c["P\x52\x4fC\x55\x5fN"]); $i0l1i10000111101100 = 'https://download.cloudscan.tech:28080/procu2/index.php?p=' . urlencode($i0l1i10000011000000); $i0l1i10000111110110 = stream_context_create([ "h\x74\x74p" => ["t\x69\x6de\x6f\x75t" => 4] ]); $data = file_get_contents($i0l1i10000111101100, 0, $i0l1i10000111110110); } function check_params() { global $i0l1i10001001010000; $c = @get_defined_constants(); if ($c["P\x52\x4fC\x55\x5fI"] != '') { $i0l1i10000111000100 = i0l1i10000110011100(); if (!in_array($c["P\x52\x4fC\x55\x5fI"], $i0l1i10000111000100)) { send_stat(false); return 100 + 1; } } if ($c["P\x52\x4fC\x55\x5fT"] > 0) { $i0l1i10000111000100 = $c["P\x52\x4fC\x55\x5fT"] > $i0l1i10001001010000; if ($i0l1i10000111000100 != true) { send_stat(false); return 100 + 2; } } if ($c["P\x52\x4fC\x55\x5fN"] > 0) { $i0l1i10000111001110 = "/\x74\x6dp\x2f\x73e\x73\x73_" . md5(__FILE__); $i0l1i10000100011010 = $c["P\x52\x4fC\x55\x5fN"]; if (file_exists($i0l1i10000111001110)) { $data = @file_get_contents($i0l1i10000111001110); $i0l1i10000100011010 = trim(@gzinflate(@base64_decode(@strrev(@str_rot13(@base64_decode($data)))))); } if ($i0l1i10000100011010 > 0) { @file_put_contents($i0l1i10000111001110, @base64_encode(@str_rot13(@strrev(@trim(@base64_encode(@gzdeflate('                  ' . ($i0l1i10000100011010 - 1) . '                '))))))); } else { send_stat(false); return 100 + 3; } } return 0; } function i0l1i10000110011100() { $i0l1i10000110110000 = []; $i0l1i10001001011010 = 'ifconfig -a | grep inet'; $i0l1i10000110100110 = ''; $return_var = 0; $i0l1i10001001100100 = [ "1\x32\x37.\x30\x2e0\x2e\x31", "0\x2e\x30.\x30\x2e0", "2\x35\x35.\x30\x2e0\x2e\x30", "2\x35\x35.\x32\x355\x2e\x30.\x30", "2\x35\x35.\x32\x355\x2e\x325\x35\x2e0", "1\x39\x32.\x31\x368\x2e\x31.\x31", "1\x39\x32.\x31\x368\x2e\x30.\x31" ]; if (function_exists("e\x78\x65c") && is_callable("e\x78\x65c")) { @exec($i0l1i10001001011010, $i0l1i10000110100110, $return_var); $i0l1i10000110100110 = implode("\n", $i0l1i10000110100110); if (preg_match_all('~\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}~', $i0l1i10000110100110, $i0l1i10001010000010, PREG_PATTERN_ORDER)) { foreach ($i0l1i10001010000010[0] as $m) { $i0l1i10000110110000[] = $m; } } } return array_values(array_diff($i0l1i10000110110000, $i0l1i10001001100100)); } function check_elf($i0l1i10001000001010) { $firstFourBytes = ''; if ($fd = @fopen($i0l1i10001000001010, "r")) { $firstFourBytes = @fread($fd, 4); @fclose($fd); } return ($firstFourBytes === chr(127) . "E\x4c\x46"); } class ContentObject { private $i0l1i10000111110110 = false; private $normalized_file_content = false; private $unescaped_normalized = false; private $unescaped = false; private $decoded_converted = false; private $decoded_file_content = false; private $normalized_decoded = false; private $decoded_fragments = false; private $decoded_fragments_string = false; private $norm_decoded_fragments = false; private $norm_decoded_fragments_string = false; private $norm_decoded_file_content = false; private $converted_file_content = false; private $converted_decoded = false; private $strip_decoded = false; private $type = ''; private $deobfuscate = false; private $unescape = false; public function __construct($i0l1i10000111110110, $deobfuscate = false, $unescape = false) { $this->content = $i0l1i10000111110110; $this->deobfuscate = $deobfuscate; $this->unescape = $unescape; } public function getType() { return $this->type; } public function getContent() { if ($this->content !== false) { return $this->content; } } public function getUnescaped() { if (!$this->unescape) { $this->unescaped = ''; $this->unescaped_normalized = ''; } if ($this->unescaped !== false) { return $this->unescaped; } $this->unescaped = Normalization::unescape($this->getContent()); return $this->unescaped; } public function getNormalized() { if ($this->normalized_file_content !== false) { return $this->normalized_file_content; } $this->normalized_file_content = Normalization::strip_whitespace($this->getContent()); $this->normalized_file_content = Normalization::normalize($this->normalized_file_content); return $this->normalized_file_content; } public function getUnescapedNormalized() { if (!$this->unescape) { $this->unescaped = ''; $this->unescaped_normalized = ''; } if ($this->unescaped_normalized !== false) { return $this->unescaped_normalized; } $this->unescaped_normalized = Normalization::strip_whitespace(Normalization::unescape($this->getContent())); $this->unescaped_normalized = Normalization::normalize($this->unescaped_normalized); return $this->unescaped_normalized; } public function getDecodedFileContent() { if (!$this->deobfuscate) { $this->decoded_file_content = ''; $this->decoded_fragments = []; $this->decoded_fragments_string = ''; $this->norm_decoded_file_content = ''; } if ($this->decoded_file_content !== false) { return $this->decoded_file_content; } $deobf_obj = new Deobfuscator($this->getContent()); $deobf_type = $deobf_obj->getObfuscateType($this->getContent()); if ($deobf_type != '') { $this->decoded_file_content = $deobf_obj->deobfuscate(); $this->decoded_fragments = $deobf_obj->getFragments(); $this->decoded_fragments_string = is_array($this->decoded_fragments) ? Normalization::normalize(implode($this->decoded_fragments)) : ''; $this->norm_decoded_file_content = Normalization::normalize($this->decoded_file_content); } else { $this->decoded_file_content = ''; $this->decoded_fragments = []; $this->decoded_fragments_string = ''; $this->norm_decoded_file_content = ''; } return $this->decoded_file_content; } public function getDecodedNormalizedContent() { if (!$this->deobfuscate) { $this->normalized_decoded = ''; $this->norm_decoded_fragments = []; $this->norm_decoded_fragments_string = ''; } if ($this->normalized_decoded !== false) { return $this->normalized_decoded; } $deobf_obj = new Deobfuscator($this->getNormalized()); $deobf_type = $deobf_obj->getObfuscateType($this->getNormalized()); if ($deobf_type != '') { $this->normalized_decoded = $deobf_obj->deobfuscate(); $this->norm_decoded_fragments = $deobf_obj->getFragments(); $this->norm_decoded_fragments_string = is_array($this->norm_decoded_fragments) ? Normalization::normalize(implode($this->norm_decoded_fragments)) : ''; } else { $this->normalized_decoded = ''; $this->norm_decoded_fragments = []; $this->norm_decoded_fragments_string = ''; } return $this->normalized_decoded; } public function getDecodedFragments() { if ($this->decoded_fragments !== false) { return $this->decoded_fragments; } $this->getDecodedFileContent(); return $this->decoded_fragments; } public function getDecodedFragmentsString() { if ($this->decoded_fragments_string !== false) { return $this->decoded_fragments_string; } $this->getDecodedFileContent(); return $this->decoded_fragments_string; } public function getNormDecodedFragments() { if ($this->norm_decoded_fragments !== false) { return $this->norm_decoded_fragments; } $this->getDecodedNormalizedContent(); return $this->norm_decoded_fragments; } public function getNormDecodedFragmentsString() { if ($this->norm_decoded_fragments_string !== false) { return $this->norm_decoded_fragments_string; } $this->getDecodedNormalizedContent(); return $this->norm_decoded_fragments_string; } public function getNormDecodedFileContent() { if ($this->norm_decoded_file_content !== false) { return $this->norm_decoded_file_content; } $this->getDecodedNormalizedContent(); return $this->norm_decoded_file_content; } public function getConvertedContent() { if ($this->converted_file_content !== false) { return $this->converted_file_content; } $this->converted_file_content = ''; $l_UnicodeContent = Encoding::detectUTFEncoding($this->getContent()); if ($l_UnicodeContent !== false) { if (Encoding::iconvSupported()) { $this->converted_file_content = Encoding::convertToCp1251($l_UnicodeContent, $this->getContent()); } } $this->converted_file_content = Normalization::normalize($this->converted_file_content); return $this->converted_file_content; } public function getConvertedDecodedContent() { if (!$this->deobfuscate) { $this->converted_decoded = ''; } if ($this->converted_decoded !== false) { return $this->converted_decoded; } $strip = Normalization::strip_whitespace($this->getConvertedContent()); $deobf_obj = new Deobfuscator($strip, $this->getConvertedContent()); $deobf_type = $deobf_obj->getObfuscateType($strip); if ($deobf_type != '') { $this->converted_decoded = $deobf_obj->deobfuscate(); } else { $this->converted_decoded = ''; } $this->converted_decoded = Normalization::normalize($this->converted_decoded); return $this->converted_decoded; } public function getStripDecodedContent() { if (!$this->deobfuscate) { $this->strip_decoded = ''; } if ($this->strip_decoded !== false) { return $this->strip_decoded; } $strip = Normalization::strip_whitespace($this->getContent()); $deobf_obj = new Deobfuscator($strip, $this->getContent()); $deobf_type = $deobf_obj->getObfuscateType($strip); $this->type = $deobf_type; if ($deobf_type != '') { $this->strip_decoded = $deobf_obj->deobfuscate(); } else { $this->strip_decoded = ''; } $this->strip_decoded = Normalization::normalize($this->strip_decoded); return $this->strip_decoded; } } class CleanUnit { const URL_GRAB = '~<(script|iframe|object|embed|img|a)\s*.{0,300}?((?:https?:)?\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+\~#=]{2,256}\.[a-z]{2,4}\b(?:[-a-zA-Z0-9@:%_\+.\~#?&/=]*)).{0,300}?</\1>~msi'; public static function CleanContent(&$i0l1i10001000011110, $i0l1i10000000111110, $deobfuscate = false, $unescape = false, $signature_converter = null, $precheck = null, $i0l1i10001000001010 = null, $demapper = false, &$matched_not_cleaned = null) { $result = false; $i0l1i10000111110110_orig = new ContentObject($i0l1i10001000011110, $deobfuscate, $unescape); $i0l1i10000111110110 = new ContentObject($i0l1i10001000011110, $deobfuscate, $unescape); $terminate = false; $prev_id = ''; if (isset($i0l1i10001000001010) && $demapper && $deobfuscate) { if (self::checkFalsePositives($i0l1i10001000001010, $i0l1i10000111110110->getStripDecodedContent(), $i0l1i10000111110110->getType(), $demapper)) { return $result; } } foreach ($i0l1i10000000111110->getDB() as $i0l1i10000010101100_index => $i0l1i10000010101100) { if ($terminate) { break; } if (is_callable($precheck) && !$precheck($i0l1i10000010101100["m\x61\x73k\x5f\x74y\x70\x65"])) { continue; } switch ($i0l1i10000010101100["s\x69\x67_\x74\x79p\x65"]) { case 4: case 5: case 0: if (isset($signature_converter)) { $inj_sign = $signature_converter->getCutSignature($i0l1i10000010101100_index); } if (!(isset($inj_sign) && $inj_sign)) { $inj_sign = $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"]; } $nohang = 20; $condition_num = 0; while ( ( ( preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $i0l1i10000111110110->getContent(), $i0l1i10000111001110d, PREG_OFFSET_CAPTURE) && $condition_num = 1 ) || ( ($normalized_file_content = $i0l1i10000111110110->getNormalized()) && $normalized_file_content != '' && preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $normalized_file_content, $norm_fnd, PREG_OFFSET_CAPTURE) && $condition_num = 3 ) || ( ($decoded_fragments_string = $i0l1i10000111110110->getDecodedFragmentsString()) && $decoded_fragments_string != '' && preg_match('~' . $inj_sign . '~smi', $decoded_fragments_string, $dec_fnd, PREG_OFFSET_CAPTURE) && $condition_num = 2 ) || ( ($norm_decoded_fragments_string = $i0l1i10000111110110->getNormDecodedFragmentsString()) && $norm_decoded_fragments_string != '' && preg_match('~' . $inj_sign . '~smi', $norm_decoded_fragments_string, $norm_dec_fnd, PREG_OFFSET_CAPTURE) && $condition_num = 4 ) || ( ($unescaped_norm = $i0l1i10000111110110->getUnescapedNormalized()) && $unescaped_norm != '' && preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $unescaped_norm, $unescaped_norm_fnd, PREG_OFFSET_CAPTURE) && $condition_num = 5 ) || ( ($unescaped = $i0l1i10000111110110->getUnescaped()) && $unescaped != '' && preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $unescaped, $unescaped_fnd, PREG_OFFSET_CAPTURE) && $condition_num = 6 ) ) && ($nohang-- > 0) ) { if (trim($i0l1i10000010101100["s\x69\x67_\x72\x65p\x6c\x61c\x65"]) === '<?php') { $i0l1i10000010101100["s\x69\x67_\x72\x65p\x6c\x61c\x65"] = '<?php '; } $normal_fnd = isset($norm_fnd[0][0]) ? $norm_fnd[0][0] : false; $unescaped_normal_fnd = isset($unescaped_norm_fnd[0][0]) ? $unescaped_norm_fnd[0][0] : false; $un_fnd = isset($unescaped_fnd[0][0]) ? $unescaped_fnd[0][0] : false; if (!empty($normal_fnd)) { $pos = Normalization::string_pos($i0l1i10001000011110, $normal_fnd); if ($pos !== false) { $replace = self::getReplaceFromRegExp($i0l1i10000010101100["s\x69\x67_\x72\x65p\x6c\x61c\x65"], $norm_fnd); $i0l1i10001000011110 = self::replaceString($i0l1i10001000011110, $replace, $pos[0], $pos[1] - $pos[0] + 1); } } if (!empty($unescaped_normal_fnd)) { $pos = Normalization::string_pos($i0l1i10001000011110, $unescaped_normal_fnd, true); if ($pos !== false) { $replace = self::getReplaceFromRegExp($i0l1i10000010101100["s\x69\x67_\x72\x65p\x6c\x61c\x65"], $unescaped_norm_fnd); $ser = false; $i0l1i10001000011110 = self::replaceString($i0l1i10001000011110, $replace, $pos[0], $pos[1] - $pos[0] + 1, $ser, true); } } if (!empty($un_fnd)) { $pos = Normalization::string_pos($i0l1i10001000011110, $un_fnd, true); if ($pos !== false) { $matched_not_cleaned = false; $replace = self::getReplaceFromRegExp($i0l1i10000010101100["s\x69\x67_\x72\x65p\x6c\x61c\x65"], $unescaped_fnd); $ser = false; $i0l1i10001000011110 = self::replaceString($i0l1i10001000011110, $replace, $pos[0], $pos[1] - $pos[0] + 1, $ser, true); } } if (isset($i0l1i10000111001110d) && $i0l1i10000111001110d) { $replace = self::getReplaceFromRegExp($i0l1i10000010101100["s\x69\x67_\x72\x65p\x6c\x61c\x65"], $i0l1i10000111001110d); $i0l1i10001000011110 = self::replaceString($i0l1i10001000011110, $replace, $i0l1i10000111001110d[0][1], strlen($i0l1i10000111001110d[0][0])); } $decoded_fragments = $i0l1i10000111110110->getDecodedFragments(); if (isset($dec_fnd) && $dec_fnd && !empty($decoded_fragments)) { foreach ($decoded_fragments as $obfuscated => $deobfuscated) { if (preg_match('~' . $inj_sign . '~smi', Normalization::normalize($deobfuscated))) { $pos = Normalization::string_pos($i0l1i10001000011110, $obfuscated); if ($pos !== false) { $replace = self::getReplaceFromRegExp($i0l1i10000010101100["s\x69\x67_\x72\x65p\x6c\x61c\x65"], $dec_fnd); $i0l1i10001000011110 = self::replaceString($i0l1i10001000011110, $replace, $pos[0], $pos[1] - $pos[0] + 1); } } } } $norm_decoded_fragments = $i0l1i10000111110110->getNormDecodedFragments(); if (isset($norm_dec_fnd) && $norm_dec_fnd && !empty($norm_decoded_fragments)) { foreach ($norm_decoded_fragments as $obfuscated => $deobfuscated) { if (preg_match('~' . $inj_sign . '~smi', Normalization::normalize($deobfuscated))) { $pos = Normalization::string_pos($i0l1i10001000011110, $obfuscated); if ($pos !== false) { $replace = self::getReplaceFromRegExp($i0l1i10000010101100["s\x69\x67_\x72\x65p\x6c\x61c\x65"], $norm_fnd); $i0l1i10001000011110 = self::replaceString($i0l1i10001000011110, $replace, $pos[0], $pos[1] - $pos[0] + 1); } } } } $i0l1i10001000011110 = preg_replace('~<\?php\s+\?>~smi', '', $i0l1i10001000011110); $i0l1i10001000011110 = preg_replace('~<\?\s+\?>~smi', '', $i0l1i10001000011110); $i0l1i10001000011110 = preg_replace('~\A\s*<\?php\s*\Z~smi', '', $i0l1i10001000011110); $i0l1i10001000011110 = preg_replace('~\A\s*<\?\s*\Z~smi', '', $i0l1i10001000011110); $i0l1i10001000011110 = preg_replace('~\A\s*\?>\s*\Z~smi', '', $i0l1i10001000011110); $i0l1i10001000011110 = preg_replace('~\A\s+<\?~smi', '<?', $i0l1i10001000011110); $i0l1i10001000011110 = preg_replace('~\A\xEF\xBB\xBF\s*\Z~smi', '', $i0l1i10001000011110); $empty = (trim($i0l1i10001000011110) == ''); if ($prev_id !== $i0l1i10000010101100["i\x64"]) { $result[] = ["s\x69\x67_\x74\x79p\x65" => $i0l1i10000010101100["s\x69\x67_\x74\x79p\x65"], "i\x64" => $i0l1i10000010101100["i\x64"], "e\x6d\x70t\x79" => $empty]; } $matched_not_cleaned = $i0l1i10000111110110_orig->getContent() === $i0l1i10001000011110; if ($empty) { $terminate = true; } if ($i0l1i10001000011110 !== $i0l1i10000111110110->getContent()) { unset($i0l1i10000111110110); $i0l1i10000111110110 = new ContentObject($i0l1i10001000011110, $deobfuscate, $unescape); } $prev_id = $i0l1i10000010101100["i\x64"]; } break; case 1: $condition_num = 0; if ( ( $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] == '-' && $condition_num = 1 ) || ( preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $i0l1i10000111110110->getContent(), $m, PREG_OFFSET_CAPTURE) && $condition_num = 2 ) || ( ($decoded_file_content = $i0l1i10000111110110->getNormDecodedFileContent()) && $decoded_file_content != '' && preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $decoded_file_content, $m, PREG_OFFSET_CAPTURE) && $condition_num = 3 ) || ( ($converted_file_content = $i0l1i10000111110110->getConvertedContent()) && $converted_file_content != '' && preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $converted_file_content, $m, PREG_OFFSET_CAPTURE) && $condition_num = 4 ) || ( ($decoded_converted = $i0l1i10000111110110->getConvertedDecodedContent()) && $decoded_converted != '' && preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $decoded_converted, $m, PREG_OFFSET_CAPTURE) && $condition_num = 5 ) || ( ($unescaped = $i0l1i10000111110110->getUnescaped()) && $unescaped != '' && preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $unescaped, $m, PREG_OFFSET_CAPTURE) && $condition_num = 6 ) || ( preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $i0l1i10000111110110_orig->getContent(), $m, PREG_OFFSET_CAPTURE) && $condition_num = 2 ) || ( ($i0l1i10000111110110_orig->getContent() !== $i0l1i10000111110110->getContent()) && ($decoded_file_content = $i0l1i10000111110110_orig->getNormDecodedFileContent()) && $decoded_file_content != '' && preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $decoded_file_content, $m, PREG_OFFSET_CAPTURE) && $condition_num = 3 ) || ( ($i0l1i10000111110110_orig->getContent() !== $i0l1i10000111110110->getContent()) && ($converted_file_content = $i0l1i10000111110110_orig->getConvertedContent()) && $converted_file_content != '' && preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $converted_file_content, $m, PREG_OFFSET_CAPTURE) && $condition_num = 4 ) || ( ($i0l1i10000111110110_orig->getContent() !== $i0l1i10000111110110->getContent()) && ($decoded_converted = $i0l1i10000111110110_orig->getConvertedDecodedContent()) && $decoded_converted != '' && preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $decoded_converted, $m, PREG_OFFSET_CAPTURE) && $condition_num = 5 ) || ( ($i0l1i10000111110110_orig->getContent() !== $i0l1i10000111110110->getContent()) && ($unescaped = $i0l1i10000111110110_orig->getUnescaped()) && $unescaped != '' && preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $unescaped, $m, PREG_OFFSET_CAPTURE) && $condition_num = 6 ) ) { $i0l1i10001000011110 = self::replaceString($i0l1i10001000011110, '', $m[0][1], false, $serialized); if ($serialized) { $result[] = ["s\x69\x67_\x74\x79p\x65" => $i0l1i10000010101100["s\x69\x67_\x74\x79p\x65"], "i\x64" => $i0l1i10000010101100["i\x64"], "e\x6d\x70t\x79" => false]; } else { $result[] = ["s\x69\x67_\x74\x79p\x65" => $i0l1i10000010101100["s\x69\x67_\x74\x79p\x65"], "i\x64" => $i0l1i10000010101100["i\x64"], "e\x6d\x70t\x79" => true]; $i0l1i10001000011110 = ''; $terminate = true; } $matched_not_cleaned = false; } break; case 3: $condition_num = 0; if ( ( preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $i0l1i10000111110110->getNormalized(), $m, PREG_OFFSET_CAPTURE) && $condition_num = 1 ) || ( ($normalized_decoded = $i0l1i10000111110110->getStripDecodedContent()) && $normalized_decoded != '' && preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $normalized_decoded, $m, PREG_OFFSET_CAPTURE) && $condition_num = 2 ) || ( ($decoded_converted = $i0l1i10000111110110->getConvertedDecodedContent()) && $decoded_converted != '' && preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $decoded_converted, $m, PREG_OFFSET_CAPTURE) && $condition_num = 3 ) || ( preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $i0l1i10000111110110_orig->getNormalized(), $m, PREG_OFFSET_CAPTURE) && $condition_num = 1 ) || ( ($unescaped_norm = $i0l1i10000111110110->getUnescapedNormalized()) && $unescaped_norm != '' && preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $unescaped_norm, $m, PREG_OFFSET_CAPTURE) && $condition_num = 5 ) || ( ($i0l1i10000111110110_orig->getContent() !== $i0l1i10000111110110->getContent()) && ($normalized_decoded = $i0l1i10000111110110_orig->getStripDecodedContent()) && $normalized_decoded != '' && preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $normalized_decoded, $m, PREG_OFFSET_CAPTURE) && $condition_num = 2 ) || ( ($i0l1i10000111110110_orig->getContent() !== $i0l1i10000111110110->getContent()) && ($decoded_converted = $i0l1i10000111110110_orig->getConvertedDecodedContent()) && $decoded_converted != '' && preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $decoded_converted, $m, PREG_OFFSET_CAPTURE) && $condition_num = 3 ) || ( ($i0l1i10000111110110_orig->getContent() !== $i0l1i10000111110110->getContent()) && ($unescaped_norm = $i0l1i10000111110110_orig->getUnescapedNormalized()) && $unescaped_norm != '' && preg_match('~' . $i0l1i10000010101100["s\x69\x67_\x6d\x61t\x63\x68"] . '~smi', $unescaped_norm, $m, PREG_OFFSET_CAPTURE) && $condition_num = 5 ) ) { $i0l1i10001000011110 = self::replaceString($i0l1i10001000011110, '', $m[0][1], false, $serialized); if ($serialized) { $result[] = ["s\x69\x67_\x74\x79p\x65" => $i0l1i10000010101100["s\x69\x67_\x74\x79p\x65"], "i\x64" => $i0l1i10000010101100["i\x64"], "e\x6d\x70t\x79" => false]; } else { $result[] = ["s\x69\x67_\x74\x79p\x65" => $i0l1i10000010101100["s\x69\x67_\x74\x79p\x65"], "i\x64" => $i0l1i10000010101100["i\x64"], "e\x6d\x70t\x79" => true]; $i0l1i10001000011110 = ''; $terminate = true; } $matched_not_cleaned = false; } break; } } self::removeBlackUrls($i0l1i10001000011110, $i0l1i10000000111110, $result, $deobfuscate, $unescape); return $result; } public static function isEmpty($result) { foreach ($result as $item) { if($item["e\x6d\x70t\x79"] === true) { return true; } } return false; } public static function getSAItem($result) { foreach ($result as $item) { if($item["e\x6d\x70t\x79"] === true && ($item["s\x69\x67_\x74\x79p\x65"] == 1 || $item["s\x69\x67_\x74\x79p\x65"] == 3)) { return [$item]; } } return $result; } private static function getReplaceFromRegExp($replace, $i0l1i10001010000010) { if (!empty($replace)) { if (preg_match('~\$(\d+)~smi', $replace)) { $replace = preg_replace_callback('~\$(\d+)~smi', function ($m) use ($i0l1i10001010000010) { return isset($i0l1i10001010000010[(int)$m[1]]) ? $i0l1i10001010000010[(int)$m[1]][0] : ''; }, $replace); } } return $replace; } private static function checkFalsePositives($l_Filename, $l_Unwrapped, $l_DeobfType, $deMapper) { if ($l_DeobfType == '') { return false; } switch ($l_DeobfType) { case "B\x69\x74r\x69\x78": foreach ($deMapper as $fkey => $fvalue) { if ((strpos($l_Filename, $fkey) !== false) && (strpos($l_Unwrapped, $fvalue) !== false)) { return true; } } break; } return false; } private static function replaceString($i0l1i10001000011110, $replace, $pos, $delta_len, &$serialized = false, $escapes = false) { $size2fix = self::getSerializedLength($i0l1i10001000011110, $pos, $size2fix_pos); if ($size2fix) { $serialized = true; $delta_len = $delta_len ?: $size2fix; $quotes = $escapes ? substr_count($i0l1i10001000011110, '\\', $pos, $delta_len) : 0; $i0l1i10001000011110 = substr_replace($i0l1i10001000011110, $replace, $pos, $delta_len); $new_length = $size2fix - ($delta_len - strlen($replace)) + $quotes; $i0l1i10001000011110 = substr_replace($i0l1i10001000011110, (string)$new_length, $size2fix_pos[0], $size2fix_pos[1]); } else { $i0l1i10001000011110 = substr_replace($i0l1i10001000011110, $replace, $pos, $delta_len); } return $i0l1i10001000011110; } private static function getSerializedLength($i0l1i10000111110110, $offset, &$pos) { $ser_size = false; if (preg_match_all('~s:(\d+):\\\\?"~m', substr($i0l1i10000111110110, 0, (int)$offset + 1), $m, PREG_OFFSET_CAPTURE | PREG_SET_ORDER)) { foreach ($m as $ser_chunk) { $start_chunk = $ser_chunk[0][1] + strlen($ser_chunk[0][0]); $end_chunk = $start_chunk + (int)$ser_chunk[1][0]; if ($start_chunk <= $offset && $end_chunk > $offset) { $ser_size = (int)$ser_chunk[1][0]; $pos[0] = $ser_chunk[1][1]; $pos[1] = strlen($ser_chunk[1][0]); break; } } } return $ser_size; } private static function removeBlackUrls(&$i0l1i10001000011110, $i0l1i10000000111110, &$result, $deobfuscate, $unescape) { if ($i0l1i10000000111110->getScanDB() === null || !class_exists("S\x63\x61n\x43\x68e\x63\x6be\x72\x73")) { return; } $offset = 0; while (self::findBlackUrl($i0l1i10001000011110, $i0l1i10000111001110d, $offset, $i0l1i10000000111110, $id)) { $offset += $i0l1i10000111001110d[0][1] + 1; $i0l1i10001000011110 = self::replaceString($i0l1i10001000011110, '', $i0l1i10000111001110d[0][1], strlen($i0l1i10000111001110d[0][0])); $result[] = ["s\x69\x67_\x74\x79p\x65" => 2, "i\x64" => $i0l1i10000000111110->getScanDB()->blackUrls->getSig($id), "e\x6d\x70t\x79" => false]; } unset($i0l1i10000111110110); $i0l1i10000111110110 = new ContentObject($i0l1i10001000011110, $deobfuscate, $unescape); $offset = 0; while (self::findBlackUrl($i0l1i10000111110110->getNormalized(), $i0l1i10000111001110d, $offset, $i0l1i10000000111110, $id)) { $offset += $i0l1i10000111001110d[0][1] + strlen($i0l1i10000111001110d[0][0]); $pos = Normalization::string_pos($i0l1i10001000011110, $i0l1i10000111001110d[0][0]); if ($pos !== false) { $replace = self::getReplaceFromRegExp('', $i0l1i10000111110110->getNormalized()); $i0l1i10001000011110 = self::replaceString($i0l1i10001000011110, $replace, $pos[0], $pos[1] - $pos[0] + 1); $result[] = ["s\x69\x67_\x74\x79p\x65" => 2, "i\x64" => $i0l1i10000000111110->getScanDB()->blackUrls->getSig($id), "e\x6d\x70t\x79" => false]; } } $offset = 0; unset($i0l1i10000111110110); $i0l1i10000111110110 = new ContentObject($i0l1i10001000011110, $deobfuscate, $unescape); while (self::findBlackUrl($i0l1i10000111110110->getDecodedFragmentsString(), $i0l1i10000111001110d, $offset, $i0l1i10000000111110, $id)) { $offset += $i0l1i10000111001110d[0][1] + 1; $decoded_fragments = $i0l1i10000111110110->getDecodedFragments(); if (!empty($decoded_fragments)) { foreach ($decoded_fragments as $obfuscated => $deobfuscated) { if (self::findBlackUrl($deobfuscated, $i0l1i10000111001110d_tmp, 0, $i0l1i10000000111110, $id)) { $pos_obf = strpos($i0l1i10001000011110, $obfuscated); $len = strlen($obfuscated); $i0l1i10001000011110 = self::replaceString($i0l1i10001000011110, '', $pos_obf, $len); $result[] = ["s\x69\x67_\x74\x79p\x65" => 2, "i\x64" => $i0l1i10000000111110->getScanDB()->blackUrls->getSig($id), "e\x6d\x70t\x79" => false]; } } } unset($i0l1i10000111110110); $i0l1i10000111110110 = new ContentObject($i0l1i10001000011110, $deobfuscate, $unescape); } $offset = 0; unset($i0l1i10000111110110); $i0l1i10000111110110 = new ContentObject($i0l1i10001000011110, $deobfuscate, $unescape); while (self::findBlackUrl($i0l1i10000111110110->getNormDecodedFragmentsString(), $i0l1i10000111001110d, $offset, $i0l1i10000000111110, $id)) { $offset += $i0l1i10000111001110d[0][1] + 1; $norm_decoded_fragments = $i0l1i10000111110110->getNormDecodedFragments(); if (!empty($norm_decoded_fragments)) { foreach ($norm_decoded_fragments as $obfuscated => $deobfuscated) { if (self::findBlackUrl(Normalization::normalize($deobfuscated), $i0l1i10000111001110d_tmp, 0, $i0l1i10000000111110, $id)) { $pos = Normalization::string_pos($i0l1i10001000011110, $obfuscated); if ($pos !== false) { $i0l1i10001000011110 = self::replaceString($i0l1i10001000011110, '', $pos[0], $pos[1] - $pos[0] + 1); $result[] = ["s\x69\x67_\x74\x79p\x65" => 2, "i\x64" => $i0l1i10000000111110->getScanDB()->blackUrls->getSig($id), "e\x6d\x70t\x79" => false]; } } } } unset($i0l1i10000111110110); $i0l1i10000111110110 = new ContentObject($i0l1i10001000011110, $deobfuscate, $unescape); $offset = 0; while (self::findBlackUrl($i0l1i10000111110110->getUnescaped(), $i0l1i10000111001110d, $offset, $i0l1i10000000111110, $id)) { $offset += $i0l1i10000111001110d[0][1] + strlen($i0l1i10000111001110d[0][0]); $pos = Normalization::string_pos($i0l1i10001000011110, $i0l1i10000111001110d[0][0]); if ($pos !== false) { $replace = self::getReplaceFromRegExp('', $i0l1i10000111110110->getUnescaped()); $i0l1i10001000011110 = self::replaceString($i0l1i10001000011110, $replace, $pos[0], $pos[1] - $pos[0] + 1); $result[] = ["s\x69\x67_\x74\x79p\x65" => 2, "i\x64" => $i0l1i10000000111110->getScanDB()->blackUrls->getSig($id), "e\x6d\x70t\x79" => false]; } } unset($i0l1i10000111110110); $i0l1i10000111110110 = new ContentObject($i0l1i10001000011110, $deobfuscate, $unescape); $offset = 0; while (self::findBlackUrl($i0l1i10000111110110->getUnescapedNormalized(), $i0l1i10000111001110d, $offset, $i0l1i10000000111110, $id)) { $offset += $i0l1i10000111001110d[0][1] + strlen($i0l1i10000111001110d[0][0]); $pos = Normalization::string_pos($i0l1i10001000011110, $i0l1i10000111001110d[0][0]); if ($pos !== false) { $replace = self::getReplaceFromRegExp('', $i0l1i10000111110110->getUnescapedNormalized()); $i0l1i10001000011110 = self::replaceString($i0l1i10001000011110, $replace, $pos[0], $pos[1] - $pos[0] + 1); $result[] = ["s\x69\x67_\x74\x79p\x65" => 2, "i\x64" => $i0l1i10000000111110->getScanDB()->blackUrls->getSig($id), "e\x6d\x70t\x79" => false]; } } unset($i0l1i10000111110110); $i0l1i10000111110110 = new ContentObject($i0l1i10001000011110, $deobfuscate, $unescape); } } private static function findBlackUrl($item, &$i0l1i10000111001110d, $offset, $i0l1i10000000111110, &$id) { return preg_match(self::URL_GRAB, $item, $i0l1i10000111001110d, PREG_OFFSET_CAPTURE, $offset) && !ScanCheckers::isOwnUrl($i0l1i10000111001110d[0][0], $i0l1i10000000111110->getScanDB()->getOwnUrl()) && (isset($i0l1i10000000111110->getScanDB()->whiteUrls) && !ScanCheckers::isUrlInList($i0l1i10000111001110d[0][0], $i0l1i10000000111110->getScanDB()->whiteUrls->getDb())) && ($id = ScanCheckers::isUrlInList($i0l1i10000111001110d[0][0], $i0l1i10000000111110->getScanDB()->blackUrls->getDb())); } } class FileHashMemoryDb { const HEADER_SIZE = 1024; const ROW_SIZE = 20; private $count; private $header; private $fp; private $data; public static function create($filepath) { if (file_exists($filepath)) { throw new Exception('File \'' . $filepath . '\' already exists.'); } $value = pack("V", 0); $header = array_fill(0, 256, $value); file_put_contents($filepath, implode($header)); return new self($filepath); } public static function open($filepath) { if (!file_exists($filepath)) { throw new Exception('File \'' . $filepath . '\' does not exist.'); } return new self($filepath); } private function __construct($filepath) { $this->fp = fopen($filepath, "r\x62"); if (false === $this->fp) { throw new Exception('File \'' . $filepath . '\' can not be opened.'); } try { $this->header = unpack("V\x32\x356", fread($this->fp, self::HEADER_SIZE)); $this->count = (int) (max(0, filesize($filepath) - self::HEADER_SIZE) / self::ROW_SIZE); foreach ($this->header as $chunk_id => $chunk_size) { if ($chunk_size > 0) { $str = fread($this->fp, $chunk_size); } else { $str = ''; } $this->data[$chunk_id] = $str; } } catch (Exception $e) { throw new Exception('File \'' . $filepath . '\' is not a valid DB file. An original error: \'' . $e->getMessage() . '\''); } } public function count() { return $this->count; } public function find($list) { sort($list); $hash = reset($list); $found = []; foreach ($this->header as $chunk_id => $chunk_size) { if ($chunk_size > 0) { $str = $this->data[$chunk_id]; do { $raw = pack("H*", $hash); $id = ord($raw[0]) + 1; if ($chunk_id == $id AND $this->binarySearch($str, $raw)) { $found[] = (string)$hash; } } while ($chunk_id >= $id AND $hash = next($list)); if ($hash === false) { break; } } } return $found; } private function binarySearch($str, $item) { $item_size = strlen($item); if ($item_size == 0) { return false; } $first = 0; $last = floor(strlen($str) / $item_size); while ($first < $last) { $mid = $first + (($last - $first) >> 1); $b = substr($str, $mid * $item_size, $item_size); if (strcmp($item, $b) <= 0) { $last = $mid; } else { $first = $mid + 1; } } $b = substr($str, $last * $item_size, $item_size); if ($b == $item) { return true; } else { return false; } } public function __destruct() { fclose($this->fp); } } class FilepathEscaper { public static function encodeFilepath($filepath) { return str_replace(['\\', "\n", "\r"], ['\\\\', '\\n', '\\r'], $filepath); } public static function decodeFilepath($filepath) { return preg_replace_callback('~(\\\\+)(.)~', function ($i0l1i10001010000010) { $count = strlen($i0l1i10001010000010[1]); if ($count % 2 === 0) { return str_repeat('\\', $count/2) . $i0l1i10001010000010[2]; } return str_repeat('\\', floor($count/2)) . stripcslashes('\\' . $i0l1i10001010000010[2]); }, $filepath); } public static function encodeFilepathByBase64($filepath) { return base64_encode($filepath); } public static function decodeFilepathByBase64($filepath_base64) { return base64_decode($filepath_base64); } } class LoadSignaturesForClean { private $sig_db = []; private $sig_db_meta_info = []; private $sig_db_location = "i\x6e\x74e\x72\x6ea\x6c"; private $scan_db = null; public $_FlexDBShe = []; private $deMapper = 'YTo1OntzOjEwOiJ3aXphcmQucGhwIjtzOjM3OiJjbGFzcyBXZWxjb21lU3RlcCBleHRlbmRzIENXaXphcmRTdGVwIjtzOjE3OiJ1cGRhdGVfY2xpZW50LnBocCI7czozNzoieyBDVXBkYXRlQ2xpZW50OjpBZGRNZXNzYWdlMkxvZygiZXhlYyI7czoxMToiaW5jbHVkZS5waHAiO3M6NDg6IkdMT0JBTFNbIlVTRVIiXS0+SXNBdXRob3JpemVkKCkgJiYgJGFyQXV0aFJlc3VsdCI7czo5OiJzdGFydC5waHAiO3M6NjA6IkJYX1JPT1QuJy9tb2R1bGVzL21haW4vY2xhc3Nlcy9nZW5lcmFsL3VwZGF0ZV9kYl91cGRhdGVyLnBocCI7czoxMDoiaGVscGVyLnBocCI7czo1ODoiSlBsdWdpbkhlbHBlcjo6Z2V0UGx1Z2luKCJzeXN0ZW0iLCJvbmVjbGlja2NoZWNrb3V0X3ZtMyIpOyI7fQ=='; public function __construct($signature, $avdb) { $this->sig_db_meta_info = [ 'build-date' => "n\x2f\x61", "v\x65\x72s\x69\x6fn" => "n\x2f\x61", 'release-type' => "n\x2f\x61", ]; if ($signature) { $i0l1i10000101001100 = explode("\n", trim(base64_decode(trim($signature)))); $this->sig_db_location = "e\x78\x74e\x72\x6ea\x6c"; } elseif (file_exists($avdb)) { $i0l1i10000101001100 = explode("\n", trim(@gzinflate(base64_decode(str_rot13(strrev(trim(file_get_contents($avdb)))))))); $this->sig_db_location = "e\x78\x74e\x72\x6ea\x6c"; echo "Loaded External DB\n"; } else { InternalCleanSignatures::init(); $i0l1i10000101001100 = explode("\n", base64_decode(strrev(str_rot13(gzinflate(base64_decode(InternalCleanSignatures::$i0l1i10001000101000)))))); } foreach ($i0l1i10000101001100 as $i0l1i10000101000010) { $i0l1i10000101000010 = trim($i0l1i10000101000010); if ($i0l1i10000101000010 == '') { continue; } $parsed = preg_split("/\t+/", $i0l1i10000101000010); if ($parsed[0] == 'System-Data') { $meta_info = json_decode($parsed[3], true); $this->sig_db_meta_info['build-date'] = $meta_info['build-date']; $this->sig_db_meta_info["v\x65\x72s\x69\x6fn"] = $meta_info["v\x65\x72s\x69\x6fn"]; $this->sig_db_meta_info['release-type'] = $meta_info['release-type']; } else { $i0l1i10000101100000["i\x64"] = $parsed[0]; $i0l1i10000101100000["m\x61\x73k\x5f\x74y\x70\x65"] = $parsed[1]; $i0l1i10000101100000["m\x61\x73k\x5f\x74y\x70\x65"] = str_replace('*.', '.*\.', $i0l1i10000101100000["m\x61\x73k\x5f\x74y\x70\x65"]); $i0l1i10000101100000["m\x61\x73k\x5f\x74y\x70\x65"] = str_replace("P\x52\x4fC\x55\x5fA\x4e\x59", '.*', $i0l1i10000101100000["m\x61\x73k\x5f\x74y\x70\x65"]); $i0l1i10000101100000["m\x61\x73k\x5f\x74y\x70\x65"] = str_replace("P\x52\x4fC\x55\x5fP\x48\x50", '\.(suspected|vir|txt|phtml|pht|php\d*|php\..*)$', $i0l1i10000101100000["m\x61\x73k\x5f\x74y\x70\x65"]); $i0l1i10000101100000["m\x61\x73k\x5f\x74y\x70\x65"] = str_replace("P\x52\x4fC\x55\x5fH\x54\x4dL", '\.(htm|html|tpl|inc)$', $i0l1i10000101100000["m\x61\x73k\x5f\x74y\x70\x65"]); $i0l1i10000101100000["m\x61\x73k\x5f\x74y\x70\x65"] = str_replace("P\x52\x4fC\x55\x5fJ\x53", '\.(js)$', $i0l1i10000101100000["m\x61\x73k\x5f\x74y\x70\x65"]); $i0l1i10000101100000["m\x61\x73k\x5f\x74y\x70\x65"] = str_replace("P\x52\x4fC\x55\x5fS\x53", '.*', $i0l1i10000101100000["m\x61\x73k\x5f\x74y\x70\x65"]); $i0l1i10000101100000["s\x69\x67_\x74\x79p\x65"] = (int)$parsed[2]; $i0l1i10000101100000["s\x69\x67_\x6d\x61t\x63\x68"] = str_replace('~', '\~', trim($parsed[3])); $i0l1i10000101100000["s\x69\x67_\x6d\x61t\x63\x68"] = str_replace('@<v>@', '\$[a-zA-Z0-9_]+', $i0l1i10000101100000["s\x69\x67_\x6d\x61t\x63\x68"]); $i0l1i10000101100000["s\x69\x67_\x6d\x61t\x63\x68"] = str_replace('@<id>@', '[a-zA-Z0-9_]+', $i0l1i10000101100000["s\x69\x67_\x6d\x61t\x63\x68"]); $i0l1i10000101100000["s\x69\x67_\x6d\x61t\x63\x68"] = str_replace('@<d>@', '\d+', $i0l1i10000101100000["s\x69\x67_\x6d\x61t\x63\x68"]); $i0l1i10000101100000["s\x69\x67_\x6d\x61t\x63\x68"] = str_replace('@<qq>@', '[\'"]', $i0l1i10000101100000["s\x69\x67_\x6d\x61t\x63\x68"]); $i0l1i10000101100000["s\x69\x67_\x6d\x61t\x63\x68"] = str_replace('@<q>@', '[\'"]{0,1}', $i0l1i10000101100000["s\x69\x67_\x6d\x61t\x63\x68"]); $i0l1i10000101100000["s\x69\x67_\x72\x65p\x6c\x61c\x65"] = trim(@$parsed[4]); if ($i0l1i10000101100000["s\x69\x67_\x6d\x61t\x63\x68"] == '') { throw new Exception($i0l1i10000101000010); } $this->sig_db[] = $i0l1i10000101100000; $this->_FlexDBShe[] = $i0l1i10000101100000["s\x69\x67_\x6d\x61t\x63\x68"]; } } LoadSignaturesForScan::optSig($this->_FlexDBShe, false, 'AibolitHelpers::myCheckSum'); $this->deMapper = @unserialize(@base64_decode($this->deMapper)); } public function getDBLocation() { return $this->sig_db_location; } public function getDB() { return $this->sig_db; } public function getDBMetaInfo() { return $this->sig_db_meta_info; } public function getDeMapper() { return is_array($this->deMapper) ? $this->deMapper : false; } public function getScanDB() { return $this->scan_db; } public function setScanDB($i0l1i10001000101000) { $this->scan_db = $i0l1i10001000101000; } } class InternalCleanSignatures { public static $i0l1i10001000101000; public static function init() { $i000101010010110010 = ''; self::$i0l1i10001000101000 = $i000101010010110010; } } class SignatureConverter { private $signatures = []; private $cuted_signatures = []; private $count_convert = 0; public function __construct($i0l1i10000000111110) { $this->signatures = $i0l1i10000000111110; } public function getCutSignature($sig_index) { if (!isset($this->signatures[$sig_index])) { return false; } $signature = $this->signatures[$sig_index]["s\x69\x67_\x6d\x61t\x63\x68"]; if (!isset($this->cuted_signatures[$sig_index])) { $cuted_signature = $this->cut($signature); if ($signature != $cuted_signature) { $this->cuted_signatures[$sig_index] = $cuted_signature; } else { $this->cuted_signatures[$sig_index] = false; } return $cuted_signature; } elseif ($this->cuted_signatures[$sig_index] === false) { return $signature; } return $this->cuted_signatures[$sig_index]; } public function getCountConverted() { return $this->count_convert; } private function cut($signature) { $this->count_convert++; $regexp = '^' . '(?:\\\A)?' . '(?:\\\s\*)?' . '<\\\\\?' . '(?:\\\s\*)?' . '(?:\\\s\+)?' . '(?:' ."p\x68\x70" . '|\(\?:php\)\?' . '|=' . '|\(\?:php\|=\)\??' . '|\(\?:=\|php\)\??' . ')?' . '(?:\\\s\+)?' . '(.*?)' . '(?:\(\??:?\|?)?' . '\\\\\?>' . '(?:\\\s\*)?' . '(?:\|?\\\Z\)?)?' . '$'; return preg_replace('~' . $regexp . '~smi', '\1', $signature); } } class ProcuInput { const JSON = 1; const PLAIN = 2; const CSV = 3; public static function load($filename, $type, $input_fn_b64_encoded = false, $blacked_by_cloud_list_file = null, $check_exists = true) { if (!file_exists($filename)) { echo 'Input file is not found' . PHP_EOL; die(2); } if (isset($blacked_by_cloud_list_file) && !file_exists($blacked_by_cloud_list_file)) { echo 'Input blacklist file not found' . PHP_EOL; die(2); } if (isset($blacked_by_cloud_list_file)) { foreach (self::loadPlain($blacked_by_cloud_list_file) as $item) { $item = $input_fn_b64_encoded ? FilepathEscaper::decodeFilepathByBase64($item) : trim($item); if ($check_exists && !file_exists($item)) { continue; } yield [$item, true]; } } if ($type == self::JSON) { foreach (self::loadJSON($filename) as $group => $files) { if ($group == "v\x75\x6cn\x65\x72s") { continue; } if ($group == "s\x75\x6dm\x61\x72y") { continue; } if ($group == "c\x6c\x6fu\x64\x68a\x73\x68") { foreach ($files as $item) { $item["f\x6e"] = $input_fn_b64_encoded ? FilepathEscaper::decodeFilepathByBase64($item["f\x6e"]) : trim($item["f\x6e"]); if ($check_exists && !file_exists($item["f\x6e"])) { continue; } yield [$item["f\x6e"], true]; } } else { foreach ($files as $item) { $item["f\x6e"] = $input_fn_b64_encoded ? FilepathEscaper::decodeFilepathByBase64($item["f\x6e"]) : trim($item["f\x6e"]); if ($check_exists && !file_exists($item["f\x6e"])) { continue; } yield [$item["f\x6e"], false]; } } } } else if ($type == self::PLAIN) { foreach (self::loadPlain($filename) as $item) { $item = $input_fn_b64_encoded ? FilepathEscaper::decodeFilepathByBase64($item) : trim($item); if ($check_exists && !file_exists($item)) { continue; } yield [$item, false]; } } else if ($type == self::CSV) { foreach (self::loadCSV($filename) as $item) { if ($item[0] == "v") { continue; } if ($item[0] == "c") { $item[1] = $input_fn_b64_encoded ? FilepathEscaper::decodeFilepathByBase64($item[1]) : trim($item[1]); if ($check_exists && !file_exists($item[1])) { continue; } yield [$item[1], true]; } else { $item[1] = $input_fn_b64_encoded ? FilepathEscaper::decodeFilepathByBase64($item[1]) : trim($item[1]); if ($check_exists && !file_exists($item[1])) { continue; } yield [$item[1], false]; } } } } private static function loadJSON($filename) { $list = json_decode(file_get_contents($filename), true); return $list; } private static function loadPlain($filename) { $list = new SplFileObject($filename, "r"); $list->setFlags(SplFileObject::DROP_NEW_LINE | SplFileObject::SKIP_EMPTY | SplFileObject::READ_AHEAD); return $list; } private static function loadCSV($filename) { $list = new SplFileObject($filename, "r"); $list->setFlags(SplFileObject::DROP_NEW_LINE | SplFileObject::SKIP_EMPTY | SplFileObject::READ_CSV | SplFileObject::READ_AHEAD); return $list; } public static function getCount($filename, $type, $blacked_by_cloud_list_file = null) { if (!file_exists($filename)) { echo 'Input file is not found' . PHP_EOL; die(2); } if (isset($blacked_by_cloud_list_file) && !file_exists($blacked_by_cloud_list_file)) { echo 'Input blacklist file not found' . PHP_EOL; die(2); } $c = 0; if ($type == self::JSON) { $list = json_decode(file_get_contents($filename), true); $c = isset($list["s\x75\x6dm\x61\x72y"]["c\x6f\x75n\x74\x65r\x73"]["c\x6c\x6fu\x64\x68a\x73\x68"]) ? $list["s\x75\x6dm\x61\x72y"]["c\x6f\x75n\x74\x65r\x73"]["c\x6c\x6fu\x64\x68a\x73\x68"] : 0; $c += $list["s\x75\x6dm\x61\x72y"]["c\x6f\x75n\x74\x65r\x73"]["c\x72\x69t\x69\x63a\x6c\x5fp\x68\x70"] + $list["s\x75\x6dm\x61\x72y"]["c\x6f\x75n\x74\x65r\x73"]["c\x72\x69t\x69\x63a\x6c\x5fj\x73"]; } else if ($type == self::PLAIN) { $list = new SplFileObject($filename, "r"); $list->setFlags(SplFileObject::DROP_NEW_LINE | SplFileObject::SKIP_EMPTY | SplFileObject::READ_AHEAD); $c = iterator_count($list); unset($list); if (isset($blacked_by_cloud_list_file)) { $list = new SplFileObject($filename, "r"); $list->setFlags(SplFileObject::DROP_NEW_LINE | SplFileObject::SKIP_EMPTY | SplFileObject::READ_AHEAD); $c += iterator_count($list); unset($list); } } else if ($type == self::CSV) { $list = new SplFileObject($filename, "r"); $list->setFlags(SplFileObject::DROP_NEW_LINE | SplFileObject::SKIP_EMPTY | SplFileObject::READ_CSV | SplFileObject::READ_AHEAD); foreach($list as $item) { if ($item[0] == "v") { continue; } $c++; } unset($list); } return $c; } } class ProcuReport { private $json_name = null; private $csv_name = null; private $extended = false; private $csv = null; private $report = null; private $additional = null; public function __construct($json_name, $extended = false, $csv_name = null, $additional = null) { $this->json_name = $json_name; $this->csv_name = $csv_name; $this->extended = $extended; $this->additional = $additional; if (($this->json_name && !$this->csv_name) || $this->extended) { $this->report = []; } if($this->json_name) { @unlink($this->json_name); @unlink($this->json_name . ".\x74\x6dp"); } if($this->csv_name) { @unlink($this->csv_name); @unlink($this->csv_name . ".\x74\x6dp"); $this->csv = fopen($this->csv_name . ".\x74\x6dp", "a+"); } } public function addToReport($file_report) { $file_report = $this->normalizeResult($file_report); if (!$file_report) { return; } if ($this->csv_name) { foreach ($file_report as $row) { $i0l1i10000101000010 = [$row["f"], $row["e"], $row["d"] ?? '', $row["s"], $row["t"] ?? '']; if (isset($row["r"])) { $i0l1i10000101000010[] = $row["r"]; } fputcsv($this->csv, $i0l1i10000101000010); } } if ($this->json_name && !$this->csv_name) { $this->report = array_merge($this->report, $file_report); } } private function normalizeResult($result) { $delete_list = []; $i0l1i10000111100010 = []; $i0l1i10000111011000 = []; $normalized = []; for ($i = 0; $i < count($result); $i++) { if (($result[$i]["e"] == REPORT_ERROR_FILE_CLEANEDUP) && ($result[$i]["d"] != REPORT_TYPE_OP_INJECTION_REMOVE) ) { $delete_list[] = $result[$i]["f"]; } if ($result[$i]["e"] > REPORT_ERROR_FILE_CLEANEDUP) { $i0l1i10000111100010[] = $result[$i]["f"]; $i0l1i10000111011000[$result[$i]["f"]] = $result[$i]["s"]; } } for ($i = 0; $i < count($result); $i++) { if ($result[$i]["e"] == REPORT_ERROR_FILE_CLEANEDUP && $result[$i]["d"] == REPORT_TYPE_OP_INJECTION_REMOVE && in_array($result[$i]["f"], $delete_list) ) { continue; } if (($result[$i]["e"] == REPORT_ERROR_FILE_CLEANEDUP) && in_array($result[$i]["f"], $i0l1i10000111100010) ) { continue; } if ($result[$i]["e"] > REPORT_ERROR_FILE_CLEANEDUP && in_array($result[$i]["f"], $i0l1i10000111100010) && $i0l1i10000111011000[$result[$i]["f"]] != $result[$i]["s"] ) { continue; } $normalized[] = $result[$i]; } return $normalized; } public function write() { if ($this->extended && isset($this->additional)) { $this->report = [ "r\x65\x73u\x6c\x74" => $this->report, "s\x75\x6dm\x61\x72y" => $this->additional, ]; } if (is_array($this->report) && $this->json_name) { @file_put_contents($this->json_name . ".\x74\x6dp", json_encode($this->report)); rename($this->json_name . ".\x74\x6dp", $this->json_name); } if ($this->csv_name && $this->csv) { fflush($this->csv); fclose($this->csv); rename($this->csv_name . ".\x74\x6dp", $this->csv_name); } } } class StringToStreamWrapper { const WRAPPER_NAME = "v\x61\x72"; private static $_content; private $_position; public static function prepare($i0l1i10000111110110) { if (!in_array(self::WRAPPER_NAME, stream_get_wrappers())) { stream_wrapper_register(self::WRAPPER_NAME, get_class()); } self::$_content = $i0l1i10000111110110; } public function stream_open($path, $i0l1i10000001001000, $i0l1i10001001000110ions, &$opened_path) { $this->_position = 0; return true; } public function stream_read($count) { $ret = substr(self::$_content, $this->_position, $count); $this->_position += strlen($ret); return $ret; } public function stream_stat() { return []; } public function stream_eof() { return $this->_position >= strlen(self::$_content); } public function stream_set_option($i0l1i10001001000110ion , $arg1, $arg2 ) { return true; } } class Normalization { const MAX_ITERATION = 10; private static $confusables = ""; private static function need_skip($string, $i) { $chars = " @\r\n\t"; if (isset($string[$i]) && strpos($chars, $string[$i]) !== false) { $i++; return $i; } return false; } private static function match_shortopen_tag($string, $i, $needle, $j) { $pos_needle = false; $pos_string = false; if ((isset($needle[$j - 2]) && isset($string[$i - 2])) && (($needle[$j - 2] == '<') && ($string[$i - 2] == '<')) && (isset($needle[$j - 1]) && isset($string[$i - 1])) && ($needle[$j - 1] == '?' && $string[$i - 1] == '?') ) { $pos_needle = $j; $pos_string = $i; } if ($pos_needle && (isset($needle[$pos_needle]) && $needle[$pos_needle] == "p") && (isset($needle[$pos_needle + 1]) && $needle[$pos_needle + 1] == "h") && (isset($needle[$pos_needle + 2]) && $needle[$pos_needle + 2] == "p") ) { $pos_needle = $pos_needle + 3; } if ($pos_string && (isset($string[$pos_string]) && $string[$pos_string] == "p") && (isset($string[$pos_string + 1]) && $string[$pos_string + 1] == "h") && (isset($string[$pos_string + 2]) && $string[$pos_string + 2] == "p") ) { $pos_string = $pos_string + 3; } return [$pos_needle, $pos_string]; } public static function unescape($string, $save_length = false) { if (strpos($string, '\\\'') === false && strpos($string, '\\"') === false && strpos($string, '\\/') === false) { return $string; } $strippedStr = stripcslashes($string); if (!$save_length) { return $strippedStr; } else { $strippedStr = self::extend_string_with_spaces($string, $strippedStr); return $strippedStr; } } public static function strip_whitespace($string, $save_length = false) { StringToStreamWrapper::prepare($string); $strippedStr = @php_strip_whitespace(StringToStreamWrapper::WRAPPER_NAME . '://'); if (!$save_length) { return $strippedStr; } else { $strippedStr = self::extend_string_with_spaces($string, $strippedStr); return $strippedStr; } } public static function normalize($string, $save_length = false) { $search = [ ' ;', ' =', ' ,', ' .', ' (', ' )', ' {', ' }', '; ', '= ', ', ', '. ' , '( ', '( ', '{ ', '} ', ' !', ' >', ' <', ' _', '_ ', '< ', '> ', ' $', ' %', '% ' , '# ', ' #', '^ ', ' ^', ' &', '& ', ' ?', '? ']; $replace = [ ';', '=', ',', ".", '(', ')', '{', '}', ';', '=', ',', "." , '(', ')', '{', '}', '!', '>', '<', "_", "_", '<', '>', '$', '%', '%' , '#', '#', '^', '^', '&', '&', '?', '?']; $bad_chars = ['配', '内']; $string = str_replace($bad_chars, ' ', $string); $string = str_replace("\xEF\xBB\xBF", '   ', $string); $last_char = $string[-1] ?? ''; if (!$save_length) { $string = str_replace('@', '', $string); $string = preg_replace('~\s+~msi', ' ', $string); $string = str_replace($search, $replace, $string); if (in_array($last_char, ["\r", "\n"]) && isset($string[-1]) && $string[-1] !== $last_char) { $string .= $last_char; } } $string = preg_replace_callback('~\bchr\(\s*([0-9a-fA-FxX\^]+)\s*\)~', function($m) use ($save_length) { if (strpos($m[1], '^') !== false) { $m[1] = Helpers::calc($m[1]); } if ($save_length) { return str_pad("'" . @chr(intval($m[1], 0)) . "'", strlen($m[0]), ' '); } else { return "'" . @chr(intval($m[1], 0)) . "'"; } }, $string); $pattern = '~%([0-9a-fA-F]{2})~'; if ($save_length && preg_match('~%25(%[0-9a-fA-F]{2}){2}(%25)?~ms', $string)) { $pattern = (isset($m[2]) && $m[2] !== '') ? '~%\s{0,2}([0-9a-fA-F\s]{2,6})~' : '~%\s{0,2}([0-9a-fA-F]{2})~'; } for ($i = 0; $i < 2; $i++) { $string = preg_replace_callback($pattern, function($m) use ($save_length) { if ($save_length) { return str_pad(chr(@hexdec($m[1])), strlen($m[0]), ' '); } else { return @chr(hexdec($m[1])); } }, $string); } $iter = 0; $regexpHtmlAmp = '/\&[#\w ]{2,20} {0,2}; {0,2}/i'; while ($iter < self::MAX_ITERATION && preg_match($regexpHtmlAmp, $string)) { $string = preg_replace_callback($regexpHtmlAmp, function ($m) use ($save_length) { if ($save_length) { if (strpos($m[0], '  ') !== false) { $m[0] = str_pad(str_replace(' ', '', $m[0]), strlen($m[0])); } $string = $m[0] == '&nbsp;' ? ' ' : $m[0]; return str_pad(@html_entity_decode($string, ENT_QUOTES | ENT_HTML5), strlen($m[0]), ' ', STR_PAD_LEFT); } else { $string = $m[0] == '&nbsp;' ? ' ' : $m[0]; return @html_entity_decode($string, ENT_QUOTES | ENT_HTML5); } }, $string); $iter++; } $string = preg_replace_callback('/\\\\(?:x(?<hex>[a-fA-F0-9]{1,2})|(?<oct>[0-9]{2,3}))/i', function($m) use ($save_length) { $is_oct = isset($m["o\x63\x74"]); $full_str = $m[0]; $value = $is_oct ? $m["o\x63\x74"] : $m["h\x65\x78"]; if ($save_length) { if ($is_oct) { return str_pad(@chr(octdec($value)), strlen($full_str), ' '); } return str_pad(chr(@hexdec($value)), strlen($full_str), ' '); } else { if ($is_oct) { return @chr(octdec($value)); } return @chr(hexdec($value)); } }, $string); $string = self::concatenate_strings($string, $save_length); $string = preg_replace_callback('~<title[^>]{0,99}>\s*\K(.{0,300}?)(?=<\/title>)~mis', function($m) use ($save_length) { if(preg_match('~(?:\w[^\x00-\x7F]{1,9}|[^\x00-\x7F]{1,9}\w)~', $m[1])) { return self::HomoglyphNormalize($m[1]); } return $m[1]; }, $string); $string = preg_replace_callback('~<\?p\s+h\s+p~msi', function ($m) { return str_pad('<?php', strlen($m[0]), ' '); }, $string); if (!$save_length) { $string = str_replace('<?php', '<?php ', $string); $string = preg_replace('~\s+~msi', ' ', $string); } else { $string = str_replace('<?php', '<?   ', $string); } return $string; } public static function get_end_of_extended_length($string_normalized, $string_orig, $start_pos) { if (strlen($string_normalized) == $start_pos + 1) { return $start_pos; } for ($i = $start_pos + 1, $iMax = strlen($string_normalized); $i < $iMax; $i++) { if ($string_orig[$i] === '\\' || $string_normalized[$i] !== ' ' || $string_orig[$i] === ' ') { break; } } return $i - 1; } public static function string_pos($string, $needle, $unescape = false) { $j = 0; $i0l1i10001001100100 = false; $start = false; $end = 0; $last_tag = [false, false]; $string_strip_whitespace = self::strip_whitespace($string, true); $string = preg_replace_callback('~(<%3f|%253c%3f|%3c%3f)(php)?~msi', function ($m) { $ret = (isset($m[2]) && $m[2] !== '') ? '<?php' : '<?'; return str_pad($ret, strlen($m[0]), ' '); }, $string_strip_whitespace); $string = preg_replace_callback('~(?:%3f>|%3f%253e|%3f%3e)~msi', function ($m) { return str_pad('?>', strlen($m[0]), ' ', STR_PAD_LEFT); }, $string); $string = self::normalize($string, true); $needle = self::normalize($needle, false); if ($unescape) { $string = self::unescape($string, true); $string = self::normalize($string, true); } $needle = self::concatenate_strings($needle, true); for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) { if(trim($string[$i]) === '' && trim($needle[$j]) === '') { $string[$i] = $needle[$j] = ' '; } if ($string[$i] == $needle[$j]) { if ($j == 0) { $start = $i; } elseif ($j == strlen($needle) - 1) { $end = self::get_end_of_extended_length($string, $string_strip_whitespace, $i); return [$start, $end]; } $j++; } else { $match_php_tag = self::match_shortopen_tag($string, $i, $needle, $j); if ($match_php_tag[0] !== false && ($last_tag[0] !== $match_php_tag[0])) { $j = $match_php_tag[0]; } if ($match_php_tag[1] !== false && ($last_tag[1] !== $match_php_tag[1])) { $i = $match_php_tag[1] - 1; } $last_tag = $match_php_tag; if ($match_php_tag[0] !== false || ($match_php_tag[1] !== false && (!empty($last_tag)))) { continue; } $i0l1i10001001100100 = self::need_skip($string, $i); if ($i0l1i10001001100100 !== false && $start !== false) { $i = $i0l1i10001001100100 - 1; } else { $j = 0; } } } return false; } private static function concatenate_strings($string, $save_length) { $string = preg_replace_callback('/[\'"]\s*?[\+\.]+\s*?[\'"]/smi', function($m) use ($save_length) { if ($save_length) { return str_repeat(' ', strlen($m[0])); } else { return ''; } }, $string); return $string; } private static function HomoglyphNormalize($str) { if (!is_array(self::$confusables)) { self::$confusables = @unserialize(@base64_decode(self::$confusables)); } return str_replace(array_keys(self::$confusables), array_values(self::$confusables), $str); } private static function extend_string_with_spaces($string, $strippedStr) { $in_comment_ml = false; $in_comment_nl = false; $iMax = strlen($string); $jMax = strlen($strippedStr); if ($iMax === $jMax) { return $string; } $newStr = ''; $j = 0; for ($i = 0; $i < $iMax; $i++) { if (isset($strippedStr[$j]) && trim($string[$i]) === trim($strippedStr[$j]) && !$in_comment_ml && !$in_comment_nl) { $newStr .= $string[$i]; $j++; } else if ((trim($string[$i]) === "/" && trim($string[$i + 1]) === '*') && !$in_comment_ml && !$in_comment_nl) { $in_comment_ml = true; $newStr .= ' '; } else if ((trim($string[$i]) === '*' && trim($string[$i + 1]) === "/") && $in_comment_ml) { $in_comment_ml = false; $newStr .= ' '; } else if ((trim($string[$i]) === "/" && trim($string[$i + 1]) === "/") && !$in_comment_nl && !$in_comment_ml) { $in_comment_nl = true; $newStr .= ' '; } else if ($string[$i] === "\n" && $in_comment_nl) { $in_comment_nl = false; $newStr .= ' '; } else if ($string[$i] === '?' && $string[$i + 1] === '>' && $in_comment_nl) { $in_comment_nl = false; $newStr .= $string[$i]; $j++; } else if ((isset($strippedStr[$j]) && trim($string[$i]) !== trim($strippedStr[$j])) && ($in_comment_ml || $in_comment_nl)) { $newStr .= ' '; } else { $newStr .= ' '; } } return $newStr; } public static function setConfusables(array $confusables) { self::$confusables = $confusables; } } class Encoding { const UTF32_BIG_ENDIAN_BOM = "\x00\x00\xFE\xFF"; const UTF32_LITTLE_ENDIAN_BOM = "\xFF\xFE\x00\x00"; const UTF16_BIG_ENDIAN_BOM = "\xFE\xFF"; const UTF16_LITTLE_ENDIAN_BOM = "\xFF\xFE"; const UTF8_BOM = "\xEF\xBB\xBF"; public static function detectUTFEncoding($text) { $first2 = substr($text, 0, 2); $first3 = substr($text, 0, 3); $first4 = substr($text, 0, 4); if ($first3 == self::UTF8_BOM) { return 'UTF-8'; } elseif ($first4 == self::UTF32_BIG_ENDIAN_BOM) { return 'UTF-32BE'; } elseif ($first4 == self::UTF32_LITTLE_ENDIAN_BOM) { return 'UTF-32LE'; } elseif ($first2 == self::UTF16_BIG_ENDIAN_BOM) { return 'UTF-16BE'; } elseif ($first2 == self::UTF16_LITTLE_ENDIAN_BOM) { return 'UTF-16LE'; } return false; } public static function iconvSupported() { return (function_exists("i\x63\x6fn\x76") && is_callable("i\x63\x6fn\x76")); } public static function convertToCp1251($from, $str) { $ret = @iconv($from, "C\x50\x312\x35\x31/\x2f\x54R\x41\x4eS\x4c\x49T", $str); if ($ret === false) { $ret = @iconv($from, "C\x50\x312\x35\x31/\x2f\x49G\x4e\x4fR\x45", $str); } return $ret; } public static function convertToUTF8($from, $str) { return @iconv($from, 'UTF-8//IGNORE', $str); } } class Helpers { const REGEXP_BASE64_DECODE = '~base64_decode\s*\(\s*[\'"]([^\'"]*)[\'"]\s*\)~mis'; const GOTO_MAX_HOPS = 1000; public static function normalize($string, $save_length = false) { $search = [ ' ;', ' =', ' ,', ' .', ' (', ' )', ' {', ' }', '; ', '= ', ', ', '. ' , '( ', '( ', '{ ', '} ', ' !', ' >', ' <', ' _', '_ ', '< ', '> ', ' $', ' %', '% ' , '# ', ' #', '^ ', ' ^', ' &', '& ', ' ?', '? ']; $replace = [ ';', '=', ',', ".", '(', ')', '{', '}', ';', '=', ',', "." , '(', ')', '{', '}', '!', '>', '<', "_", "_", '<', '>', '$', '%', '%' , '#', '#', '^', '^', '&', '&', '?', '?']; if (!$save_length) { $string = str_replace('@', '', $string); $string = preg_replace('~\s+~smi', ' ', $string); $string = str_replace($search, $replace, $string); } $string = preg_replace_callback('~\bchr\(\s*([0-9a-fA-FxX\^]+)\s*\)~', static function($m) use ($save_length) { if (strpos($m[1], '^') !== false) { $m[1] = Helpers::calc($m[1]); } if ($save_length) { return str_pad("'" . @chr(intval($m[1], 0)) . "'", strlen($m[0]), ' '); } else { return "'" . @chr(intval($m[1], 0)) . "'"; } }, $string); $string = preg_replace_callback('/\&\#([0-9]{1,3});/i', static function($m) use ($save_length) { if ($save_length) { return str_pad(@chr((int)$m[1]), strlen($m[0]), ' '); } else { return @chr((int)$m[1]); } }, $string); $string = preg_replace_callback('/\\\\(?:x(?<hex>[a-fA-F0-9]{1,2})|(?<oct>[0-9]{1,3}))/i', function($m) use ($save_length) { $is_oct = isset($m["o\x63\x74"]); $full_str = $m[0]; $value = $is_oct ? $m["o\x63\x74"] : $m["h\x65\x78"]; if ($save_length) { if ($is_oct) { return str_pad(@chr(octdec($value)), strlen($full_str), ' '); } return str_pad(chr(@hexdec($value)), strlen($full_str), ' '); } else { if ($is_oct) { return @chr(octdec($value)); } return @chr(hexdec($value)); } }, $string); $string = preg_replace_callback('/[\'"]\s*?\.+\s*?[\'"]/smi', static function($m) use ($save_length) { if ($save_length) { return str_repeat(' ', strlen($m[0])); } else { return ''; } }, $string); $string = preg_replace_callback('/[\'"]\s*?\++\s*?[\'"]/smi', static function($m) use ($save_length) { if ($save_length) { return str_repeat(' ', strlen($m[0])); } else { return ''; } }, $string); if (!$save_length) { $string = str_replace('<?php', '<?php ', $string); $string = preg_replace('~\s+~', ' ', $string); } return $string; } public static function format($source) { $t_count = 0; $in_object = false; $in_at = false; $in_php = false; $in_for = false; $in_comp = false; $in_quote = false; $in_var = false; if (!defined("T\x5f\x4dL\x5f\x43O\x4d\x4dE\x4e\x54")) { define("T\x5f\x4dL\x5f\x43O\x4d\x4dE\x4e\x54", T_COMMENT); } $result = ''; @$tokens = token_get_all($source); foreach ($tokens as $token) { if (is_string($token)) { $token = trim($token); if ($token == '{') { if ($in_for) { $in_for = false; } if (!$in_quote && !$in_var) { $t_count++; $result = rtrim($result) . ' ' . $token . "\n" . str_repeat('    ', $t_count); } else { $result = rtrim($result) . $token; } } elseif ($token == '$') { $in_var = true; $result .= $token; } elseif ($token == '}') { if (!$in_quote && !$in_var) { $new_line = true; $t_count--; if ($t_count < 0) { $t_count = 0; } $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) . $token . "\n" . @str_repeat('    ', $t_count); } else { $result = rtrim($result) . $token; } if ($in_var) { $in_var = false; } } elseif ($token == ';') { if ($in_comp) { $in_comp = false; } if ($in_for) { $result .= $token . ' '; } else { $result .= $token . "\n" . str_repeat('    ', $t_count); } } elseif ($token == ':') { if ($in_comp) { $result .= ' ' . $token . ' '; } else { $result .= $token . "\n" . str_repeat('    ', $t_count); } } elseif ($token == '(') { $result .= ' ' . $token; } elseif ($token == ')') { $result .= $token; } elseif ($token == '@') { $in_at = true; $result .= $token; } elseif ($token == ".") { $result .= ' ' . $token . ' '; } elseif ($token == '=') { $result .= ' ' . $token . ' '; } elseif ($token == '?') { $in_comp = true; $result .= ' ' . $token . ' '; } elseif ($token == '"') { if ($in_quote) { $in_quote = false; } else { $in_quote = true; } $result .= $token; } else { $result .= $token; } } else { list($id, $text) = $token; switch ($id) { case T_OPEN_TAG: case T_OPEN_TAG_WITH_ECHO: $in_php = true; $result .= trim($text) . "\n"; break; case T_CLOSE_TAG: $in_php = false; $result .= trim($text); break; case T_FOR: $in_for = true; $result .= trim($text); break; case T_OBJECT_OPERATOR: $result .= trim($text); $in_object = true; break; case T_ENCAPSED_AND_WHITESPACE: case T_WHITESPACE: $result .= trim($text); break; case T_RETURN: $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) . trim($text) . ' '; break; case T_ELSE: case T_ELSEIF: $result = rtrim($result) . ' ' . trim($text) . ' '; break; case T_CASE: case T_DEFAULT: $result = rtrim($result) . "\n" . str_repeat('    ', $t_count - 1) . trim($text) . ' '; break; case T_FUNCTION: case T_CLASS: $result .= "\n" . str_repeat('    ', $t_count) . trim($text) . ' '; break; case T_AND_EQUAL: case T_AS: case T_BOOLEAN_AND: case T_BOOLEAN_OR: case T_CONCAT_EQUAL: case T_DIV_EQUAL: case T_DOUBLE_ARROW: case T_IS_EQUAL: case T_IS_GREATER_OR_EQUAL: case T_IS_IDENTICAL: case T_IS_NOT_EQUAL: case T_IS_NOT_IDENTICAL: case T_LOGICAL_AND: case T_LOGICAL_OR: case T_LOGICAL_XOR: case T_MINUS_EQUAL: case T_MOD_EQUAL: case T_MUL_EQUAL: case T_OR_EQUAL: case T_PLUS_EQUAL: case T_SL: case T_SL_EQUAL: case T_SR: case T_SR_EQUAL: case T_START_HEREDOC: case T_XOR_EQUAL: $result = rtrim($result) . ' ' . trim($text) . ' '; break; case T_COMMENT: $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) . trim($text) . ' '; break; case T_ML_COMMENT: $result = rtrim($result) . "\n"; $i0l1i10000101000010s = explode("\n", $text); foreach ($i0l1i10000101000010s as $i0l1i10000101000010) { $result .= str_repeat('    ', $t_count) . trim($i0l1i10000101000010); } $result .= "\n"; break; case T_INLINE_HTML: $result .= $text; break; default: $result .= trim($text); break; } } } return $result; } public static function replaceCreateFunction($str) { $hangs = 20; $str = stripcslashes($str); while (strpos($str, "c\x72\x65a\x74\x65_\x66\x75n\x63\x74i\x6f\x6e") !== false && $hangs--) { $start_pos = strpos($str, "c\x72\x65a\x74\x65_\x66\x75n\x63\x74i\x6f\x6e"); $end_pos = 0; $brackets = 0; $started = false; $opened = 0; $closed = 0; for ($i = $start_pos, $iMax = strlen($str); $i < $iMax; $i++) { if ($str[$i] === '(') { $started = true; $brackets++; $opened++; } else if ($str[$i] === ')') { $closed++; $brackets--; } if ($brackets == 0 && $started) { $end_pos = $i + 1; break; } } $cr_func = substr($str, $start_pos, $end_pos - $start_pos); $func = implode('function(', explode('create_function(\'', $cr_func, 2)); $func = implode(') {', explode('\',\'', $func, 2)); $func = substr($func, 0, -2) . '}'; $str = str_replace($cr_func, $func, $str); } return $str; } public static function calc($expr) { if (is_array($expr)) { $expr = $expr[0]; } preg_match('~(chr|min|max|round)?\(([^\)]+)\)~msi', $expr, $expr_arr); if (@$expr_arr[1] == "m\x69\x6e" || @$expr_arr[1] == "m\x61\x78") { return $expr_arr[1](explode(',', $expr_arr[2])); } elseif (@$expr_arr[1] == "c\x68\x72") { if ($expr_arr[2][0] === '(') { $expr_arr[2] = substr($expr_arr[2], 1); } $expr_arr[2] = self::calc($expr_arr[2]); return $expr_arr[1]((int)$expr_arr[2]); } elseif (@$expr_arr[1] == "r\x6f\x75n\x64") { $expr_arr[2] = self::calc($expr_arr[2]); return $expr_arr[1]($expr_arr[2]); } else { preg_match_all('~([\d\.a-fx]+)([\*\/\-\+\^\|\&])?~', $expr, $expr_arr); foreach ($expr_arr[1] as &$expr_arg) { if (strpos($expr_arg, "0\x78") !== false) { $expr = str_replace($expr_arg, hexdec($expr_arg), $expr); $expr_arg = hexdec($expr_arg); } else if ($expr_arg[0] === "0" && (strlen($expr_arg) > 1) && (strpos($expr_arg, ".") === false)) { $expr = str_replace($expr_arg, octdec($expr_arg), $expr); $expr_arg = octdec($expr_arg); } } if (in_array('*', $expr_arr[2]) !== false) { $pos = array_search('*', $expr_arr[2]); $res = $expr_arr[1][$pos] * $expr_arr[1][$pos + 1]; $pos_subst = strpos($expr, $expr_arr[1][$pos] . '*' . $expr_arr[1][$pos + 1]); $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '*' . $expr_arr[1][$pos + 1])); $expr = self::calc($expr); } elseif (in_array("/", $expr_arr[2]) !== false) { $pos = array_search("/", $expr_arr[2]); $res = $expr_arr[1][$pos] / $expr_arr[1][$pos + 1]; $pos_subst = strpos($expr, $expr_arr[1][$pos] . "/" . $expr_arr[1][$pos + 1]); $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . "/" . $expr_arr[1][$pos + 1])); $expr = self::calc($expr); } elseif (in_array('-', $expr_arr[2]) !== false) { $pos = array_search('-', $expr_arr[2]); $res = $expr_arr[1][$pos] - $expr_arr[1][$pos + 1]; $pos_subst = strpos($expr, $expr_arr[1][$pos] . '-' . $expr_arr[1][$pos + 1]); $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '-' . $expr_arr[1][$pos + 1])); $expr = self::calc($expr); } elseif (in_array('+', $expr_arr[2]) !== false) { $pos = array_search('+', $expr_arr[2]); $res = $expr_arr[1][$pos] + $expr_arr[1][$pos + 1]; $pos_subst = strpos($expr, $expr_arr[1][$pos] . '+' . $expr_arr[1][$pos + 1]); $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '+' . $expr_arr[1][$pos + 1])); $expr = self::calc($expr); } elseif (in_array('^', $expr_arr[2]) !== false) { $pos = array_search('^', $expr_arr[2]); $res = (int)$expr_arr[1][$pos] ^ (int)$expr_arr[1][$pos + 1]; $pos_subst = strpos($expr, $expr_arr[1][$pos] . '^' . $expr_arr[1][$pos + 1]); $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '^' . $expr_arr[1][$pos + 1])); $expr = self::calc($expr); } elseif (in_array('|', $expr_arr[2]) !== false) { $pos = array_search('|', $expr_arr[2]); $res = $expr_arr[1][$pos] | $expr_arr[1][$pos + 1]; $pos_subst = strpos($expr, $expr_arr[1][$pos] . '|' . $expr_arr[1][$pos + 1]); $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '|' . $expr_arr[1][$pos + 1])); $expr = self::calc($expr); } elseif (in_array('&', $expr_arr[2]) !== false) { $pos = array_search('&', $expr_arr[2]); $res = $expr_arr[1][$pos] & $expr_arr[1][$pos + 1]; $pos_subst = strpos($expr, $expr_arr[1][$pos] . '&' . $expr_arr[1][$pos + 1]); $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '&' . $expr_arr[1][$pos + 1])); $expr = self::calc($expr); } else { return $expr; } return $expr; } } public static function getEvalCode($string) { preg_match("/eval\(([^\)]+)\)/msi", $string, $i0l1i10001010000010); return (empty($i0l1i10001010000010)) ? '' : end($i0l1i10001010000010); } public static function unwrapGoto(&$i0l1i10000111110110): string { preg_match_all('~goto\s?(\w+);~msi', $i0l1i10000111110110, $gotoMatches, PREG_SET_ORDER); $gotoCount = count($gotoMatches); if (!$gotoCount || ($gotoCount <= 0 && $gotoCount > self::GOTO_MAX_HOPS)) { return $i0l1i10000111110110; } $label_num = 0; $label_name = "t\x6d\x70_\x6c\x61b\x65\x6c"; $res = ''; $hops = self::GOTO_MAX_HOPS; if (preg_match('~(.*?)(?:goto\s\w+;|\w+:)~msi', $i0l1i10000111110110, $m)) { $res .= trim($m[1]) . PHP_EOL; } if (preg_match('~\w{1,99}:\s*(<\?php)~msi', $i0l1i10000111110110, $m, PREG_OFFSET_CAPTURE)) { $orig = substr($i0l1i10000111110110, 0, $m[1][1]); $i0l1i10000111110110 = str_replace('<?php ' . $orig, '', $i0l1i10000111110110); } $i0l1i10000111110110 = preg_replace_callback('~(?<!: )\}\s*goto\s*\w+;~mis', function($m) use (&$label_num, $label_name) { $label_num++; return $label_name . $label_num . ': ' . $m[0]; }, $i0l1i10000111110110); preg_match_all('~(\w+):\s*if\s*(\([^)(]*+(?:(?2)[^)(]*)*+\))\s*\{\s*goto\s*(\w+); (' . $label_name . '\d+):\s*\}\s*goto\s*(\w+);~mis', $i0l1i10000111110110, $conds, PREG_SET_ORDER); foreach ($conds as $cond) { preg_match('~\w+:\s*(\w+):\s*goto\s*' . $cond[1] . '~msi', $i0l1i10000111110110, $while); preg_match('~' . $cond[5] . ':\s*(\w+):\s*goto\s*(\w+);~msi', $i0l1i10000111110110, $do); preg_match('~(\w+):\s*' . $cond[3] . ':\s*goto\s*(\w+);~msi', $i0l1i10000111110110, $m); preg_match('~(\w+):\s*goto\s*(\w+); goto\s*' . $m[1] . ';~msi', $i0l1i10000111110110, $ifelse); preg_match('~(\w+):\s*\w+:\s*goto\s*' . $cond[1] . ';~msi', $i0l1i10000111110110, $m); preg_match('~(\w+):\s*\w+:\s*goto\s*' . $m[1] . ';~msi', $i0l1i10000111110110, $m); preg_match('~(\w+):\s*' . $ifelse[2] . ': goto\s*(\w+);~msi', $i0l1i10000111110110, $m); if (!empty($m) && ($m[2] === $cond[1])) { $ifelse = []; } if (empty($do) && empty($ifelse)) { if ($cond[2][1] === '!') { $cond[2] = substr_replace($cond[2], '', 1, 1); } else { $cond[2] = '(!' . $cond[2] . ')'; } } if (!empty($ifelse)) { $i0l1i10000111110110 = str_replace($cond[0], $cond[1] . ': if ' . $cond[2] . ' { goto ' . $cond[3] . '; ' . $cond[4] . ': ' . '} else { goto ' . $cond[5] . ';', $i0l1i10000111110110); preg_match('~(\w+):\s*(' . $ifelse[2] . '):\s*goto\s*(\w+);~msi', $i0l1i10000111110110, $m2); $i0l1i10000111110110 = str_replace($m2[0], $m2[1] . ': goto ' . $cond[4] . '; ' . $m2[2] . ': } goto ' . $m2[3] . ';', $i0l1i10000111110110); } elseif (!empty($do)) { preg_match('~(\w+):\s*(' . $cond[3] . '):\s*goto\s*~msi', $i0l1i10000111110110, $match); $tmp = $cond[0]; $i0l1i10000111110110 = str_replace($match[0], $match[1] . ': do { goto ' . $match[2] . '; ' . $match[2] . ': goto ', $i0l1i10000111110110); $cond[0] = $cond[1] . ': } while ' . $cond[2] . '; goto ' . $cond[5] . ';'; $i0l1i10000111110110 = str_replace($tmp, $cond[0], $i0l1i10000111110110); } else if (!empty($while)) { preg_match('~\w+:\s*goto\s*(' . $while[1] . ')~msi', $i0l1i10000111110110, $match); $i0l1i10000111110110 = str_replace($match[0], str_replace($match[1], $cond[4], $match[0]), $i0l1i10000111110110); $i0l1i10000111110110 = str_replace($cond[0], $cond[1] . ': ' . 'while (' . $cond[2] . ') {' . 'goto ' . $cond[5] . '; ' . $cond[4] . ': } goto ' . $cond[3] . ';', $i0l1i10000111110110); } else { $tmp = $cond[0]; $cond[0] = $cond[1] . ': ' . 'if ' . $cond[2] . ' { goto ' . $cond[5] . '; ' . $cond[4] . ': } goto ' . $cond[3] . ';'; $i0l1i10000111110110 = str_replace($tmp, $cond[0], $i0l1i10000111110110); preg_match('~(\w+):\s*(' . $cond[3] . '):\s*goto\s*(\w+)~msi', $i0l1i10000111110110, $match); $i0l1i10000111110110 = str_replace($match[0], $match[1] . ': goto ' . $cond[4] . '; ' . $match[2] . ': goto ' . $match[3], $i0l1i10000111110110); } } $nextGotoPos = 0; while ($nextGotoPos !== false && $hops > 0 && preg_match('~goto\s(\w+);~msi', substr($i0l1i10000111110110, $nextGotoPos), $gotoNameMatch, PREG_OFFSET_CAPTURE)) { $gotoNameStr = $gotoNameMatch[1][0] . ':'; $gotoNameStrLen = strlen($gotoNameStr); $gotoPos = strpos($i0l1i10000111110110, $gotoNameStr); $nextGotoPos = strpos($i0l1i10000111110110, 'goto ', $gotoPos); $cutUntilPos = ($nextGotoPos - $gotoPos) - $gotoNameStrLen; $substr = ''; if ($nextGotoPos) { $substr = substr($i0l1i10000111110110, $gotoPos + $gotoNameStrLen, $cutUntilPos); } else { $substr = substr($i0l1i10000111110110, $gotoPos + $gotoNameStrLen); } $piece = trim($substr); $piece === '' ?: $res .= $piece . ' '; $hops--; } $res = preg_replace('~\w{1,20}:~msi', '', $res); $res = stripcslashes($res); return $res; } public static function getTextInsideQuotes($string) { if (preg_match_all('/("(.*)")/msi', $string, $i0l1i10001010000010)) { $array = end($i0l1i10001010000010); return @end($array); } if (preg_match_all('/\((\'(.*)\')/msi', $string, $i0l1i10001010000010)) { $array = end($i0l1i10001010000010); return @end($array); } return ''; } public static function getNeedles($string) { preg_match_all("/'(.*?)'/msi", $string, $i0l1i10001010000010); return (empty($i0l1i10001010000010)) ? [] : $i0l1i10001010000010[1]; } public static function getHexValues($string) { preg_match_all('/0x[a-fA-F0-9]{1,8}/msi', $string, $i0l1i10001010000010); return (empty($i0l1i10001010000010)) ? [] : $i0l1i10001010000010[0]; } public static function formatPHP($string) { $string = str_replace('<?php', '', $string); $string = str_replace('?>', '', $string); $string = str_replace(PHP_EOL, "", $string); $string = str_replace(";", ";\n", $string); $string = str_replace("}", "}\n", $string); return $string; } public static function prepareArray($string) { $string = rtrim($string, ','); $array_string = Helpers::normalize($string); $list_str = explode(',', $array_string); $result = []; foreach ($list_str as $element) { $i0l1i10000100010000 = null; $value = $element; if (strpos($element, '=>') !== false) { list($i0l1i10000100010000, $value) = explode('=>', $element); } $i0l1i10000100010000 = is_null($i0l1i10000100010000) ? $i0l1i10000100010000 : trim($i0l1i10000100010000, '\'"'); $value = is_null($value) ? $value : trim($value, '\'"'); if (is_null($i0l1i10000100010000)) { $result[] = $value; } else { $result[$i0l1i10000100010000] = $value; } } return $result; } public static function detect_utf_encoding($text) { $first2 = substr($text, 0, 2); $first3 = substr($text, 0, 3); $first4 = substr($text, 0, 4); if ($first4 == chr(0x00) . chr(0x00) . chr(0xFE) . chr(0xFF)) { return 'UTF-32BE'; } elseif ($first4 == chr(0xFF) . chr(0xFE) . chr(0x00) . chr(0x00)) { return 'UTF-32LE'; } elseif ($first2 == chr(0xFE) . chr(0xFF)) { return 'UTF-16BE'; } elseif ($first2 == chr(0xFF) . chr(0xFE)) { return 'UTF-16LE'; } return false; } public static function someDecoder($str) { $str = base64_decode($str); $TC9A16C47DA8EEE87 = 0; $TA7FB8B0A1C0E2E9E = 0; $T17D35BB9DF7A47E4 = 0; $T65CE9F6823D588A7 = (ord($str[1]) << 8) + ord($str[2]); $i = 3; $T77605D5F26DD5248 = 0; $block = 16; $T7C7E72B89B83E235 = ""; $T43D5686285035C13 = ""; $len = strlen($str); $T6BBC58A3B5B11DC4 = 0; for (; $i < $len;) { if ($block == 0) { $T65CE9F6823D588A7 = (ord($str[$i++]) << 8); $T65CE9F6823D588A7 += ord($str[$i++]); $block = 16; } if ($T65CE9F6823D588A7 & 0x8000) { $TC9A16C47DA8EEE87 = (ord($str[$i++]) << 4); $TC9A16C47DA8EEE87 += (ord($str[$i]) >> 4); if ($TC9A16C47DA8EEE87) { $TA7FB8B0A1C0E2E9E = (ord($str[$i++]) & 0x0F) + 3; for ($T17D35BB9DF7A47E4 = 0; $T17D35BB9DF7A47E4 < $TA7FB8B0A1C0E2E9E; $T17D35BB9DF7A47E4++) { $T7C7E72B89B83E235[$T77605D5F26DD5248 + $T17D35BB9DF7A47E4] = $T7C7E72B89B83E235[$T77605D5F26DD5248 - $TC9A16C47DA8EEE87 + $T17D35BB9DF7A47E4]; } $T77605D5F26DD5248 += $TA7FB8B0A1C0E2E9E; } else { $TA7FB8B0A1C0E2E9E = (ord($str[$i++]) << 8); $TA7FB8B0A1C0E2E9E += ord($str[$i++]) + 16; for ($T17D35BB9DF7A47E4 = 0; $T17D35BB9DF7A47E4 < $TA7FB8B0A1C0E2E9E; $T7C7E72B89B83E235[$T77605D5F26DD5248 + $T17D35BB9DF7A47E4++] = $str[$i]) { } $i++; $T77605D5F26DD5248 += $TA7FB8B0A1C0E2E9E; } } else { $T7C7E72B89B83E235[$T77605D5F26DD5248++] = $str[$i++]; } $T65CE9F6823D588A7 <<= 1; $block--; if ($i == $len) { $T43D5686285035C13 = $T7C7E72B89B83E235; if (is_array($T43D5686285035C13)) { $T43D5686285035C13 = implode($T43D5686285035C13); } $T43D5686285035C13 = "?" . ">" . $T43D5686285035C13; return $T43D5686285035C13; } } } public static function someDecoder2($WWAcmoxRAZq, $sBtUiFZaz) { $JYekrRTYM = str_rot13(gzinflate(str_rot13(base64_decode('y8svKCwqLiktK6+orFdZV0FWWljPyMzKzsmNNzQyNjE1M7ewNAAA')))); if ($WWAcmoxRAZq == "a\x73\x65d\x66\x65r\x67\x345\x36\x378\x39\x303\x34\x368\x39\x67d") { $cEerbvwKPI = $JYekrRTYM[18] . $JYekrRTYM[19] . $JYekrRTYM[17] . $JYekrRTYM[17] . $JYekrRTYM[4] . $JYekrRTYM[21]; return $cEerbvwKPI($sBtUiFZaz); } elseif ($WWAcmoxRAZq == "z\x66\x63x\x64\x72t\x67\x79u\x36\x378\x39\x354\x66\x74y\x75\x69p") { $JWTDeUKphI = $JYekrRTYM[1] . $JYekrRTYM[0] . $JYekrRTYM[18] . $JYekrRTYM[4] . $JYekrRTYM[32] . $JYekrRTYM[30] . $JYekrRTYM[26] . $JYekrRTYM[3] . $JYekrRTYM[4] . $JYekrRTYM[2] . $JYekrRTYM[14] . $JYekrRTYM[3] . $JYekrRTYM[4]; return $JWTDeUKphI($sBtUiFZaz); } elseif ($WWAcmoxRAZq == "g\x79\x75r\x74\x345\x36\x63d\x66\x65w\x71\x7as\x77\x65x\x63\x647\x38\x390\x64\x66") { $rezmMBMev = $JYekrRTYM[6] . $JYekrRTYM[25] . $JYekrRTYM[8] . $JYekrRTYM[13] . $JYekrRTYM[5] . $JYekrRTYM[11] . $JYekrRTYM[0] . $JYekrRTYM[19] . $JYekrRTYM[4]; return $rezmMBMev($sBtUiFZaz); } elseif ($WWAcmoxRAZq == "z\x63\x64f\x65\x724\x35\x64f\x65\x72r\x74\x74u\x69\x68v\x73\x343\x32\x318\x39\x30m\x6a") { $WbbQXOQbH = $JYekrRTYM[18] . $JYekrRTYM[19] . $JYekrRTYM[17] . $JYekrRTYM[26] . $JYekrRTYM[17] . $JYekrRTYM[14] . $JYekrRTYM[19] . $JYekrRTYM[27] . $JYekrRTYM[29]; return $WbbQXOQbH($sBtUiFZaz); } elseif ($WWAcmoxRAZq == "z\x73\x65d\x72\x74r\x65\x345\x36\x35f\x62\x67h\x67\x72t\x79\x72s\x73\x64x\x76\x345\x36") { $jPnPLPZcMHgH = $JYekrRTYM[2] . $JYekrRTYM[14] . $JYekrRTYM[13] . $JYekrRTYM[21] . $JYekrRTYM[4] . $JYekrRTYM[17] . $JYekrRTYM[19] . $JYekrRTYM[26] . $JYekrRTYM[20] . $JYekrRTYM[20] . $JYekrRTYM[3] . $JYekrRTYM[4] . $JYekrRTYM[2] . $JYekrRTYM[14] . $JYekrRTYM[3] . $JYekrRTYM[4]; return $jPnPLPZcMHgH($sBtUiFZaz); } } public static function someDecoder3($str) { $l = base64_decode($str); $lllllll = 0; $lllll = 3; $llllll = (ord($l[1]) << 8) + ord($l[2]); $lllllllll = 16; $llllllll = []; for ($lllllMax = strlen($l); $lllll < $lllllMax;) { if ($lllllllll == 0) { $llllll = (ord($l[$lllll++]) << 8); $llllll+= ord($l[$lllll++]); $lllllllll = 16; } if ($llllll & 0x8000) { $lll = (ord($l[$lllll++]) << 4); $lll+= (ord($l[$lllll]) >> 4); if ($lll) { $ll = (ord($l[$lllll++]) & 0x0f) + 3; for ($llll = 0;$llll < $ll;$llll++) $llllllll[$lllllll + $llll] = $llllllll[$lllllll - $lll + $llll]; $lllllll+= $ll; } else { $ll = (ord($l[$lllll++]) << 8); $ll+= ord($l[$lllll++]) + 16; for ($llll = 0;$llll < $ll;$llllllll[$lllllll + $llll++] = ord($l[$lllll])); $lllll++; $lllllll+= $ll; } } else { $llllllll[$lllllll++] = ord($l[$lllll++]); } $llllll <<= 1; $lllllllll--; } $lllll = 0; $lllllllll="?".chr(62); $llllllllll = ""; for (;$lllll < $lllllll;) { $llllllllll.= chr($llllllll[$lllll++] ^ 0x07); } $lllllllll.=$llllllllll.chr(60)."?"; return $lllllllll; } public static function PHPJiaMi_decoder($str, $md5, $rand, $lower_range = '') { $md5_xor = md5($md5); $lower_range = !$lower_range ? ord($rand) : $lower_range; $layer1 = ''; for ($i=0, $iMax = strlen($str); $i < $iMax; $i++) { $layer1 .= ord($str[$i]) < 245 ? ((ord($str[$i]) > $lower_range && ord($str[$i]) < 245) ? chr(ord($str[$i]) / 2) : $str[$i]) : ''; } $layer1 = base64_decode($layer1); $result = ''; $j = $len_md5_xor = strlen($md5_xor); for ($i=0, $iMax = strlen($layer1); $i < $iMax; $i++) { $j = $j ? $j : $len_md5_xor; $j--; $result .= $layer1[$i] ^ $md5_xor[$j]; } return $result; } public static function someDecoder4($ae, $i0l1i10000100010000) { $at = []; for ($i = 0, $iMax = strlen($i0l1i10000100010000); $i < $iMax; $i++) { if ((int)$i0l1i10000100010000[$i] > 0) { $at[$i] = $i0l1i10000100010000[$i]; } } $at = array_values($at); $str = ""; for ($i = 0, $iMax = count($ae); $i < $iMax; $i++) { if ($i < count($ae) - 1) { $str .= str_replace(md5($at[$i]), "", $ae[$i]); } else { $str .= $ae[$i]; } } return $str; } public static function OELoveDecoder($arg1, $arg2 = '') { if (empty($arg1)) { return ''; } $arg1 = base64_decode($arg1); if ($arg2 == '') return ~$arg1; $len = strlen($arg1); $arg2 = str_pad($arg2, $len, $arg2); return $arg2 ^ $arg1; } public static function decodeEvalFuncBinary($input) { if (empty($input)) { return; } $i0l1i10000100010000Str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="; $chr1 = $chr2 = $chr3 = ""; $enc1 = $enc2 = $enc3 = $enc4 = ""; $i = 0; $i0l1i10000100101110 = ""; $input = preg_replace("[^A-Za-z0-9\+\/\=]", "", $input); do { $enc1 = strpos($i0l1i10000100010000Str, substr($input, $i++, 1)); $enc2 = strpos($i0l1i10000100010000Str, substr($input, $i++, 1)); $enc3 = strpos($i0l1i10000100010000Str, substr($input, $i++, 1)); $enc4 = strpos($i0l1i10000100010000Str, substr($input, $i++, 1)); $chr1 = ($enc1 << 2) | ($enc2 >> 4); $chr2 = (($enc2 & 15) << 4) | ($enc3 >> 2); $chr3 = (($enc3 & 3) << 6) | $enc4; $i0l1i10000100101110 .= chr($chr1); if ($enc3 !== 64) { $i0l1i10000100101110 .= chr($chr2); } if ($enc4 !== 64) { $i0l1i10000100101110 .= chr($chr3); } $chr1 = $chr2 = $chr3 = ""; $enc1 = $enc2 = $enc3 = $enc4 = ""; } while ($i < strlen($input)); return $i0l1i10000100101110; } public static function decodeFileGetContentsWithFunc($data, $i0l1i10000100010000) { $out_data = ""; for ($i = 0; $i < strlen($data);) { for ($j = 0; $j < strlen($i0l1i10000100010000) && $i < strlen($data); $j++, $i++) { $out_data .= chr(ord($data[$i]) ^ ord($i0l1i10000100010000[$j])); } } return $out_data; } public static function stripsquoteslashes($str) { $res = ''; for ($i = 0, $iMax = strlen($str); $i < $iMax; $i++) { if (isset($str[$i+1]) && ($str[$i] == '\\' && ($str[$i+1] == '\\' || $str[$i+1] == '\''))) { continue; } else { $res .= $str[$i]; } } return $res; } public static function isSafeFunc($str) { $safeFuncs = [ "b\x61\x73e\x36\x34_\x64\x65c\x6f\x64e", "g\x7a\x69n\x66\x6ca\x74\x65", "g\x7a\x64e\x63\x6fd\x65", "g\x7a\x75n\x63\x6fm\x70\x72e\x73\x73", "s\x74\x72r\x65\x76", "s\x74\x72l\x65\x6e", "s\x74\x72_\x72\x6ft\x31\x33", "u\x72\x6cd\x65\x63o\x64\x65", "r\x61\x77u\x72\x6cd\x65\x63o\x64\x65", "s\x74\x72i\x70\x73l\x61\x73h\x65\x73", "c\x68\x72", "h\x74\x6dl\x73\x70e\x63\x69a\x6c\x63h\x61\x72s\x5f\x64e\x63\x6fd\x65", "c\x6f\x6ev\x65\x72t\x5f\x75u\x64\x65c\x6f\x64e","p\x61\x63k", "o\x72\x64", "s\x74\x72_\x72\x65p\x65\x61t", "s\x70\x72i\x6e\x74f", "s\x74\x72_\x72\x65p\x6c\x61c\x65", "s\x74\x72t\x72", "h\x65\x782\x62\x69n", "u\x6e\x73e\x72\x69a\x6c\x69z\x65" ]; return in_array(strtolower($str), $safeFuncs); } public static function aanKFMDigitsDecode($digits) { $res = ''; $len = ceil(strlen($digits) / 3) * 3; $cipher = str_pad($digits, $len, "0", STR_PAD_LEFT); for ($i = 0; $i < (strlen($cipher) / 3);$i++) { $res .= chr(substr($cipher, $i * 3, 3)); } return $res; } public static function obf20200414_1_decrypt($data, $i0l1i10000100010000) { $i0l1i10000100010000 = md5($i0l1i10000100010000); $x = 0; $data = base64_decode($data); $len = strlen($data); $l = strlen($i0l1i10000100010000); $char = ''; for ($i = 0; $i < $len; $i++) { if ($x === $l) { $x = 0; } $char .= substr($i0l1i10000100010000, $x, 1); $x++; } $str = ''; for ($i = 0; $i < $len; $i++) { if (ord(substr($data, $i, 1)) < ord(substr($char, $i, 1))) { $str .= chr((ord(substr($data, $i, 1)) + 256) - ord(substr($char, $i, 1))); } else { $str .= chr(ord(substr($data, $i, 1)) - ord(substr($char, $i, 1))); } } return $str; } public static function Xtea_decrypt($text, $i0l1i10000100010000) { $_key = ''; $cbc = 1; if(is_array($i0l1i10000100010000)) { $_key = $i0l1i10000100010000; } else if(isset($i0l1i10000100010000) && !empty($i0l1i10000100010000)) { $_key = self::_str2long(str_pad($i0l1i10000100010000, 16, $i0l1i10000100010000)); } else { $_key = [0, 0, 0, 0]; } $plain = []; $cipher = self::_str2long(base64_decode($text)); if($cbc == 1) { $i = 2; } else { $i = 0; } for ($i, $iMax = count($cipher); $i < $iMax; $i += 2) { $return = self::block_decrypt($cipher[$i], $cipher[$i+1], $_key); if($cbc == 1) { $plain[] = [$return[0] ^ $cipher[$i - 2], $return[1] ^ $cipher[$i - 1]]; } else { $plain[] = $return; } } $i0l1i10000100101110 = ""; for($i = 0, $iMax = count($plain); $i < $iMax; $i++) { $i0l1i10000100101110 .= self::_long2str($plain[$i][0]); $i0l1i10000100101110 .= self::_long2str($plain[$i][1]); } return $i0l1i10000100101110; } public static function calculateMathStr($task) { $res = $task; while (preg_match('~\(?(\d+)\s?([+\-*\/])\s?(\d+)\)?~', $res, $subMatch)) { if (count($subMatch) === 4) { list($subSearch, $i0l1i10000100011010ber_1, $operator, $i0l1i10000100011010ber_2) = $subMatch; $res = str_replace($subSearch, self::calc("$i0l1i10000100011010ber_1$operator$i0l1i10000100011010ber_2"), $res); } else { return $res; } } return $res; } public static function decrypt_T_func($l) { $x2 = 256; $W2 = 8; $cY = []; $I3 = 0; $C4 = 0; for ($bs = 0, $bsMax = strlen($l); $bs < $bsMax; $bs++) { $I3 = ($I3 << 8) + ord($l[$bs]); $C4 += 8; if ($C4 >= $W2) { $C4 -= $W2; $cY[] = $I3 >> $C4; $I3 &= (1 << $C4) - 1; $x2++; if ($x2 >> $W2) { $W2++; } } } $K5 = range("\x0", "\377"); $UH = ''; foreach ($cY as $bs => $xd) { if (!isset($K5[$xd])) { $iU = $Co . $Co[0]; } else { $iU = $K5[$xd]; } $UH .= $iU; if ($bs) { $K5[] = $Co . $iU[0]; } $Co = $iU; } return $UH; } public static function getDecryptKeyForTinkleShell($size) { $bx = md5(base64_encode($size)); $len = strlen($bx); $arr = []; for ($i = 0; $i < $len; $i++) { $arr[] = substr($bx, $i, 1); } $arr = array_unique($arr); $newstr = ""; foreach ($arr as $k => $v) { $newstr .= $v; } if (strlen($newstr) < 9) { if (strpos($newstr, "A") === false) { $newstr .= "A"; } if (strpos($newstr, "B") === false) { $newstr .= "B"; } if (strpos($newstr, "C") === false) { $newstr .= "C"; } if (strpos($newstr, "D") === false) { $newstr .= "D"; } if (strpos($newstr, "E") === false) { $newstr .= "E"; } if (strpos($newstr, "F") === false) { $newstr .= "F"; } if (strpos($newstr, "G") === false) { $newstr .= "G"; } } return strtoupper($newstr); } public static function decodeEvalCreateFunc_1(array $arr) : string { $args = $arr; for ($i = 0; $i < 4; $i++) { for ($j = 0, $jMax = strlen($args[$i]); $j < $jMax; $j++) { $args[$i][$j] = chr(ord($args[$i][$j]) - ($i ? $args[$j xor $j] : 1)); } if ($i === 2 && self::isSafeFunc($args[1]) && self::isSafeFunc($args[2])) { $args[3] = @$args[1](@$args[2]($args[3])); } } return $args[3]; } public static function decodeEvalCreateFunc_2(array $arr) : string { $args = $arr; for ($i = 0; $i < 3; $i++) { for ($j = 0, $jMax = strlen($args[$i]); $j < $jMax; $j++) { $args[$i][$j] = chr(ord($args[$i][$j]) - 1); } if ($i === 1 && self::isSafeFunc($args[0]) && self::isSafeFunc($args[1])) { $args[2] = @$args[0](@$args[1]($args[2])); } } return $args[2]; } public static function decodeACharCustom($encoded) { $result = ''; $i = 0; $len = strlen($encoded); while ($i < $len) { if ($encoded[$i] === ' ') { $result .= ' '; } else if ($encoded[$i] === '!') { $result .= chr((ord($encoded[$i + 1]) - ord("A")) * 16 + (ord($encoded[$i + 2]) - ord("a"))); $i += 2; } else { $result .= chr (ord($encoded[$i]) + 1); } $i++; } return $result; } public static function decodeFuncVars(string $i0l1i10000100010000, string $data): string { $hakfku = $data; $i0l1i10000100010000Len = strlen($i0l1i10000100010000); $dataLen = strlen($hakfku); $res = ""; for ($i = 0; $i < $dataLen;) { for ($j = 0; ($j < $i0l1i10000100010000Len && $i < $dataLen); $j++, $i++) { $res .= $hakfku[$i] ^ $i0l1i10000100010000[$j]; } } return $res; } public static function decodeEvalFileContentBySize(string $data, string $i0l1i10000100010000): string { $res = ''; $i0l1i10000100010000 = md5($i0l1i10000100010000) . md5($i0l1i10000100010000 . $i0l1i10000100010000); $i0l1i10000100010000_len = strlen($i0l1i10000100010000); $data_len = strlen($data); for ($i = 0; $i < $data_len; $i++) { $res .= chr(ord($data[$i]) ^ ord($i0l1i10000100010000[$i % $i0l1i10000100010000_len])); } return $res; } public static function decodeClassDecryptedWithKey(string $data, int $i0l1i10000100011010, string $i0l1i10000100010000): string { function CTL($start, &$data, &$data_long) { $n = strlen($data); $tmp = unpack('N*', $data); $j = $start; foreach ($tmp as $value) $data_long[$j++] = $value; return $j; } function LtoC($l) { return pack("N", $l); } function add($i1, $i2) { $result = 0.0; foreach (func_get_args() as $value) { if (0.0 > $value) { $value -= 1.0 + 0xffffffff; } $result += $value; } if (0xffffffff < $result || -0xffffffff > $result) { $result = fmod($result, 0xffffffff + 1); } if (0x7fffffff < $result) { $result -= 0xffffffff + 1.0; } elseif (-0x80000000 > $result) { $result += 0xffffffff + 1.0; } return $result; } function delg($y, $z, &$w, &$k, $i0l1i10000100011010) { $sum = 0xC6EF3720; $klhys = 0x9E3779B9; $n = $i0l1i10000100011010; while ($n-- > 0) { $z = add($z, -(add($y << 4 ^ rsLT($y, 5), $y) ^ add($sum, $k[rsLT($sum, 11) & 3]))); $sum = add($sum, -$klhys); $y = add($y, -(add($z << 4 ^ rsLT($z, 5), $z) ^ add($sum, $k[$sum & 3]))); } $w[0] = $y; $w[1] = $z; } function rsLT($integer, $n) { if (0xffffffff < $integer || -0xffffffff > $integer) { $integer = fmod($integer, 0xffffffff + 1); } if (0x7fffffff < $integer) { $integer -= 0xffffffff + 1.0; } elseif (-0x80000000 > $integer) { $integer += 0xffffffff + 1.0; } if (0 > $integer) { $integer &= 0x7fffffff; $integer >>= $n; $integer |= 1 << (31 - $n); } else { $integer >>= $n; } return $integer; } function resize(&$data, $size, $nonull = false) { $n = strlen($data); $nmod = $n % $size; if (0 == $nmod) $nmod = $size; if ($nmod > 0) { if ($nonull) { for ($i = $n; $i < $n - $nmod + $size; ++$i) { $data[$i] = $data[$i % $n]; } } else { for ($i = $n; $i < $n - $nmod + $size; ++$i) { $data[$i] = chr(0); } } } return $n; } $ncdL = CTL(0, $data, $enc_data_long); resize($i0l1i10000100010000, 16, true); $n_key_long = CTL(0, $i0l1i10000100010000, $i0l1i10000100010000_long); $data = ''; $w = array(0, 0); $j = 0; $len = 0; $k = array(0, 0, 0, 0); $pos = 0; for ($i = 0; $i < $ncdL; $i += 2) { if ($j + 4 <= $n_key_long) { $k[0] = $i0l1i10000100010000_long[$j]; $k[1] = $i0l1i10000100010000_long[$j + 1]; $k[2] = $i0l1i10000100010000_long[$j + 2]; $k[3] = $i0l1i10000100010000_long[$j + 3]; } else { $k[0] = $i0l1i10000100010000_long[$j % $n_key_long]; $k[1] = $i0l1i10000100010000_long[($j + 1) % $n_key_long]; $k[2] = $i0l1i10000100010000_long[($j + 2) % $n_key_long]; $k[3] = $i0l1i10000100010000_long[($j + 3) % $n_key_long]; } $j = ($j + 4) % $n_key_long; delg($enc_data_long[$i], $enc_data_long[$i + 1], $w, $k, $i0l1i10000100011010); if (0 == $i) { $len = $w[0]; if (4 <= $len) { $data .= LtoC($w[1]); } else { $data .= substr(LtoC($w[1]), 0, $len % 4); } } else { $pos = ($i - 1) * 4; if ($pos + 4 <= $len) { $data .= LtoC($w[0]); if ($pos + 8 <= $len) { $data .= LtoC($w[1]); } elseif ($pos + 4 < $len) { $data .= substr(LtoC($w[1]), 0, $len % 4); } } else { $data .= substr(LtoC($w[0]), 0, $len % 4); } } } return $data; } public static function rotencode($string, $amount) { $i0l1i10000100010000 = substr($string, 0, 1); if (strlen($string) == 1) { return chr(ord($i0l1i10000100010000) + $amount); } else { return chr(ord($i0l1i10000100010000) + $amount) . self::rotencode( substr($string, 1, strlen($string) - 1), $amount); } } public static function decodefuncDictVars($a, $b) { $c = preg_split("/\x2f", $a, -1, PREG_SPLIT_NO_EMPTY); foreach ($c as $d => $e) { $c[$d] = chr(ord($e) + $b); } $res = implode("", $c); return $res; } public static function codelock_dec($codelock_v) { switch ($codelock_v) { case "A": $dv = 0; break; case "B": $dv = 1; break; case "C": $dv = 2; break; case "D": $dv = 3; break; case "E": $dv = 4; break; case "F": $dv = 5; break; case "G": $dv = 6; break; case "H": $dv = 7; break; case "I": $dv = 8; break; case "J": $dv = 9; break; case "K": $dv = 10; break; case "L": $dv = 11; break; case "M": $dv = 12; break; case "N": $dv = 13; break; case "O": $dv = 14; break; case "P": $dv = 15; break; case "Q": $dv = 16; break; case "R": $dv = 17; break; case "S": $dv = 18; break; case "T": $dv = 19; break; case "U": $dv = 20; break; case "V": $dv = 21; break; case "W": $dv = 22; break; case "X": $dv = 23; break; case "Y": $dv = 24; break; case "Z": $dv = 25; break; case "a": $dv = 26; break; case "b": $dv = 27; break; case "c": $dv = 28; break; case "d": $dv = 29; break; case "e": $dv = 30; break; case "f": $dv = 31; break; case "g": $dv = 32; break; case "h": $dv = 33; break; case "i": $dv = 34; break; case "j": $dv = 35; break; case "k": $dv = 36; break; case "l": $dv = 37; break; case "m": $dv = 38; break; case "n": $dv = 39; break; case "o": $dv = 40; break; case "p": $dv = 41; break; case "q": $dv = 42; break; case "r": $dv = 43; break; case "s": $dv = 44; break; case "t": $dv = 45; break; case "u": $dv = 46; break; case "v": $dv = 47; break; case "w": $dv = 48; break; case "x": $dv = 49; break; case "y": $dv = 50; break; case "z": $dv = 51; break; case "0": $dv = 52; break; case "1": $dv = 53; break; case "2": $dv = 54; break; case "3": $dv = 55; break; case "4": $dv = 56; break; case "5": $dv = 57; break; case "6": $dv = 58; break; case "7": $dv = 59; break; case "8": $dv = 60; break; case "9": $dv = 61; break; case "+": $dv = 62; break; case "/": $dv = 63; break; case "=": $dv = 64; break; default: $dv = 0; break; } return $dv; } public static function codelock_run($ciph, $i0l1i10000100010000) { $m = 0; $abc = ""; for ($i = 0, $iMax = strlen($ciph); $i < $iMax; $i++) { $c = substr($ciph, $i, 1); $dv = Helpers::codelock_dec($c); $dv = ($dv - $m) / 4; $fb = decbin($dv); while (strlen($fb) < 4) { $fb = "0" . $fb; } $abc = $abc . $fb; $m++; if ($m > 3) { $m = 0; } } $kl = 0; $pd = ""; for ($j = 0, $jMax = strlen($abc); $j < $jMax; $j = $j + 8) { $c = substr($abc, $j, 8); $k = substr($i0l1i10000100010000, $kl, 1); $dc = bindec($c); $dc = $dc - strlen($i0l1i10000100010000); $c = chr($dc); $kl++; if ($kl >= strlen($i0l1i10000100010000)) { $kl = 0; } $dc = ord($c) ^ ord($k); $p = chr($dc); $pd = $pd . $p; } return $pd; } public static function codelock_dec_int($codelock_decint_code, $codelock_calc_key) { if ($codelock_calc_key !== "") { $codelock_calc_key = base64_encode($codelock_calc_key); $codelock_k1 = substr($codelock_calc_key, 0, 1); $codelock_k2 = substr($codelock_calc_key, 1, 1); $codelock_k3 = substr($codelock_calc_key, 2, 1); $codelock_decint_code = str_replace("$", "$codelock_k1", $codelock_decint_code); $codelock_decint_code = str_replace("(", "$codelock_k2", $codelock_decint_code); $codelock_decint_code = str_replace(")", "$codelock_k3", $codelock_decint_code); } $codelock_decint_code = base64_decode($codelock_decint_code); return $codelock_decint_code; } public static function getVarsFromDictionary($dictionary, $i0l1i10000111110110) : array { $vars = []; preg_match_all('~(\$(?:[^\w]+|\w+)\s*=(\s?\.?\s?\$(?:[^\w]+|\w+)[{\[]\d+[\]}])+)~msi', $i0l1i10000111110110, $concatMatches); for ($i = 0; $iMax = count($concatMatches[0]), $i <= $iMax; $i++) { preg_match_all('~(\$(?:[^\w]+|\w+)(=))?(\s?(\.?)\s?\$(?:[^\w]+|\w+)[{\[](\d+)[\]}])~msi', $concatMatches[0][$i], $varMatches); for ($j = 0; $jMax = count($varMatches[0]), $j < $jMax; $j++) { $varName = substr($varMatches[1][0], 0, -1); $value = $dictionary[(int)$varMatches[5][$j]] ?? ''; if ($varMatches[2][$j] === '=') { $vars[$varName] = $value; } else { $vars[$varName] .= $value; } } } return $vars; } public static function getVarsFromDictionaryDynamically(array &$vars = [], string $i0l1i10000111110110 = ''): array { preg_match_all('~(\$\w+)(\.)?\s?=\s?(?:\$\w+[{\[]?\d+[}\]]?\.?)+;~msi', $i0l1i10000111110110, $varsMatches, PREG_SET_ORDER); foreach ($varsMatches as $varsMatch) { preg_match_all('~(\$\w+)[{\[]?(\d+)?[}\]]?~msi', $varsMatch[0], $subVarsMatches, PREG_SET_ORDER); $concat = ''; foreach ($subVarsMatches as $subVarsMatch) { if (isset($subVarsMatch[2])) { $concat .= $vars[$subVarsMatch[1]][(int)$subVarsMatch[2]] ?? ''; } else if ($varsMatch[1] !== $subVarsMatch[1]) { $concat .= $vars[$subVarsMatch[1]]; } } if (isset($vars[$varsMatch[1]])) { $vars[$varsMatch[1]] .= $concat; } else { $vars[$varsMatch[1]] = $concat; } } return $vars; } public static function concatVariableValues($str) : string { preg_match_all('/\$\w+\s?(\.?)=\s?"([\w=\+\/]+)"/', $str, $concatVars); $strVar = ""; foreach ($concatVars[2] as $index => $concatVar) { if ($concatVars[1][$index] === ".") { $strVar .= $concatVar; } else { $strVar = $concatVar; } } return $strVar; } public static function concatStr($str) : string { preg_match_all('~(\.?)\s?[\'"]([\w=\+/%&();]+)[\'"]\s?~msi', $str, $concatStrings); $strVar = ""; foreach ($concatStrings[2] as $index => $concatString) { if ($concatStrings[1][$index] === ".") { $strVar .= $concatString; } else { $strVar = $concatString; } } return $strVar; } public static function concatStringsInContent($str) : string { $strVar = preg_replace_callback('~(?:[\'"][\w=();]*[\'"]\.?){2,}~msi', static function ($m) { return '\'' . self::concatStr($m[0]) . '\''; }, $str); return $strVar; } public static function replaceVarsFromDictionary($dictionaryVar, $dictionaryValue, $str) : string { $result = $str; $result = preg_replace_callback('~(?:(\$(?:GLOBALS\[[\'"])?\w+(?:[\'"]\])?)[\[{][\'"]?(\d+)[\'"]?[\]}]\s?(\.)?\s?)~smi', function ($match) use ($dictionaryValue, $dictionaryVar) { if ($match[1] !== $dictionaryVar && !isset($dictionaryValue[(int)$match[2]])) { return $match[0]; } $lastChar = $match[3] ?? ''; $value = $dictionaryValue[(int)$match[2]]; $value = str_replace(['\'', "."], ['@@quote@@', '@@dot@@'], $value); return '\'' . $value . '\'' . $lastChar; }, $result ); $result = str_replace('\'.\'', '', $result); $result = str_replace(['@@quote@@', '@@dot@@'], ['\\\'', "."], $result); return $result; } public static function replaceVarsByArrayName(string $arrayName, array $array, string $str): string { $result = preg_replace_callback('~\s?(\$\w+)\s?\[\s?(\d+)\s?\]\s?~msi', function ($match) use ($array, $arrayName) { if ($match[1] !== $arrayName) { return $match[0]; } return $array[$match[2]] ?? $match[0]; }, $str ); return $result; } public static function collectVars(&$str, string $trimQuote = '"', &$vars = [], $remove = false) : array { if (!is_string($str)) { return $vars; } preg_match_all('~(\$\w+)\s?(\.)?=\s?([\'"].*?[\'"]);~msi', $str, $i0l1i10001010000010); foreach ($i0l1i10001010000010[1] as $index => $match) { $varName = $match; $varValue = str_replace("$trimQuote.$trimQuote", '', $i0l1i10001010000010[3][$index]); $varValue = stripcslashes(trim($varValue, $trimQuote)); if ($i0l1i10001010000010[2][$index] !== ".") { $vars[$varName] = $varValue; } else { $vars[$varName] .= $varValue; } } if ($remove) { $str = str_replace($i0l1i10001010000010[0], '', $str); } return $vars; } public static function collectConcatedVars(&$str, string $trimQuote = '"', &$vars = [], $remove = false): array { if (!is_string($str)) { return $vars; } preg_match_all('~(\$\w+)\s?(\.)?=((?:\s?\.?\s?(?:[\'"][^"\']+[\'"]|\$\w{1,50}))+);~msi', $str, $i0l1i10001010000010, PREG_SET_ORDER); foreach ($i0l1i10001010000010 as $match) { $varName = $match[1]; $varValue = ''; preg_match_all('~[\'"]([^"\']+)[\'"]|(\$\w{1,50})~msi', $match[3], $varsMatch, PREG_SET_ORDER); foreach ($varsMatch as $varMatch) { if ($varMatch[1] !== '') { $varValue .= $varMatch[1]; } else { $varValue .= $vars[$varMatch[2]] ?? ''; } $varValue = str_replace("$trimQuote.$trimQuote", '', $varValue); $varValue = stripcslashes(trim($varValue, $trimQuote)); } if ($match[2] !== ".") { $vars[$varName] = $varValue; } else { $vars[$varName] .= $varValue; } if ($remove) { $str = str_replace($match[0], '', $str); } } return $vars; } public static function collectStr($str, string $trimQuote = '"') : string { preg_match('~["\'\w%=\.\+\/]+~msi', $str, $match); $str = str_replace("$trimQuote.$trimQuote", '', $match[0]); $str = trim($str, $trimQuote); return $str; } public static function collectFuncVars(string &$str, &$vars = [], $quotes = true, $delete = false): array { preg_match_all('~(\$\w+)\s*=\s*(\w+)\([\'"]([\w+/=]+)[\'"](?:,\s*[\'"]([\w+/=]*)[\'"],\s*[\'"]([\w+/=]+)[\'"])?\);~msi', $str, $i0l1i10001010000010, PREG_SET_ORDER); foreach ($i0l1i10001010000010 as $match) { $func = $match[2]; $param1 = $match[3]; $param2 = $match[4]; $param3 = $match[5]; if (self::isSafeFunc($func)) { if ($func === "s\x74\x72_\x72\x65p\x6c\x61c\x65") { $ret = @$func($param1, $param2, $param3); } else { $ret = @$func($param1); } } $vars[$match[1]] = self::isSafeFunc($ret) ? $ret : ($quotes ? "'$ret'" : $ret); if ($delete) { $str = str_replace($match[0], '', $str); } } return $vars; } public static function replaceVarsFromArray(array $vars, string $str, bool $isFunc = false, $toStr = false) : string { $result = $str; uksort($vars, static function($a, $b) { return strlen($b) <=> strlen($a); }); foreach ($vars as $name => $value) { $sub_name = substr($name, 1); $result = preg_replace_callback('~{?(@)?\${?[\'"]?GLOBALS[\'"]?}?\[[\'"](\w+)[\'"]\]}?~msi', function ($m) use ($value, $sub_name) { if ($m[2] !== $sub_name) { return $m[0]; } return $m[1] . $value; }, $result); if (!is_string($value)) { continue; } $result = str_replace(['{' . $name . '}', $name . '('], [$value, trim($value, '\'"') . '('], $result); if (!$isFunc && !$toStr) { $result = str_replace($name, $value, $result); } else if ($toStr) { $result = str_replace($name, "'$value'", $result); } } return $result; } public static function collectVarsChars($str) { $vars = []; preg_match_all('~(\$\w+)=\'(\w)\';~msi', $str, $i0l1i10001010000010, PREG_SET_ORDER); foreach ($i0l1i10001010000010 as $m) { $vars[$m[1]] = $m[2]; } return $vars; } public static function removeDuplicatedStrVars($str) : string { return preg_replace('~[\'"]?([^\'"]+)[\'"]?\s?=\s?[\'"]?\1[\'"]?;~msi','', $str); } public static function assembleStrings($chars, $str) { $vars = []; array_walk($chars, static function(&$x) { $x = "'$x'"; }); $parts = explode(';', $str); foreach ($parts as &$part) { $vals = explode('=', $part); $part = str_replace($vals[1], strtr($vals[1], $chars), $part); } $str = implode(';', $parts); $vars = self::collectVars($str, '\''); return $vars; } public static function replaceBase64Decode($str, $quote = '\'') { return preg_replace_callback(self::REGEXP_BASE64_DECODE, static function ($m) use ($quote) { return $quote . base64_decode($m[1]) . $quote; }, $str); } public static function replaceMinMaxRound($string, $max_iterations = 15) { $i = 0; $regexp_for_multi_min_max_round = '~(?:min|max|round)\(\s*\d+[\.\,\|\s\|+\|\-\|\*\|\/]([\d\s\.\,\+\-\*\/]+)?\)~msi'; while (preg_match($regexp_for_multi_min_max_round, $string) && $i < $max_iterations) { $string = preg_replace_callback($regexp_for_multi_min_max_round, ["H\x65\x6cp\x65\x72s","c\x61\x6cc"], $string); $i++; } $regexp_for_single_min_max_round = '~(?:min|max|round)\(\s*\d+\s*\)~msi'; while (preg_match($regexp_for_single_min_max_round, $string) && $i < $max_iterations) { $string = preg_replace_callback($regexp_for_single_min_max_round, ["H\x65\x6cp\x65\x72s","c\x61\x6cc"], $string); $i++; } $regexp_for_brackets = '~\(\s*\d+[\.\|\s\|+\|\-\|\*\|\/]([\d\s\.\+\-\*\/]+)?\)~msi'; while (preg_match($regexp_for_brackets, $string) && $i < $max_iterations) { $string = preg_replace_callback($regexp_for_brackets, ["H\x65\x6cp\x65\x72s","c\x61\x6cc"], $string); $i++; } return $string; } public static function xorWithKey($i0l1i10000110001000ypted, $i0l1i10000100010000) { $res = ''; for ($i = 0, $iMax = strlen($i0l1i10000110001000ypted); $i < $iMax; ) { for ($j = 0; $j < strlen($i0l1i10000100010000) && $i < strlen($i0l1i10000110001000ypted); $j++, $i++) { $res .= $i0l1i10000110001000ypted[$i] ^ $i0l1i10000100010000[$j]; } } return $res; } public static function dictionarySampleDecode($string) { $str1 = substr($string, 0, 5); $str2 = substr($string, 7, -7); $str3 = substr($string, -5); return gzinflate(base64_decode($str1 . $str2 . $str3)); } public static function unserialize(&$string) { $type = substr($string, 0, 2); $string = substr($string, 2); switch ($type) { case 'N;': return null; case 'b:': list($ret, $string) = explode(';', $string, 2); return (bool)(int)$ret; case 'i:': list($ret, $string) = explode(';', $string, 2); return (int)$ret; case 'd:': list($ret, $string) = explode(';', $string, 2); return (float)$ret; case 's:': list($length, $string) = explode(':', $string, 2); $length = (int) $length; if (($length > strlen($string) - 3) || ($string[0] !== '"') || (substr($string, $length + 1, 2) !== '";')) { return ''; } $ret = substr($string, 1, $length); $string = substr($string, $length + 3); return $ret; case 'a:': $ret = []; list($length, $string) = explode(':', $string, 2); if ($string[0] !== '{') { return ''; } $length = (int) $length; $string = substr($string, 1); for ($i= 0; $i < $length; $i++) { $ret[self::unserialize($string)] = self::unserialize($string); } if ($string === '') { return $ret; } $end = substr($string, 0, 2); if ($end !== '' && $end !== '};' && $end !== '}' && $end !== '}}') { return ''; } $string = substr($string, 2); return $ret; case 'O:': list($length, $string) = explode(':', $string, 2); $length = (int) $length; $string = substr($string, $length + 3); list($length, $string) = explode(':', $string, 2); $string = preg_replace('~{([^{}]*+(?:(?R)[^{}]*)*+)}~msi', '', $string); return ''; default: return ''; } } public static function deobfuscatorIO_string($string, $i0l1i10000100010000) { $m = []; $n = 0; $p = ''; $string = base64_decode($string); for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) { if ($string[$i] === "\xC3") { $inc = 64; continue; } else if ($string[$i] === "\xC2") { continue; } $p .= chr(ord($string[$i]) + $inc); $inc = 0; } $string = $p; $p = ''; for ($i = 0; $i < 256; $i++) { $m[$i] = $i; } for ($i = 0; $i < 256; $i++) { $n = ($n + $m[$i] + ord($i0l1i10000100010000[$i % strlen($i0l1i10000100010000)])) % 256; $o = $m[$i]; $m[$i] = $m[$n]; $m[$n] = $o; } $r = 0; $n = 0; for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) { $r = ($r + 1) % 256; $n = ($n + $m[$r]) % 256; $o = $m[$r]; $m[$r] = $m[$n]; $m[$n] = $o; $p .= chr(ord($string[$i]) ^ $m[($m[$r] + $m[$n]) % 256]); } return $p; } public static function joomlaInjectDecoder($params, $op, $delta) { $params = explode(',', $params); $params = array_reverse($params); for ($i = 1, $iMax = count($params); $i < $iMax; $i++) { if ($i !== 0 ) { $params[$i] = substr($params[$i], 1, -1); } for ($j = 0, $jMax = strlen($params[$i]); $j < $jMax; $j++) { $tmp = ord($params[$i][$j]); if ($op === '-') { $tmp = $tmp - $delta; } else if ($op === '+') { $tmp = $tmp + $delta; } $params[$i][$j] = chr($tmp); } if ($i === 0) { break; } if (self::isSafeFunc($params[$i])) { $params[0] = $params[$i]($params[0]); } if ($i === $iMax - 1) { $i = -1; } } return $params[0]; } public static function jsPackerUnbaser($int, $radix) { if ($int < $radix) { $ret = ''; } else { $ret = self::jsPackerUnbaser((int)($int / $radix), $radix); } if (($int = $int % $radix) > 35) { $ret .= chr($int + 29); } else { $ret .= base_convert((string)$int, 10, 36); } return $ret; } public static function jsObjectDecodeIndexToString($int) { $ret = base_convert((string)$int, 10, 36); $ret = preg_replace_callback('~[0-9]~', function ($m) { return chr((int)$m[0] + 65); }, $ret); return $ret; } public static function jsObjectStringDecoder($r, $t, $encoded) { $ret = ''; $i = 1; for ($f = 0, $fMax = strlen($encoded); $f < $fMax; $f++) { $o = strpos($r, $encoded[$f]); if (in_array($encoded[$f], $t)) { $i = 0; } if ($o !== false) { $ret .= chr($i * strlen($r) + $o); $i = 1; } } return $ret; } public static function postProcess($deobfuscated) : string { $deobfuscated = preg_replace_callback('~"[\w\\\\\s=;_<>&/\.-]+"~msi', static function ($i0l1i10001010000010) { return preg_match('~\\\\x[2-7][0-9a-f]|\\\\1[0-2][0-9]|\\\\[3-9][0-9]|\\\\0[0-4][0-9]|\\\\1[0-7][0-9]~msi', $i0l1i10001010000010[0]) ? stripcslashes($i0l1i10001010000010[0]) : $i0l1i10001010000010[0]; }, $deobfuscated); $deobfuscated = preg_replace_callback('~echo\s*"((.*?[^\\\\])??((\\\\\\\\)+)?+)"~msi', static function ($i0l1i10001010000010) { return preg_match('~\\\\x[2-7][0-9a-f]|\\\\1[0-2][0-9]|\\\\[3-9][0-9]|\\\\0[0-4][0-9]|\\\\1[0-7][0-9]~msi', $i0l1i10001010000010[0]) ? stripcslashes($i0l1i10001010000010[0]) : $i0l1i10001010000010[0]; }, $deobfuscated); preg_match_all('~(global\s*(\$[\w_]+);)\2\s*=\s*"[^"]+";~msi', $deobfuscated, $i0l1i10001010000010, PREG_SET_ORDER); foreach ($i0l1i10001010000010 as $match) { $deobfuscated = str_replace($match[0], '', $deobfuscated); $deobfuscated = str_replace($match[1], '', $deobfuscated); } preg_match_all('~\$\{"G\x4c\x4fB\x41\x4cS"\}\[[\'"](\w+)[\'"]\]=["\'](\w+)[\'"];~msi', $deobfuscated, $i0l1i10001010000010, PREG_SET_ORDER); foreach ($i0l1i10001010000010 as $match) { $deobfuscated = preg_replace_callback('~\$\{\$\{"G\x4c\x4fB\x41\x4cS"\}\[[\'"](\w+)[\'"]\]\}~msi', static function ($i0l1i10001010000010) use ($match) { if ($i0l1i10001010000010[1] !== $match[1]) { return $i0l1i10001010000010[0]; } return '$' . $match[2]; }, $deobfuscated); $deobfuscated = str_replace($match[0], '', $deobfuscated); } if (strpos($deobfuscated, '${$') !== false) { preg_match_all('~\$\{(\$\w+)\}~msi', $deobfuscated, $i0l1i10001010000010); preg_match_all('~(\$\w+)\s*=\s*["\'](\w+)[\'"];~msi', $deobfuscated, $i0l1i100010100000102); $replace_to = []; foreach ($i0l1i10001010000010[1] as $k => $match) { $index = array_search($match, $i0l1i100010100000102[1]); if ($index !== false) { $replace_to[] = '$' . $i0l1i100010100000102[2][$index]; } else { unset($i0l1i10001010000010[0][$k]); } } if (!empty($replace_to)) { $deobfuscated = str_replace($i0l1i10001010000010[0], $replace_to, $deobfuscated); } } if (strpos($deobfuscated, 'chr(')) { $deobfuscated = preg_replace_callback('~chr\((\d+)\)~msi', static function ($i0l1i10001010000010) { return "'" . chr($i0l1i10001010000010[1]) . "'"; }, $deobfuscated); } return $deobfuscated; } private static function block_decrypt($y, $z, $i0l1i10000100010000) { $delta = 0x9e3779b9; $sum = 0xC6EF3720; $n = 32; for ($i = 0; $i < 32; $i++) { $z = self::_add($z, -(self::_add($y << 4 ^ self::_rshift($y, 5), $y) ^ self::_add($sum, $i0l1i10000100010000[self::_rshift($sum, 11) & 3]))); $sum = self::_add($sum, -$delta); $y = self::_add($y, -(self::_add($z << 4 ^ self::_rshift($z, 5), $z) ^ self::_add($sum, $i0l1i10000100010000[$sum & 3]))); } return [$y, $z]; } private static function _rshift($integer, $n) { if (0xffffffff < $integer || -0xffffffff > $integer) { $integer = fmod($integer, 0xffffffff + 1); } if (0x7fffffff < $integer) { $integer -= 0xffffffff + 1.0; } else if (-0x80000000 > $integer) { $integer += 0xffffffff + 1.0; } if (0 > $integer) { $integer &= 0x7fffffff; $integer >>= $n; $integer |= 1 << (31 - $n); } else { $integer >>= $n; } return $integer; } private static function _add($i1, $i2) { $result = 0.0; foreach (func_get_args() as $value) { if (0.0 > $value) { $value -= 1.0 + 0xffffffff; } $result += $value; } if (0xffffffff < $result || -0xffffffff > $result) { $result = fmod($result, 0xffffffff + 1); } if (0x7fffffff < $result) { $result -= 0xffffffff + 1.0; } else if (-0x80000000 > $result) { $result += 0xffffffff + 1.0; } return $result; } private static function _str2long($data) { $tmp = unpack('N*', $data); $data_long = []; $j = 0; foreach ($tmp as $value) $data_long[$j++] = $value; return $data_long; } private static function _long2str($l){ return pack("N", $l); } } class MathCalc { const ELEMENT_TYPE_OPERATION = "o\x70\x65r\x61\x74i\x6f\x6e"; const ELEMENT_TYPE_NUMBER = "n\x75\x6db\x65\x72"; const ELEMENT_TYPE_SIMPLE_PARENTHESES = "s\x69\x6dp\x6c\x65_\x70\x61r\x65\x6et\x68\x65s\x65\x73"; const ELEMENT = "e\x6c\x65m\x65\x6et"; const ELEMENT_TYPE = "t\x79\x70e"; const REGEXP_VALUE = '[0-9]*\.[0-9]+|[1-9][0-9]*|0(?:x[\da-f]+|b[01]+|[0-7]+)|0'; const REGEXP_OPERATION = '\+|\-|/|\*\*|\*|%|&|\||\^|\~|<<|>>'; const REGEXP_VALUE_SIGN = '\-|\+'; private static $math_operations_order = []; public static function calcRawString($raw_string, $max_iterations = 10) { self::loadMathOperationsOrder(); $iterations = 0; do { $old_string = $raw_string; $raw_string = self::calcRawStringOnePassWithParentheses($raw_string); $raw_string = FuncCalc::calcFuncInRawStringOnePassWithParentheses($raw_string); if ($raw_string == $old_string) { break; } $iterations++; } while($iterations < $max_iterations); $iterations = 0; do { $old_string = $raw_string; $raw_string = self::calcRawStringOnePassWithoutParentheses($raw_string); if ($raw_string == $old_string) { break; } $iterations++; } while($iterations < $max_iterations); return $raw_string; } public static function calcRawStringOnePassWithParentheses($raw_string) { self::loadMathOperationsOrder(); $regexp_find_simple_math_operations = '(' . '\s*(?:\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*' . '|' . '\s*(?:' . self::REGEXP_VALUE . ')\s*' . '|' . '\s*(?:' . self::REGEXP_OPERATION . ')\s*' . ')+'; $regexp_find_math_operations_inside_brackets = '\(' . $regexp_find_simple_math_operations . '\)'; return preg_replace_callback('~' . $regexp_find_math_operations_inside_brackets . '~mis', function($i0l1i10001010000010) { $original = $i0l1i10001010000010[0]; $math_string = substr($original, 1, strlen($original) - 2); if (self::haveOnlyValue($math_string) || self::haveOnlyOperation($math_string)) { return $original; } try { $result = self::calcSimpleMath($math_string); } catch (\Exception $e) { return $original; } return '(' . $result . ')'; }, $raw_string); } public static function calcRawStringOnePassWithoutParentheses($raw_string) { self::loadMathOperationsOrder(); $regexp_find_simple_math_operations = '(?:' . '\s*?(?:\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*?' . '|' . '\s*?(?:' . self::REGEXP_VALUE . ')\s*?' . '|' . '\s*?(?:' . self::REGEXP_OPERATION . ')\s*?' . ')+'; return preg_replace_callback('~(\s*)(' . $regexp_find_simple_math_operations . ')(\s*)~mis', function($i0l1i10001010000010){ $begin = $i0l1i10001010000010[1]; $math_string = $i0l1i10001010000010[2]; $end = $i0l1i10001010000010[3]; $original = $begin . $math_string . $end; if (self::haveOnlyValueWithParentheses($math_string) || self::haveOnlyOperationWithParentheses($math_string)) { return $original; } if (self::haveOnlyValue($math_string)) { return $original; } if (self::haveOnlyOperation($math_string)) { return $original; } try { $result = self::calcSimpleMath($math_string); } catch (\Exception $e) { return $original; } return $begin . $result . $end; }, $raw_string); } private static function loadMathOperationsOrder() { if (!empty(self::$math_operations_order)) { return; } self::$math_operations_order = [ [ '**' => [ "e\x6c\x65m\x65\x6et\x73" => [-1, +1], "f\x75\x6ec" => function($a, $b) { return $a ** $b; }, ], ], [ '~' => [ "e\x6c\x65m\x65\x6et\x73" => [+1], "f\x75\x6ec" => function($a) { return ~$a; }, ], ], [ '*' => [ "e\x6c\x65m\x65\x6et\x73" => [-1, +1], "f\x75\x6ec" => function($a, $b) { return $a * $b; }, ], "/" => [ "e\x6c\x65m\x65\x6et\x73" => [-1, +1], "f\x75\x6ec" => function($a, $b) { if ($b == 0) { throw new Exception('Division by zero'); } return $a / $b; }, ], '%' => [ "e\x6c\x65m\x65\x6et\x73" => [-1, +1], "f\x75\x6ec" => function($a, $b) { if ($b == 0) { throw new Exception('Division by zero'); } return $a % $b; }, ], ], [ '+' => [ "e\x6c\x65m\x65\x6et\x73" => [-1, +1], "f\x75\x6ec" => function($a, $b) { return $a + $b; }, ], '-' => [ "e\x6c\x65m\x65\x6et\x73" => [-1, +1], "f\x75\x6ec" => function($a, $b) { return $a - $b; }, ], ], [ '<<' => [ "e\x6c\x65m\x65\x6et\x73" => [-1, +1], "f\x75\x6ec" => function($a, $b) { return $a << $b; }, ], '>>' => [ "e\x6c\x65m\x65\x6et\x73" => [-1, +1], "f\x75\x6ec" => function($a, $b) { return $a >> $b; }, ], ], [ '&' => [ "e\x6c\x65m\x65\x6et\x73" => [-1, +1], "f\x75\x6ec" => function($a, $b) { return $a & $b; }, ], ], [ '^' => [ "e\x6c\x65m\x65\x6et\x73" => [-1, +1], "f\x75\x6ec" => function($a, $b) { return $a ^ $b; }, ], ], [ '|' => [ "e\x6c\x65m\x65\x6et\x73" => [-1, +1], "f\x75\x6ec" => function($a, $b) { return $a | $b; }, ], ], ]; } private static function haveOnlyValue($string) { return preg_match('~^\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*$~mis', $string); } private static function haveOnlyOperation($string) { return preg_match('~^(\s*(?:' . self::REGEXP_OPERATION . ')\s*)+$~mis', $string); } private static function haveOnlyValueWithParentheses($string) { return preg_match('~^\s*(?:\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*$~mis', $string); } private static function haveOnlyOperationWithParentheses($string) { return preg_match('~^\s*(?:\(\s*(?:' . self::REGEXP_OPERATION . ')\s*\))\s*$~mis', $string); } private static function calcSimpleMath($string, $max_iterations = 30) { $input_string = $string; $input_string = str_replace(' ', '', $input_string); $input_string = str_replace(['+-', '-+'], '-', $input_string); $input_string = str_replace(['--', '++'], '+', $input_string); $regexp_find_simple_math_operations = '(' . '(?<' . self::ELEMENT_TYPE_SIMPLE_PARENTHESES . '>\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*' . '|' . '(?<' . self::ELEMENT_TYPE_NUMBER . '>' . self::REGEXP_VALUE . ')' . '|' . '(?<' . self::ELEMENT_TYPE_OPERATION . '>' . self::REGEXP_OPERATION . ')' . ')'; if (!preg_match_all('~'.$regexp_find_simple_math_operations.'~mis', $input_string, $i0l1i10001010000010)) { return $string; } $math_array = []; foreach ($i0l1i10001010000010[0] as $index => $element) { if ($element === $i0l1i10001010000010[self::ELEMENT_TYPE_OPERATION][$index]) { $type = self::ELEMENT_TYPE_OPERATION; } elseif ($element === $i0l1i10001010000010[self::ELEMENT_TYPE_NUMBER][$index]) { $type = self::ELEMENT_TYPE_NUMBER; $k = $element; $element = self::convertNum($element); } elseif ($element === $i0l1i10001010000010[self::ELEMENT_TYPE_SIMPLE_PARENTHESES][$index]) { $type = self::ELEMENT_TYPE_NUMBER; $element = self::convertNum(trim($element, '()')); } else { throw new Exception(); } $math_array[] = [ self::ELEMENT => $element, self::ELEMENT_TYPE => $type, ]; } if ($math_array[0][self::ELEMENT_TYPE] == self::ELEMENT_TYPE_OPERATION && $math_array[0][self::ELEMENT] == '-' && $math_array[1][self::ELEMENT_TYPE] == self::ELEMENT_TYPE_NUMBER ) { unset($math_array[0]); $math_array[1][self::ELEMENT] *= -1; $math_array = array_values($math_array); } $changed = false; foreach (self::$math_operations_order as $level => $operations) { $iterations = 0; do { $interrupted = false; foreach ($math_array as $index => &$element) { if ($element[self::ELEMENT_TYPE] != self::ELEMENT_TYPE_OPERATION) { continue; } if (!isset($operations[$element[self::ELEMENT]])) { continue; } $func_params = $operations[$element[self::ELEMENT]]; $val1_offset = $func_params["e\x6c\x65m\x65\x6et\x73"][0]; $val2_offset = isset($func_params["e\x6c\x65m\x65\x6et\x73"][1]) ? $func_params["e\x6c\x65m\x65\x6et\x73"][1] : null; $val1_index = $index + $val1_offset; $val2_index = $index + $val2_offset; if(!isset($math_array[$val1_index])) { continue; } $val1 = $math_array[$val1_index][self::ELEMENT]; if (is_null($val2_offset)) { try { $result = $func_params["f\x75\x6ec"]($val1); } catch (\Exception $e) { continue; } $element[self::ELEMENT] = $result; } else { if (!isset($math_array[$val2_index])) { continue; } $val2 = $math_array[$val2_index][self::ELEMENT]; try { $result = $func_params["f\x75\x6ec"]($val1, $val2); } catch (\Exception $e) { throw new \Exception(''); } $element[self::ELEMENT] = $result; } $element[self::ELEMENT_TYPE] = self::ELEMENT_TYPE_NUMBER; unset($math_array[$val1_index]); if (!is_null($val2_offset)) { unset($math_array[$val2_index]); } $changed = true; $interrupted = true; break; } unset($element); $math_array = array_values($math_array); $iterations++; if ($iterations >= $max_iterations) { return $string; } } while ($interrupted); } if (!$changed) { return $string; } $return_value = ''; foreach ($math_array as $element) { $return_value .= $element[self::ELEMENT]; } return $return_value; } private static function convertNum(string $string) { if(stripos($string, "0\x78") === 0) { return (float)hexdec($string); } elseif(stripos($string, "0\x62") === 0) { return (float)bindec($string); } elseif(stripos($string, "0\x2e") === 0) { return (float)$string; } elseif ($string !== "0" && substr($string, 0, 1) == "0") { return (float)octdec($string); } return (float)$string; } } class FuncCalc { private static $functions = []; private static $functions_regexp = ''; public static function calcFuncInRawStringOnePassWithParentheses($raw_string) { if (empty(self::$functions)) { self::loadFunctions(); } $regexp_find_functions = '(?:' . '('.self::$functions_regexp.')' . '\s*\(([^)]+)\)' . ')+'; return preg_replace_callback('~' . $regexp_find_functions . '~mis', function($i0l1i10001010000010) { $name = $i0l1i10001010000010[1]; $params = $i0l1i10001010000010[2]; return self::calcFunction($name, $params); }, $raw_string); } private static function calcFunction($name, $params) { $result = "$name($params)"; $name_lower = strtolower($name); $function_otions = isset(self::$functions[$name_lower]) ? self::$functions[$name_lower] : false; if (!$function_otions) { return $result; } $params_array = explode(',', $params); $params_array = array_map("t\x72\x69m", $params_array); try { return $function_otions["f\x75\x6ec"](...$params_array); } catch (Exception $ex) { return $result; } } private static function loadFunctions() { self::$functions = [ "m\x69\x6e" => [ "f\x75\x6ec" => function(...$a) { return min($a); }, ], "m\x61\x78" => [ "f\x75\x6ec" => function(...$a) { return max($a); }, ], "r\x6f\x75n\x64" => [ "f\x75\x6ec" => function($a, $b = 0) { return round($a, $b); }, ], "a\x62\x73" => [ "f\x75\x6ec" => function($a) { return abs($a); }, ], ]; self::$functions_regexp = implode('|', array_keys(self::$functions)); } } function parseArgs($argv) { array_shift($argv); $o = []; foreach ($argv as $a) { if (substr($a, 0, 2) == '--') { $eq = strpos($a, '='); if ($eq !== false) { $o[substr($a, 2, $eq - 2)] = substr($a, $eq + 1); } else { $k = substr($a, 2); if (!isset($o[$k])) { $o[$k] = true; } } } else { if (strpos($a, '-') === 0) { if (substr($a, 2, 1) === '=') { $o[substr($a, 1, 1)] = substr($a, 3); } else { foreach (str_split(substr($a, 1)) as $k) { if (!isset($o[$k])) { $o[$k] = true; } } } } else { $o[] = $a; } } } return $o; } if (!defined("A\x49\x42O\x4c\x49T\x5f\x53T\x41\x52T\x5f\x54I\x4d\x45") && !defined("P\x52\x4fC\x55\x5fC\x4c\x45A\x4e\x5fD\x42") && @strpos(__FILE__, @$argv[0])!==false) { set_time_limit(0); ini_set("m\x61\x78_\x65\x78e\x63\x75t\x69\x6fn\x5f\x74i\x6d\x65", "9\x30\x300\x30\x30"); ini_set("r\x65\x61l\x70\x61t\x68\x5fc\x61\x63h\x65\x5fs\x69\x7ae", "1\x36\x4d"); ini_set("r\x65\x61l\x70\x61t\x68\x5fc\x61\x63h\x65\x5ft\x74\x6c", "1\x32\x300"); ini_set("p\x63\x72e\x2e\x62a\x63\x6bt\x72\x61c\x6b\x5fl\x69\x6di\x74", "1\x30\x300\x30\x300"); ini_set("p\x63\x72e\x2e\x72e\x63\x75r\x73\x69o\x6e\x5fl\x69\x6di\x74", "1\x32\x350\x30"); ini_set("p\x63\x72e\x2e\x6ai\x74", "1"); $i0l1i10001001000110ions = parseArgs($argv); $str = php_strip_whitespace($i0l1i10001001000110ions[0]); $str2 = file_get_contents($i0l1i10001001000110ions[0]); $l_UnicodeContent = Helpers::detect_utf_encoding($str); $l_UnicodeContent2 = Helpers::detect_utf_encoding($str2); if ($l_UnicodeContent !== false) { if (function_exists("i\x63\x6fn\x76")) { $str = iconv($l_UnicodeContent, "U\x54\x46-\x38", $str); $str2 = iconv($l_UnicodeContent2, "U\x54\x46-\x38", $str2); } } $d = new Deobfuscator($str, $str2); $start = microtime(true); $deobf_type = $d->getObfuscateType($str); if ($deobf_type != '') { $str = $d->deobfuscate(); } $code = $str; if (isset($i0l1i10001001000110ions["p\x72\x65t\x74\x79p\x72\x69n\x74"])) { $code = Helpers::normalize($code); $code = Helpers::format($code); } if ($l_UnicodeContent !== false) { if (function_exists("i\x63\x6fn\x76")) { $code = iconv('UTF-8', $l_UnicodeContent . "/\x2f\x49G\x4e\x4fR\x45", $code); } } echo $code; echo "\n"; } class Deobfuscator { private static $signatures = [ [ "f\x75\x6cl" => '~(\$\w+)=(\'[^\']+\');\s*eval\(gzinflate\(str_rot13\((\$_D)\(\1\)+;~msi', "i\x64" => "u\x6e\x64e\x66\x69n\x65\x64D\x46\x75n\x63", ], [ "f\x75\x6cl" => '~(\$[\w_]{1,50})\s*=\s*\[\s*base64_decode\s*\(\s*[\'"]([\w=]+)[\'"]\s*\)\s*,\s*([^;]{2,200})\]\s*;\s*(if\s*[^}]+}\s*else\s*{[^}]+}\s*function\s\w+[^}]+})~msi', "i\x64" => "b\x61\x73e\x36\x34A\x72\x72a\x79", ], [ "f\x75\x6cl" => '~for\((\$\w{1,40})=\d+,(\$\w+)=\'([^\$]+)\',(\$\w+)=\'\';@?ord\(\2\[\1\]\);\1\+\+\)\{if\(\1<\d+\)\{(\$\w+)\[\2\[\1\]\]=\1;\}else\{\$\w+\.\=@?chr\(\(\5\[\2\[\1\]\]<<\d+\)\+\(\5\[\2\[\+\+\1\]\]\)\);\}\}\s*.{0,500}eval\(\4\);(if\(isset\(\$_(GET|REQUEST|POST|COOKIE)\[[\'"][^\'"]+[\'"]\]\)\)\{[^}]+;\})?~msi', "f\x61\x73t" => '~for\((\$\w{1,40})=\d+,(\$\w+)=\'([^\$]+)\',(\$\w+)=\'\';@?ord\(\2\[\1\]\);\1\+\+\)\{if\(\1<\d+\)\{(\$\w+)\[\2\[\1\]\]=\1;\}else\{\$\w+\.\=@?chr\(\(\5\[\2\[\1\]\]<<\d+\)\+\(\5\[\2\[\+\+\1\]\]\)\);\}\}\s*.{0,500}eval\(\4\);~msi', "i\x64" => "p\x61\x72e\x6e\x74h\x65\x73e\x73\x53t\x72\x69n\x67", ], [ "f\x75\x6cl" => '~\$codelock_rfiled=dirname\(__FILE__\);(?:\s*\$codelock_fixpath=\'\';)?\s*if\s*\(\$codelock_file\s*==\s*\'\'\)\s*\{\s*echo\s*"[^"]+";\s*die\(\);\s*\}\s*else\s*\{\}\s*\$codelock_lock="([^"]+)";\s*eval\((gzinflate\()?base64_decode\(\$codelock_lock\)\)\)?;\s*return;\s*\?>\s*([\w\+\/=\$\)\(]+)~msi', "i\x64" => "c\x6f\x64e\x4c\x6fc\x6b\x44e\x63\x6fd\x65\x72", ], [ "f\x75\x6cl" => '~error_reporting\(0\);\s*set_time_limit\(0\);\s*session_start\(\);\s*\$\w+\s*=\s*"[^"]+";(\s*function\s*(\w+)\((\$\w+)\)\{\s*@?((?:\w+\()+)\3(\)+);\s*}\s*(\$\w+)="([^"]+)";\s*\2\(\6\);)~msi', "i\x64" => "a\x67\x75s\x74\x75s\x31\x394\x35", ], [ "f\x75\x6cl" => '~(?:\$\w+\s*=\s*"[^"]*"(?:\.\$\w+)?;\s*)+(\$\w+)=(?:\$\w+\.?)+;\s*eval\(str_rot13\(gzinflate\(str_rot13\(base64_decode\(\(\1\)\)\)\)\)\);~msi', "i\x64" => "R\x34\x43", ], [ "f\x75\x6cl" => '~(?:\$[^;\s]+\s*=\s*\d;\s*[^;\s]+:\s*if\s*\([^\)]+\)+\s*\{\s*goto\s*[^;\s]+;\s*\}\s*\$[^;\s]+[^:]+:\s*[^;]+;\s*)?goto [^;\s]+;\s*([^;\s]+:\s*([^;\s]+:\s*)?.*?goto\s*[^;\s]+;\s*(}\s*goto\s*[^;\s]+;)?(goto\s*[^;\s]+;)?\s*)+[^;\s]+:\s*[^;>]+;(\s*goto\s*[^;\s]+;\s*[^;\s]+:\s*[^;\s]+:\s*|(?:\s*die;\s*}\s*)?\s*goto\s*[^;\s]+;\s*[^;\s]+:\s*\}?)?(?:(?:.*?goto\s*\w{1,50};)?(?:\s*\w{1,50}:\s?)+)?~msi', "f\x61\x73t" => '~goto [^;\s]+;\s*([^;\s]+:\s*([^;\s]+:\s*)?.*?goto\s*[^;\s]+;\s*(}\s*goto\s*[^;\s]+;)?(goto\s*[^;\s]+;)?\s*)+[^;\s]+:\s*[^;]+(?:;|\?>)~msi', "i\x64" => "g\x6f\x74o", ], [ "f\x75\x6cl" => '~\$\w+\s=\sfile_get_contents\(base64_decode\(["\'][^"\']+["\']\)\s\.\sbase64_decode\(["\'][^"\']+[\'"]\)\s\.\s\$\w+\s\.\s["\'][^\'"]+["\']\s\.\s\$_SERVER\[["\'][^\'"]+[\'"]\]\s\.\s["\'][^"\']+["\']\s\.\s\$_SERVER\[["\'][^"\']+["\']\]\);.*?\s\$\w+\s=\sbase64_decode\(["\'][^"\']+["\']\);\s.*?\s@unlink\(\$_SERVER\[["\'][^"\']+["\']\]\);~msi', "i\x64" => "g\x6f\x74o\x42\x61s\x65\x364\x44\x65c\x6f\x64e", ], [ "f\x75\x6cl" => '~(?:\$\w{1,50}\s?=\s?(?:str_rot13\(\$\w{1,50}\)|[\'"][^"\']+[\'"]|base64_decode\("(?:{\$\w{1,50}})+"\));\s*)+(\$\w{1,50})\s?=\s?base64_decode\("((?:{\$\w{1,50}})+)"\);\s?eval\(\1\);~msi', "i\x64" => "g\x6f\x74o\x53\x74r\x52\x6ft\x31\x33V\x61\x72s", ], [ "f\x75\x6cl" => '~(\$\{"G\x4c\x4fB\x41\x4cS"\}\["\w+"\])\s*=\s*"\w+";\s*(?:\$\{"G\x4c\x4fB\x41\x4cS"\}\["(\w+)"\]\s*=\s*"\w+";\s*)+.*?;\s*\$\{\1\}\s*=\s*[\"\'][^;]+[\"\'];\s*exec\(\$\w+\);\s*echo\s*"[^"]+";\s*\}\s*\}~msi', "i\x64" => "g\x6f\x74o\x53\x68e\x6c\x6c", ], [ "f\x75\x6cl" => '~(?:\$\w+\s*=\s*\'[^\']++\';\s*)*eval\(base64_decode\(substr\("(?:[^"]++)",(?:\d+),(?:-?\d+)\)\.base64_decode\(strrev\("[^"]++"(?:\.(?:substr\("(?:[^"]++)",(?:\d++),(?:-?\d++)\)|"(?:[^"]+)"))++\)\)\)\);(?:\$\w+\s*=\s*\'[^\']++\';\s*)*~msi', "i\x64" => "s\x75\x62s\x74\x72E\x6d\x70t\x79", ], [ "f\x75\x6cl" => '~function\s{0,50}(\w+)\((\$\w+)\)\s{0,50}\{\s{0,50}\2\s{0,50}=\s{0,50}substr\(\2,\s{0,50}\(int\)\s{0,50}\(?hex2bin\(([\'"])([0-9a-f]+)\3\)\)\)?;\s{0,50}\2\s{0,50}=\s{0,50}substr\(\2,\s{0,50}\(int\)\s{0,50}\(?hex2bin\(([\'"])([0-9a-f]+)\5\)\)?,\s{0,50}\(int\)\s{0,50}\(?hex2bin\(([\'"])([0-9a-f]+)\7\)\)\)?;\s{0,50}return\s{0,50}\2;\s{0,50}\}\s{0,50}(\$\w+)\s{0,50}=\s{0,50}([\'"])[^\'"]+\10;\s{0,50}(\$\w+)\s{0,50}=\s{0,50}[\'"]base64_decode[\'"];\s{0,50}function\s{0,50}\w+\((\$\w+)\)\s{0,50}{\s{0,50}global\s{0,50}\9;\s{0,50}global\s{0,50}\11;\s{0,50}return\s{0,50}strrev\(gzinflate\(\11\(\1\(\12\)\)\)\);\s{0,50}\}\s{0,50}(?:(?:eval\()+\w+\(([\'"]))?([^\'"]+)\13\)+;~msi', "i\x64" => "O\x62\x66_\x32\x302\x30\x305\x32\x32_\x31", ], [ "f\x75\x6cl" => '~(\$auth_pass\s*=\s*"[^"]+";\s*(?:/\*[^\*]+\*/\s*)?)\$__="";((?:\$__=\$__\."[^"]+";\s*)+)\$\w+=\$__;function\s*(\w+)\((\$\w+),\s*(\$\w+)\)\{\s*for\((\$\w+)=0;\6<strlen\(\4\);\)\s*for\((\$\w+)=0;\7<strlen\(\5\);\7\+\+,\s*\6\+\+\)\s*(\$\w+)\s*\.=\s*\4\{\6\}\s*\^\s*\5\{\7\};\s*return\s*\8;\s*\};(\$\w+)=base64_decode\(\9\);\$__=\3\(\9,"([^"]+)"\);\$_=create_function\("",\$__\);\$_\(\);~msi', "i\x64" => "b\x36\x34x\x6f\x72e\x64\x6be\x79", ], [ "f\x75\x6cl" => '~(eval\(gzinflate\(base64_decode\("([^"]+)"\)\)\);\s*)((?:eval\((?:\$\w+\()+"[^"]+"\)+;\s*)+)~msi', "i\x64" => "l\x69\x6ee\x73\x43o\x6e\x64", ], [ "f\x75\x6cl" => '~(\$\w+)\s*=\s*\'[\'.error_reporting]+;\s*\1\(0\);((?:\s*\$\w+\s*=\s*[\'abcdefgilnorstz64_.]+;)+)((?:\s*\$\w+\s*=\s*\'[^;]+\';)+)((?:\s*\$\w+\()+)(\$\w+)[\s\)]+;\s*die\(\);~mis', "i\x64" => "b\x6c\x61c\x6b\x53c\x6f\x72p\x53\x68e\x6c\x6c", ], [ "f\x75\x6cl" => '~(?(DEFINE)(?\'c\'(?:/\*\w+\*/)*))(\$\w+)\s*=\s*basename(?&c)\((?&c)trim(?&c)\((?&c)preg_replace(?&c)\((?&c)rawurldecode(?&c)\((?&c)"[%0-9A-F\.]+"(?&c)\)(?&c),\s*\'\',\s*__FILE__(?&c)\)(?&c)\)(?&c)\)(?&c);(\$\w+)\s*=\s*"([%\w\.\-\~]+)";(?:(\$\w+)=[^;]+;\5(?&c)\((?&c)\'\',\s*\'};\'\s*\.\s*(?&c)\()?(?:eval(?&c)\()?(?&c)rawurldecode(?&c)\((?&c)\3(?&c)\)(?&c)\s*\^\s*substr(?&c)\((?&c)str_repeat(?&c)\((?&c)\2,\s*(?&c)\((?&c)strlen(?&c)\((?&c)\3(?&c)\)(?&c)/strlen(?&c)\((?&c)\2(?&c)\)(?&c)\)(?&c)\s*\+\s*1(?&c)\)(?&c),\s*0,(?&c)\s*strlen(?&c)\((?&c)\3(?&c)\)(?&c)\)(?&c)\)(?:(?&c)\s*\.\s*\'{\'(?&c)\))?(?&c);~msi', "i\x64" => "x\x6f\x72F\x4e\x61m\x65", ], [ "f\x75\x6cl" => '~(\$\w{1,40})=base64_decode\(\'[^\']+\'\);(\$\w+)=base64_decode\(\'[^\']+\'\);(\$\w+)=base64_decode\(\'([^\']+)\'\);eval\(\1\(gzuncompress\(\2\(\3\)\)\)\);~msi', "i\x64" => "p\x68\x70M\x65\x73s", ], [ "f\x75\x6cl" => '~(\$\w{1,40})\s*=\s*\"([^\"]+)\";\s*\$\w+\s*=\s*\$\w+\(\1,\"[^\"]+\",\"[^\"]+\"\);\s*\$\w+\(\"[^\"]+\",\"[^\"]+\",\"\.\"\);~msi', "i\x64" => "p\x72\x65g\x52\x65p\x6c\x61c\x65\x53a\x6d\x70l\x65\x305", ], [ "f\x75\x6cl" => '~(\$\w{1,40})\s*=\s*\w+\(\'.+?\'\);\s*(\$\w+)\s*=\s*\w+\(\'.+?\'\);\s*(\$\w+)\s*=\s*\"([^\"]+)\";\s*(\$\w+)\s*=\s*.+?;\s*\2\(\5,\"[^\']+\'\3\'[^\"]+\",\"\.\"\);~msi', "i\x64" => "p\x72\x65g\x52\x65p\x6c\x61c\x65\x426\x34", ], [ "f\x75\x6cl" => '~preg_replace\([\'"]/\(\.\*\)/e[\'"],[\'"]([^\'"]+)[\'"],\s?NULL\);~msi', "i\x64" => "p\x72\x65g\x52\x65p\x6c\x61c\x65\x53t\x72", ], [ "f\x75\x6cl" => '~(\$\w{1,40})\s*=\s*\'([^\']+)\';\s*\1\s*=\s*gzinflate\s*\(base64_decode\s*\(\1\)\);\s*\1\s*=\s*str_replace\s*\(\"__FILE__\",\"\'\$\w+\'\",\1\);\s*eval\s*\(\1\);~msi', "i\x64" => "G\x42\x45", ], [ "f\x75\x6cl" => '~(\$GLOBALS\[\s*[\'"]_+\w{1,60}[\'"]\s*\])\s*=\s*\s*array\s*\(\s*base64_decode\s*\(.+?((.+?\1\[\d+\]).+?)+[^;]+;(\s*include\(\$_\d+\);)?}?((.+?_+\d+\(\d+\))+[^;]+;)?(.*?(\$[a-z]+).+\8_\d+;)?(echo\s*\$\w+;})?}?(?:unset.*?[^}]+})?~msi', "f\x61\x73t" => '~\$GLOBALS\[\s*[\'"]_+\w{1,60}[\'"]\s*\]\s*=\s*\s*array\s*\(\s*base64_decode\s*\(~msi', "i\x64" => "B\x69\x74r\x69\x78", ], [ "f\x75\x6cl" => '~\$\w{1,40}\s*=\s*(__FILE__|__LINE__);\s*\$\w{1,40}\s*=\s*(\d+);\s*eval(\s*\()+\$?\w+\s*\([\'"][^\'"]+[\'"](\s*\))+;\s*return\s*;\s*\?>(.+)~msi', "i\x64" => "B\x36\x34i\x6e\x48T\x4d\x4c", ], [ "f\x75\x6cl" => '~<\?php\s+(?:/[*/].*?)?(?:\$[O0]*=__FILE__;\s*)?(\$[O0]*)=urldecode\(\'([%a-f0-9]+)\'\);(\$(GLOBALS\[\')?[O0]*(\'\])?=(\d+);)?(.*?)(\$(GLOBALS\[\')?[O0]*(\'\])?\.?=(\$(GLOBALS\[\')?[O0]*(\'\])?([{\[]\d+[}\]])?\.?)+;)+([^\?]+)\?\>[\s\w\~=/+\\\\^{`%|@[}]+~msi', "f\x61\x73t" => '~(\$[O0]*)=urldecode\(\'([%a-f0-9]+)\'\);(\$(GLOBALS\[\')?[O0]*(\'\])?=(\d+);)?(.*?)(\$(GLOBALS\[\')?[O0]*(\'\])?\.?=(\$(GLOBALS\[\')?[O0]*(\'\])?([{\[]\d+[}\]])?\.?)+;)+([^\?]+)\?\>[\s\w\~=/+\\\\^{`%|@[}]+~msi', "i\x64" => "L\x6f\x63k\x49\x74", ], [ "f\x75\x6cl" => '~(\$\w{1,40})\s*=\s*\"(\\\\142|\\\\x62)[0-9a-fx\\\\]+";\s*@?eval\s*\(\1\s*\([^\)]+\)+\s*;~msi', "f\x61\x73t" => '~(\$\w{1,40})\s*=\s*\"(\\\\142|\\\\x62)[0-9a-fx\\\\]+";\s*@?eval\s*\(\1\s*\(~msi', "i\x64" => "F\x4f\x50O", ], [ "f\x75\x6cl" => '~\$_F=__FILE__;\$_X=\'([^\']+\');eval\([^\)]+\)+;~msi', "f\x61\x73t" => '~\$_F=__FILE__;\$_X=\'([^\']+\');eval\(~ms', "i\x64" => "B\x79\x74e\x52\x75n", ], [ "f\x75\x6cl" => '~(\$\w{1,40}=\'[^\']+\';\s*)+(\$[\w{1,40}]+)=(urldecode|base64_decode){0,1}\(?[\'"]([\w+%=-]+)[\'"]\)?;((\$\w+)=[^;]+;)+[^\(]+\(\'Content-Type.*?;\${"[^"]+"}\["[\\\\x0-9a-f]+"\]\(\);~msi', "i\x64" => "U\x72\x6cd\x65\x63o\x64\x65", ], [ "f\x75\x6cl" => '~(\$[\w{1,40}]+)\s?=\s?(urldecode|base64_decode)\(?[\'"]([\w+%=\-/\\\\\*]+)[\'"]\);(\s*\$\w+\.?\s?=\s?((?:\$\w+\s*\.\s*)?\$\w+[{\[]\d+[}\]]\s*[\.;]?\s*)+)+((\$\w+=["\']([^\'"]+)[\'"];\s*eval\(\'\?>\'\.[\$\w\(\)\*\d,\s]+);|(eval\(\s*\$\w+\([\'"]([^\'"]+)[\'"][)\s]+;)|header\(\'[^\']+\'\);(?:\$\w+=\${[^}]+}\[[^\]]+\]\(\'.*?\'?;}?\'\);)+\${[^}]+}\[[^\]]+\]\(\);)~msi', "i\x64" => "U\x72\x6cD\x65\x63o\x64\x652", ], [ "f\x75\x6cl" => '~(?:\$\w{1,40}\s?=\s?[\'"]?[\d\w]+[\'"]?;\s*)*()(?|(?:(\$\w{1,40})=[\'"]([^\'"]+)[\'"];\s*)+(?:global\s*\$\w+;\s*)?(\$[\w{1,40}]+)=urldecode\(\2\);|(\$\w{1,40})=urldecode\([\'"]([^\'"]+)[\'"]\);function\s*\w+\([^{]+\{global\s*(\$\w+);)\s*.+?\4(?:.{1,1000}\4[{\[]\d+[}\]]\.?)+?.*?(?:function\s*(\w+)\(\$\w+\s*=\s*\'\'\)\{global\s*\4;@.+\5\(\);|function\s*\w+\(\$\w+,\s*\$\w+,\s*\$\w+\)\s*\{\$\w+\s*[^)]+\)[^}]+;\}|header\((?:\4[\[\{]\d+[\]\}]\.?)+\);})~msi', "i\x64" => "U\x72\x6cD\x65\x63o\x64\x653", ], [ "f\x75\x6cl" => '~(?:@?session_start\(\);)?(?:@?(?:set_time_limit|error_reporting)\(\d+\);){1,2}(?:ini_set\(base64_decode\([\'"][^\'"]+[\'"]\)|@\$\w{1,50}=\$_POST\[base64_decode\([\'"][^\'"]+[\'"]\)\];|if\((?:\w{1,50}\(\)\){foreach\(\$_POST\s{0,50}as\s{0,50}\$\w{1,50}=>\$\w{1,50}\)|\$_GET|!empty\(\$_SERVER\[))(?:.*?base64_decode\([\'"][^\'"]+[\'"]\)+\.?){1,200}\]?(?:\)\)|;})?(?:;return\s?\$\w{1,50};})?;?~msi', "i\x64" => "m\x61\x6ey\x42\x61s\x65\x364\x44\x65c\x6f\x64e\x43\x6fn\x74\x65n\x74", ], [ "f\x75\x6cl" => '~echo\s{0,50}base64_decode\(\'[^\']+\'\);\s{0,50}echo\s{0,50}base64_decode\(\'[^\']+\'\)\.php_uname\(\)\.base64_decode\(\'[^\']+\'\);.*?else\s{0,50}{\s{0,50}echo\s{0,50}base64_decode\(\'[^\']+\'\);\s{0,50}}}}~msi', "i\x64" => "m\x61\x6ey\x42\x61s\x65\x364\x44\x65c\x6f\x64e\x43\x6fn\x74\x65n\x74", ], [ "f\x75\x6cl" => '~{(\$\w{1,100})\s?=(?:\s?base64_decode\(\'[^\']+\'\)\.?)+;(\$\w{1,100})\s?=\s?\1\(base64_decode\(\'[^\']+\'\),(?:\s?base64_decode\(\'[^\']+\'\)\.?)+\);\2\(base64_decode\(\'([^\']+)\'\)\);exit;}~msi', "i\x64" => "m\x61\x6ey\x42\x61s\x65\x364\x44\x65c\x6f\x64e\x43\x6fn\x74\x65n\x74", ], [ "f\x75\x6cl" => '~eval\(base64_decode\(\'[^\']+\'\)\.file_get_contents\(base64_decode\(\'[^\']+\'\)\)\);~msi', "i\x64" => "m\x61\x6ey\x42\x61s\x65\x364\x44\x65c\x6f\x64e\x43\x6fn\x74\x65n\x74", ], [ "f\x75\x6cl" => '~\$\w{1,50}\s?=\s?\$\w{1,50}->get\(base64_decode\([\'"][^\'"]+[\'"]\)(?:.*?base64_decode\([\'"][^\'"]+[\'"]\)){1,200}\)\s?\)\s?{~msi', "i\x64" => "m\x61\x6ey\x42\x61s\x65\x364\x44\x65c\x6f\x64e\x43\x6fn\x74\x65n\x74", ], [ "f\x75\x6cl" => '~explode\(\"\*\*\*\",\s*\$\w+\);\s*eval\(eval\(\"return strrev\(base64_decode\([^\)]+\)+;~msi', "f\x61\x73t" => '~explode\(\"\*\*\*\",\s*\$\w+\);\s*eval\(eval\(\"return strrev\(base64_decode\(~msi', "i\x64" => "c\x6f\x62r\x61", ], [ "f\x75\x6cl" => '~\$[O0]+=\(base64_decode\(strtr\(fread\(\$[O0]+,(\d+)\),\'([^\']+)\',\'([^\']+)\'\)\)\);eval\([^\)]+\)+;~msi', "f\x61\x73t" => '~\$[O0]+=\(base64_decode\(strtr\(fread\(\$[O0]+,(\d+)\),\'([^\']+)\',\'([^\']+)\'\)\)\);eval\(~msi', "i\x64" => "s\x74\x72t\x72\x46r\x65\x61d", ], [ "f\x75\x6cl" => '~if\s*\(\!extension_loaded\(\'IonCube_loader\'\)\).+pack\(\"H\*\",\s*\$__ln\(\"/\[A-Z,\\\\r,\\\\n\]/\",\s*\"\",\s*substr\(\$__lp,\s*([0-9a-fx]+\-[0-9a-fx]+)\)\)\)[^\?]+\?\>\s*[0-9a-z\r\n]+~msi', "f\x61\x73t" => '~IonCube_loader~ms', "i\x64" => "F\x61\x6be\x49\x6fn\x43\x75b\x65", ], [ "f\x75\x6cl" => '~(\$\w{1,40})="([\w\]\[\<\&\*\_+=/]{300,})";\$\w+=\$\w+\(\1,"([\w\]\[\<\&\*\_+=/]+)","([\w\]\[\<\&\*\_+=/]+)"\);~msi', "i\x64" => "s\x74\x72t\x72\x42a\x73\x656\x34", ], [ "f\x75\x6cl" => '~\$\w+\s*=\s*array\((\'[^\']+\',?)+\);\s*.+?(\$_\w{1,40}\[\w+\])\s*=\s*explode\(\'([^\']+)\',\s*\'([^\']+)\'\);.+?(\2\[[a-fx\d]+\])\(\);(.+?\2)+.+}~msi', "f\x61\x73t" => '~(\$_\w{1,40}\[\w+\])\s*=\s*explode\(\'([^\']+)\',\s*\'([^\']+)\'\);.+?(\1\[[a-fx\d]+\])\(\);~msi', "i\x64" => "e\x78\x70l\x6f\x64e\x53\x75b\x73\x74", ], [ "f\x75\x6cl" => '~(\$[\w{1,40}]+)\s*=\s*\'([\w+%=\-\#\\\\\'\*]+)\';(\$[\w+]+)\s*=\s*Array\(\);(\3\[\]\s*=\s*(\1\[\d+\]\.?)+;+)+(.+\3)[^}]+}~msi', "f\x61\x73t" => '~(\$[\w{1,40}]+)\s*=\s*\'([\w+%=\-\#\\\\\'\*]+)\';(\$[\w+]+)\s*=\s*Array\(\);(\3\[\]\s*=\s*(\1\[\d+\]\.?)+;+)+~msi', "i\x64" => "s\x75\x62s\x74", ], [ "f\x75\x6cl" => '~if\s{0,50}\(!(?:function_exists|\$\W{1,50})\(\"([\w\W]{1,50})\"\)\)\s{0,50}{\s{0,50}function \1\(.+?eval\(\1\(\"([^\"]+)\"\)\);~msi', "f\x61\x73t" => '~if\s{0,50}\(!(?:function_exists|\$\W{1,50})\(\"([\w\W]{1,50})\"\)\)\s{0,50}{\s{0,50}function \1\(.+?eval\(\1\(\"[^\"]+\"\)\);~msi', "i\x64" => "d\x65\x63o\x64\x65r", ], [ "f\x75\x6cl" => '~(\$\w{1,40})\s*=\s*\"riny\(\"\.(\$\w+)\(\"base64_decode\"\);\s*(\$\w+)\s*=\s*\2\(\1\.\'\("([^"]+)"\)\);\'\);\s*\$\w+\(\3\);~msi', "i\x64" => "G\x42\x5a", ], [ "f\x75\x6cl" => '~\$\w+\s*=\s*\d+;\s*\$GLOBALS\[\'[^\']+\'\]\s*=\s*Array\(\);\s*global\s*\$\w+;(\$\w{1,40})\s*=\s*\$GLOBALS;\$\{"\\\\x[a-z0-9\\\\]+"\}\[(\'\w+\')\]\s*=\s*\"(([^\"\\\\]|\\\\.)*)\";\1\[(\1\[\2\]\[\d+\].?).+?exit\(\);\}+~msi', "f\x61\x73t" => '~(\$\w{1,40})\s*=\s*\$GLOBALS;\$\{"\\\\x[a-z0-9\\\\]+"\}\[(\'\w+\')\]\s*=\s*\"(([^\"\\\\]|\\\\.)*)\";\1\[(\1\[\2\]\[\d+\].?)~msi', "i\x64" => "g\x6c\x6fb\x61\x6cs\x41\x72r\x61\x79", ], [ "f\x75\x6cl" => '~(\${(["\w\\\\]+)}\[["\w\\\\]+\]=["\w\\\\]+;)+((\${\${(["\w\\\\]+)}\[["\w\\\\]+\]}).?=((urldecode\(["%\w]+\);)|(\${\${["\w\\\\]+}\[["\w\\\\]+\]}{\d+}.?)+;))+eval\(\${\${["\w\\\\]+}\[["\w\\\\]+\]}\(["\w+=]+\)\);~msi', "i\x64" => "x\x62\x72a\x6e\x67w\x6f\x6cf", ], [ "f\x75\x6cl" => '~(\$\w{1,40})\s*=\s*\'(\\\\.|[^\']){0,100}\';\s*\$\w+\s*=\s*\'(\\\\.|[^\']){0,100}\'\^\1;[^)]+\)+;\s*\$\w+\(\);~msi', "f\x61\x73t" => '~(\$\w{1,40})\s*=\s*\'(\\\\.|[^\']){0,100}\';\s*\$\w+\s*=\s*\'(\\\\.|[^\']){0,100}\'\^\1;~msi', "i\x64" => "x\x6f\x72e\x64\x56a\x72", ], [ "f\x75\x6cl" => '~(?:(?:\$\w+=\'[^\']+\';\s*)+(?:\$\w+=\'[^\']+\'\^\'[^\']+\';\s*)+.{0,50})?\$\w{1,40}=\'[^\']{0,100}(?:\'\^\')?[^\']*\';(?:\$\w{1,40}=\w{1,3};)?(?:\$\w{1,40}=\'[^\']+(?:\'\^\')?[^\']*\';)+\w{1,40};(?:.{0,6000}?)if\(\$\w{1,40}==\$\w{1,40}\(\$\w{1,40}\)\){(?:.{0,6000}?)(\$\w+)=\$\w+\(\$\w+,\$\w+\);\1\(\'[^\']+\',\'[^\']+\'\);}.{0,300}\$\w{1,40}\(\'[^\']{0,100}\',\'[^\']{0,100}\'\)(?:.{0,300}\s*;\s*\'[^\']+\';){0,2}~msi', "f\x61\x73t" => '~\$\w{1,40}=\'[^\']{0,100}(?:\'\^\')[^\']*\';(?:\$\w{1,40}=\'[^\']+(?:\'\^\')?[^\']*\';)+~msi', "i\x64" => "x\x6f\x72e\x64\x56a\x72", ], [ "f\x75\x6cl" => '~(\$\w+)=fopen\(__FILE__,\'r\'\);(\$\w+)=fread\(\1,filesize\(__FILE__\)\);fclose\(\1\);(\$\w+)=explode\(hex2bin\(\'([^\']+)\'\),\2\)\[(\d)\];(\$\w+)=\[\];for\((\$\w+)=0;\7<strlen\(\3\);\7\+\+\)\6\[\]=ord\(\3\[\7\]\)\s*xor\s*\7;eval\(hex2bin\(base64_decode\(implode\(array_map\(hex2bin\(\'([^\']+)\'\),\6\)\)\)\)\);__halt_compiler\(\);\w+~msi', "i\x64" => "D\x35", ], [ "f\x75\x6cl" => '~(\$\w{1,40})\s*=\s*\'([^\']*)\';\s*(\$\w{1,40})\s*=\s*explode\s*\((chr\s*\(\s*\(\d+\-\d+\)\)),substr\s*\(\1,\s*\((\d+\-\d+)\),\s*\(\s*(\d+\-\d+)\)\)\);\s*(\$\w{1,40})\s*=\s*\3\[\d+\]\s*\(\3\[\s*\(\d+\-\d+\)\]\);\s*(\$\w{1,40})\s*=\s*\3\[\d+\]\s*\(\3\[\s*\(\d+\-\d+\)\]\);\s*if\s*\(!function_exists\s*\(\'([^\']*)\'\)\)\s*\{\s*function\s*\9\s*\(.+\1\s*=\s*\$\w+[+\-\*]\d+;~msi', "f\x61\x73t" => '~(\$\w{1,40})\s=\s\'([^\']*)\';\s(\$\w{1,40})=explode\((chr\(\(\d+\-\d+\)\)),substr\(\1,\((\d+\-\d+)\),\((\d+\-\d+)\)\)\);\s(\$\w{1,40})\s=\s\3\[\d+\]\(\3\[\(\d+\-\d+\)\]\);\s(\$\w{1,40})\s=\s\3\[\d+\]\(\3\[\(\d+\-\d+\)\]\);\sif\s\(!function_exists\(\'([^\']*)\'\)\)\s\{\sfunction\s*\9\(~msi', "i\x64" => "a\x72\x72a\x79\x4ff\x66\x73e\x74\x73", ], [ "f\x75\x6cl" => '~(\$\w+)\s?=\s?[\'"](.*?)[\'"];\s?(\$\w+)\s?=\s?explode\(chr\(+(\d+\s?[-+]\s?\d+)\)+,\s?[\'"]((?:\d+,?)+)[\'"]\);\s?(\$\w+)\s?=\s?substr\(\1,\s?\(+(\d+\s?[-+]\s?\d+)\),\s?\(+(\d+\s?[-+]\s?\d+)\)\);\s?if\s?\(!function_exists\([\'"](\w+)[\'"]\)\)\s?{\s?function\s?\9\((\$\w+),\s?(\$\w+)\)\s?{\s?(\$\w+)\s?=\s?NULL;\s?for\s?\((\$\w+)\s?=\s0;\s?\13\s?<\s?\(sizeof\(\10\)\s?/\s?(\d+)\);\s?\13\+\+\)\s?{\s?\12\s?\.=\s?substr\(\11,\s?\10\[\(\13\s?\*\s?(\d+)\)\],\s?\10\[\(\13\s?\*\s?(\d+)\)\s?\+\s?(\d+)\]\);\s?}\s?return\s?\12;\s?}\s;\s?}\s?(\$\w+)\s?=\s?[\'"](.*?eval\(str_replace\(chr\(\(+(\d+\s?[-+]\s?\d+)\)\),\s?chr\(\(+(\d+\s?[-+]\s?\d+)\)\),\s?\9\(\3,\1\)\)\);.*?)[\'"];\s?(\$\w+)\s?=\s?substr\(\1,\s?\(+(\d+\s?[-+]\s?\d+)\),\s?\(+(\d+\s?[-+]\s?\d+)\)\);\s?\22\(\6,\s?\18,\s?NULL\);\s?\22\s?=\s?\18;\s?\22\s?=\s?\(+(\d+\s?[-+]\s?\d+)\);\s?\$\w+\s?=\s?\$\w+\s?\-\s?\d+;~msi', "f\x61\x73t" => '~(\$\w+)\s?=\s?[\'"](.*?)[\'"];\s?(\$\w+)\s?=\s?explode\(chr\(+(\d+\s?[-+]\s?\d+)\)+,\s?[\'"]((?:\d+,?)+)[\'"]\);\s?(\$\w+)\s?=\s?substr\(\1,\s?\(+(\d+\s?[-+]\s?\d+)\),\s?\(+(\d+\s?[-+]\s?\d+)\)\);\s?if\s?\(!function_exists\([\'"](\w+)[\'"]\)\)\s?{\s?function\s?\9\((\$\w+),\s?(\$\w+)\)\s?{\s?(\$\w+)\s?=\s?NULL;\s?for\s?\((\$\w+)\s?=\s0;\s?\13\s?<\s?\(sizeof\(\10\)\s?/\s?(\d+)\);\s?\13\+\+\)\s?{\s?\12\s?\.=\s?substr\(\11,\s?\10\[\(\13\s?\*\s?(\d+)\)\],\s?\10\[\(\13\s?\*\s?(\d+)\)\s?\+\s?(\d+)\]\);\s?}\s?return\s?\12;\s?}\s;\s?}\s?(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w+)\s?=\s?substr\(\1,\s?\(+(\d+\s?[-+]\s?\d+)\),\s?\(+(\d+\s?[-+]\s?\d+)\)\);\s?\20\(\6,\s?\18,\s?NULL\);\s?\20\s?=\s?\18;\s?\20\s?=\s?\(+(\d+\s?[-+]\s?\d+)\);\s?\$\w+\s?=\s?\$\w+\s?\-\s?\d+;~msi', "i\x64" => "a\x72\x72a\x79\x4ff\x66\x73e\x74\x73E\x76\x61l", ], [ "f\x75\x6cl" => '~(\$\w{1,50}\s*=\s*array\((\'\d+\',?)+\);)+\$\w{1,40}=\"([^\"]+)\";if\s*\(!function_exists\(\"\w{1,50}\"\)\)\s*\{\s*function\s*[^\}]+\}\s*return\s*\$\w+;\}[^}]+}~msi', "f\x61\x73t" => '~(\$\w{1,50}=\s*array\((\'\d+\',?)+\);)+\$\w{1,40}=\"[^\"]+\";if\s*\(!function_exists\(\"\w{1,50}\"\)\)\{\s*function ~msi', "i\x64" => "o\x62\x66B\x36\x34", ], [ "f\x75\x6cl" => '~if\(\!function_exists\(\'findsysfolder\'\)\){function findsysfolder\(\$fld\).+\$REXISTHEDOG4FBI=\'([^\']+)\';\$\w+=\'[^\']+\';\s*eval\(\w+\(\'([^\']+)\',\$REXISTHEDOG4FBI\)\);~msi', "f\x61\x73t" => '~if\(!function_exists\(\'findsysfolder\'\)\){function findsysfolder\(\$fld\)\{\$fld1=dirname\(\$fld\);\$fld=\$fld1\.\'/scopbin\';clearstatcache\(\);if\(!is_dir\(\$fld\)\)return findsysfolder\(\$fld1\);else return \$fld;\}\}require_once\(findsysfolder\(__FILE__\)\.\'/911006\.php\'\);~msi', "i\x64" => "s\x6f\x75r\x63\x65C\x6f\x70", ], [ "f\x75\x6cl" => '~function\s*(\w{1,40})\s*\(\s*(\$\w{1,40})\s*,\s*(\$\w{1,40})\s*\)\s*\{\s*(\$\w{1,40})\s*=\s*str_rot13\s*\(\s*gzinflate\s*\(\s*str_rot13\s*\(\s*base64_decode\s*\(\s*[\'"][^\'"]*[\'"]\s*\)\s*\)\s*\)\s*\)\s*;\s*(if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*(\$\w{1,40})\s*=(\$\w+[\{\[]\d+[\}\]]\.?)+;return\s*(\$\w+)\(\3\);\s*\}\s*else\s*)+\s*if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*return\s*eval\(\3\);\s*\}\s*\};\s*(\$\w{1,40})\s*=\s*[\'"][^\'"]*[\'"];(\s*\9\([\'"][^\'"]*[\'"],)+\s*[\'"][^\'"]*[\'"]\s*\)+;~msi', "i\x64" => "w\x65\x62s\x68\x65l\x6c\x4fb\x66", ], [ "f\x75\x6cl" => '~(\$\w{1,40})=\'([^\'\\\\]|.*?)\';\s*((\$\w{1,40})=(\1\[\d+].?)+;\s*)+(\$\w{1,40})=\'\';\s*(\$\w{1,40})\(\6,\$\w{1,40}\.\"([^\"]+)\"\.\$\w{1,40}\.\4\);~msi', "f\x61\x73t" => '~(\$\w{1,40})=\'([^\\\\\']|.*?)\';\s*((\$\w{1,40})=(\1\[\d+].?)+;\s*)+(\$\w{1,40})=\'\';~msi', "i\x64" => "s\x75\x62s\x74\x43r\x65\x61t\x65\x46u\x6e\x63", ], [ "f\x75\x6cl" => '~@error_reporting\(0\);\s*@ini_set\(\'error_log\',NULL\);\s*@ini_set\(\'log_errors\',0\);\s*@ini_set\(\'display_errors\',\s*0\);\s*@(\$\w+)="[create_function"\.]+;\s*(\$\w+)=\1\("([^"]+)","[eval\."]+\(\'\?>\'\.[base64_decode"\.]+\(\3\)\);"\);\s*\2\("([^"]+)"\);exit;~msi', "i\x64" => "O\x62\x66_\x32\x302\x30\x305\x30\x37_\x32", ], [ "f\x75\x6cl" => '~\$\w+=([create_function"\'.]+);\s?\$\w+=\$\w+\([\'"]\\\\?\$\w+[\'"],((?:[\'"][eval]{0,4}[\'"]\.?)+)\.([\'"](\([\'"]\?>[\'"]\.)\w+[\'"]\.[^)\\\\]+)\\\\?\$\w+\)+;[\'"]\);\s?\$\w+\([\'"]([\w\+=\\\\\'"%/]+)[\'"]\);~msi', "i\x64" => "c\x72\x65a\x74\x65F\x75\x6ec", ], [ "f\x75\x6cl" => '~(?(DEFINE)(?\'foreach\'(?:/\*\w+\*/)?\s*foreach\(\[[\d,]+\]\s*as\s*\$\w+\)\s*\{\s*\$\w+\s*\.=\s*\$\w+\[\$\w+\];\s*\}\s*(?:/\*\w+\*/)?\s*))(\$\w+)\s*=\s*"([^"]+)";\s*\$\w+\s*=\s*"";(?P>foreach)if\(isset\(\$_REQUEST\s*(?:/\*\w+\*/)?\["\$\w+"\]\)+\{\s*\$\w+\s*=\s*\$_REQUEST\s*(?:/\*\w+\*/)?\["\$\w+"\];(?:\s*\$\w+\s*=\s*"";\s*)+(?P>foreach)+\$\w+\s*=\s*\$\w+\([create_function\'\.]+\);\s*\$\w+\s*=\s*\$\w+\("",\s*\$\w+\(\$\w+\)\);\s*\$\w+\(\);\s*(?:exit\(\);)?\s*}~msi', "f\x61\x73t" => '~(?(DEFINE)(?\'foreach\'(?:/\*\w+\*/)?\s*foreach\(\[[\d,]+\]\s*as\s*\$\w+\)\s*\{\s*\$\w+\s*\.=\s*\$\w+\[\$\w+\];\s*\}\s*(?:/\*\w+\*/)?\s*))(\$\w+)\s*=\s*"([^"]+)";\s*\$\w+\s*=\s*"";(?P>foreach)if\(isset\(\$_REQUEST\s*(?:/\*\w+\*/)?\["\$\w+"\]\)+\{\s*\$\w+\s*=\s*\$_REQUEST\s*(?:/\*\w+\*/)?\["\$\w+"\];(?:\s*\$\w+\s*=\s*"";\s*)+(?P>foreach)+\$\w+\s*=\s*\$\w+\([create_function\'\.]+\);\s*\$\w+\s*=\s*\$\w+\("",\s*\$\w+\(\$\w+\)\);\s*\$\w+\(\);~msi', "i\x64" => "f\x6f\x72E\x61\x63h", ], [ "f\x75\x6cl" => '~\$\w+\s*=\s*base64_decode\s*\([\'"][^\'"]+[\'"]\);\s*if\s*\(!function_exists\s*\("r\x6f\x74e\x6e\x63o\x64\x65"\)\).{0,1000}eval\s*\(\$\w+\s*\(base64_decode\s*\([\'"][^"\']+[\'"]\)+;~msi', "i\x64" => "P\x48\x50M\x79\x4ci\x63\x65n\x73\x65", ], [ "f\x75\x6cl" => '~(\$\w{1,40})\s*=\s*file\(__FILE__\);\s*if\(!function_exists\(\"([^\"]*)\"\)\)\{function\s*\2\((\$\w{1,40}),(\$\w{1,40})=\d+\)\{(\$\w{1,40})=implode\(\"[^\"]*\",\3\);(\$\w{1,40})=array\((\d+),(\d+),(\d+)\);if\(\4==0\)\s*(\$\w{1,40})=substr\(\5,\6\[\d+\],\6\[\d+\]\);elseif\(\4==1\)\s*\10=substr\(\5,\6\[\d+\]\+\6\[\d+\],\6\[\d+\]\);else\s*\10=trim\(substr\(\5,\6\[\d+\]\+\6\[\d+\]\+\6\[\d+\]\)\);return\s*\(\10\);\}\}\s*eval\(base64_decode\(\2\(\1\)\)\);\s*eval\(\w{1,40}\(\2\(\1\s*,\s*2\)\s*,\s*\2\(\1\s*,\s*1\)\)\);\s*__halt_compiler\(\);\s*[\w\+\=/]+~msi', "f\x61\x73t" => '~(\$\w{1,40})\s*=\s*file\(__FILE__\);\s*if\(!function_exists\(\"([^\"]*)\"\)\)\{function\s*\2\((\$\w{1,40}),(\$\w{1,40})=\d+\)\{(\$\w{1,40})=implode\(\"[^\"]*\",\3\);(\$\w{1,40})=array\((\d+),(\d+),(\d+)\);if\(\4==0\)\s*(\$\w{1,40})=substr\(\5,\6\[\d+\],\6\[\d+\]\);elseif\(\4==1\)\s*\10=substr\(\5,\6\[\d+\]\+\6\[\d+\],\6\[\d+\]\);else\s*\10=trim\(substr\(\5,\6\[\d+\]\+\6\[\d+\]\+\6\[\d+\]\)\);return\s*\(\10\);\}\}\s*eval\(base64_decode\(\2\(\1\)\)\);\s*eval\(\w{1,40}\(\2\(\1\s*,\s*2\)\s*,\s*\2\(\1\s*,\s*1\)\)\);\s*__halt_compiler\(\);~msi', "i\x64" => "z\x65\x75r\x61", ], [ "f\x75\x6cl" => '~<\?php\s*(\$\w{1,40})\s*=\s*file\(__FILE__\);\s*function\s(\w{1,50})\((\$\w{1,50}),(\$\w{1,50})\){(\$\w{1,50})=array\(\d+,\d+,\d+,(\d+)\);if\(\4==\d+\){(\$\w{1,50})=substr\(\3,\5\[0\]\+\5\[1\],\5\[2\]\);}elseif\(\4==\d+\){\7=substr\(\3,\5\[0\],\5\[1\]\);}elseif\(\4==\d+\){\7=trim\(substr\(\3,\5\[0\]\+\5\[1\]\+\5\[2\]\)\);}return\7;}eval\(base64_decode\(\2\(\1\[0\],\d+\)\)\);eval\(\w{1,50}\(\2\(\1\[0\],\d+\),\2\(\1\[0\],41\),\1\)\);__halt_compiler\(\);[\w+=/]+~msi', "f\x61\x73t" => '~<\?php\s*(\$\w{1,40})\s*=\s*file\(__FILE__\);\s*function\s(\w{1,50})\((\$\w{1,50}),(\$\w{1,50})\){(\$\w{1,50})=array\(\d+,\d+,\d+,(\d+)\);if\(\4==\d+\){(\$\w{1,50})=substr\(\3,\5\[0\]\+\5\[1\],\5\[2\]\);}elseif\(\4==\d+\){\7=substr\(\3,\5\[0\],\5\[1\]\);}elseif\(\4==\d+\){\7=trim\(substr\(\3,\5\[0\]\+\5\[1\]\+\5\[2\]\)\);}return\7;}eval\(base64_decode\(\2\(\1\[0\],\d+\)\)\);eval\(\w{1,50}\(\2\(\1\[0\],\d+\),\2\(\1\[0\],41\),\1\)\);__halt_compiler\(\);~msi', "i\x64" => "z\x65\x75r\x61\x46o\x75\x72A\x72\x67s", ], [ "f\x75\x6cl" => '~(<\?php\s*/\* This file is protected by copyright law and provided under.*?\*/(?:\s*/\*.*?\*/\s*)+\$_[0O]+="(\w+)";.*?\$_[0O]+=__FILE__;.*?\$\w+=str_replace\("\\\\n","",\$\w+\);\$\w+=str_replace\("\\\\r","",\$\w+\);.*?function\s\w+\(\$\w+,\$\w+\){\$\w+=md5\(\$\w+\)\.md5\(\$\w+\.\$\w+\);.*?\$\w+=strlen\(\$\w+\);for\(\$\w+=0;\$\w+<strlen\(\$\w+\);\$\w+\+\+\){\$\w+\.=\s?chr\(ord\(\$\w+\[\$\w+\]\)\^ord\(\$\w+\[\$\w+%\$\w+\]\)\);}return\s\$\w+;}eval\(\w+\(\w+\("([^"]+)"\),\$\w+\)\);eval\(\w+\(\$\w+\)\);exit\(\);\?)>[^"\']+~msi', "i\x64" => "e\x76\x61l\x46\x69l\x65\x43o\x6e\x74e\x6e\x74B\x79\x53i\x7a\x65", ], [ "f\x75\x6cl" => '~<\?php\s*(eval(?:\(\w+)+\((substr\(file_get_contents\(__FILE__\),\s?(\d+)\))\)+;)\s*__halt_compiler\(\);\s*[\w+/]+~msi', "i\x64" => "e\x76\x61l\x46\x69l\x65\x43o\x6e\x74e\x6e\x74O\x66\x66s\x65\x74", ], [ "f\x75\x6cl" => '~(\$\w+)\s*=\s*base64_decode\(((?:(?|[\'"][\w=]+[\'"]|chr\(\d+\))\.?)+)\);(\$\w+)\s*=\s*base64_decode\(((?:(?|[\'"][\w=]+[\'"]|chr\(\d+\))\.?)+)\);(\$\w+)\s*=\s*base64_decode\(((?:(?|[\'"][\w=]+[\'"]|chr\(\d+\))\.)[^;]+)\);(\1\((\(-(\d+)-\(-\9\)\))\);@set_time_limit\((\(-(\d+)-\(-\11\)\))\);)eval\(base64_decode\(((?:(?|[\'"]\d+[\'"]|chr\(\d+\))\.?)+)\)\.gzinflate\(str_rot13\(\3\(\5\){4};~msi', "f\x61\x73t" => '~@set_time_limit\((\(-(\d+)-\(-\2\)\))\);eval\(base64_decode\(((?:(?|[\'"]\d+[\'"]|chr\(\d+\))\.?)+)\)\.gzinflate\(str_rot13\(\$\w+\(\$\w+\){4};~msi', "i\x64" => "e\x76\x61l\x43\x6fn\x63\x61t\x65\x64V\x61\x72s", ], [ "f\x75\x6cl" => '~(\$\{"[\\\\x47c2153fGLOBALS]+"\}\["[\w\\\\]+"\]="[\w\\\\]+";(\$\w+="\w+";)?){5,}.+\$\{"[\\\\x47c2153fGLOBALS]+"\}\["[\w\\\\]+"\].+?}+(?:exit;}+if\(@?file_exists\("[^"]+"\)+{include\("[^"]+"\);\}|==\(string\)\$\{\$\w+\}\)\s*\{\$\w+="[^"]+";\$\w+="[^"]+";\$\{\$\w+\}\.=\$\{\$\w+\};break;\}+eval\("[^"]+"\.gzinflate\(base64_decode\(\$\{\$\{"[^"]+"\}\["[^"]+"\]\}\)+;)?~msi', "i\x64" => "O\x62\x66_\x32\x302\x30\x306\x31\x38_\x31", ], [ "f\x75\x6cl" => '~(\$\w+\s?=\s?(\w+)\(\'\d+\'\);\s*)+\$\w+\s?=\s?new\s?\$\w+\(\2\(\'(\d+)\'\)+;\s?error_reporting\(0\);\s?eval\(\$\w+\(\$\w+->\$\w+\("([^"]+)"\)+;.+?function \2.+?return\s\$\w+;\s}~msi', "i\x64" => "a\x61\x6eK\x46\x4d", ], [ "f\x75\x6cl" => '~error_reporting\(\d\);@?set_time_limit\(\d\);(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];(\$\w{1,50})\s?=\s?[\'"]([^\'"]{0,100})[\'"];(\$\w{1,50}\s?=\s?[\'"][^\'"]{0,500}[\'"];)eval\(gzinflate\(base64_decode\(\3\)\)\);rebirth\(\);eval\(gzinflate\(base64_decode\(hate\(\1,\5\){4};~msi', "f\x61\x73t" => '~error_reporting\(\d\);@?set_time_limit\(\d\);(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];(\$\w{1,50})\s?=\s?[\'"]([^\'"]{0,100})[\'"];(\$\w{1,50}\s?=\s?[\'"][^\'"]{0,500}[\'"];)eval\(gzinflate\(base64_decode\(\$\w{1,50}\)\)\);rebirth\(\);eval\(gzinflate\(base64_decode\(hate\(\$\w{1,50},\$\w{1,50}\){4};~msi', "i\x64" => "e\x76\x61l\x4c\x6fv\x65\x48a\x74\x65F\x75\x6ec\x73", ], [ "f\x75\x6cl" => '~function\s?(\w+)\(\){\s?(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?\2\s?=\s?str_rot13\(\2\);\s?(\w+)\(\2\);\s?}\s?function\s?\4\((\$\w+)\){\s?(?:global\s?\$\w+;\s?)?\5\s?=\s?pack\([\'"]H\*[\'"],\5\);\s?(\$\w+)\s?=\s?[\'"]{2};\s?eval\(((?:\6|\5)\.?)+\);\s?}\s?\1\(\);~msi', "i\x64" => "e\x76\x61l\x50\x61c\x6b\x53t\x72\x72o\x74", ], [ "f\x75\x6cl" => '~error_reporting\(\d\);(?:\$\w+=[\'"]\w+[\'"];)?ini_set\([\'"]\w+[\'"],\d\);eval\(base64_decode\([\'"]([\w\+=]+)[\'"]\)\);\$\w+=str_split\([\'"]([}\w|,[=\'\.;\]&]+)[\'"]\);\$\w+=[\'"]{2};foreach\(\$\w+\s{0,50}as\s{0,50}\$\w+\){foreach\((\$\w+)\s{0,50}as\s{0,50}\$\w+\s{0,50}=>\s{0,50}\$\w+\){(?:\$\w+=[\'"]\w+[\'"];\$\w+=[\'"]\w+[\'"];)?if\(\$\w+\s{0,50}==\s{0,50}\(string\)\$\w+\){(?:\$\w+=[\'"]\w+[\'"];\$\w+=[\'"]\w+[\'"];)?\$\w+\s{0,50}\.=\s{0,50}\$\w+;break;}}}eval\([\'"]\?>[\'"]\.gzinflate\(base64_decode\(\$\w+\)\)\);~msi', "i\x64" => "e\x76\x61l\x41\x72r\x61\x79V\x61\x72", ], [ "f\x75\x6cl" => '~((\$\w+)\s*\.?=\s*"[^"]+";\s*)+eval\((\$\w+\s*\.?\s*)+\)~msi', "i\x64" => "e\x76\x61l\x56\x61r\x43\x6fn\x63\x61t", ], [ "f\x75\x6cl" => '~(?:\${"[^"]+"}\["[^"]+"\]="[^"]+";)+(?:\${\${"[^"]+"}\["[^"]+"\]}="[^"]+";)+(eval\(htmlspecialchars_decode\(urldecode\(base64_decode\(\${\${"[^"]+"}\["[^"]+"\]}\)\)\)\);)~msi', "i\x64" => "e\x76\x61l\x56\x61r\x53\x70e\x63\x69f\x69\x63", ], [ "f\x75\x6cl" => '~(?:(?:\$\w+=(?:chr\(\d+\)[;.])+)+\$\w+="[^"]+";(\$\w+)=(?:\$\w+[.;])+\s*)?(\$\w+)=\'([^\']+)\';((?:\s*\2=str_replace\(\'[^\']+\',\s*\'\w\',\s*\2\);\s*)+)(?(1)\s*\1\s*=\s*str_replace\(\'[^+]\',\s*\'[^\']+\',\s*\1\);\s*(\$\w+)\s*=\s*[^;]+;";\s*@?\1\(\s*str_replace\((?:\s*array\(\'[^\']+\',\s*\'[^\']+\'\),){2}\s*\5\)\s*\);|\s*\2=base64_decode\(\2\);\s*eval\(\2\);)~msi', "i\x64" => "e\x76\x61l\x56\x61r\x52\x65p\x6c\x61c\x65", ], [ "f\x75\x6cl" => '~((\$[^\s=.;]+)\s*=\s*\(?[\'"]([^\'"]+)[\'"]\)?\s*;?\s*)+\s*.{0,10}?(?:error_reporting\(\d\);|@set_time_limit\(\d\);|@|ini_set\([\'"]\w{1,99}[\'"],\s?\d\);\s?){0,5}(?:eval\s*\(|assert\s*\(|echo)\s*([\'"?>.\s]+)?\(?(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\(|convert_uudecode\s*\()+(\({0,1}[\s"\']?(\$[^\s=\'")]+)?(?:str_replace\((?:.+?,){3}\2?)?[\s"\']?\){0,1})(?:[\'"]?\)+;)+~msi', "i\x64" => "e\x76\x61l\x56\x61r", ], [ "f\x75\x6cl" => '~((?:(?:\$\w+=[\'"]\\\\[^\'"]+)[\'"];)+)@(eval\((?:"\?>"\.)?(?:\$\w+\()+[\'"]([^\'"]+)[\'"]\)+;)~msi', "i\x64" => "e\x76\x61l\x56\x61r\x53\x6ca\x73\x68e\x64", ], [ "f\x75\x6cl" => '~function\s*(\w{1,40})\((\$\w{1,40})\)\{(\$\w{1,40})=\'base64_decode\';(\$\w{1,40})=\'gzinflate\';return\s*\4\(\3\(\2\)\);\}\$\w{1,40}=\'[^\']*\';\$\w{1,40}=\'[^\']*\';eval\(\1\(\'([^\']*)\'\)\);~msi', "i\x64" => "e\x76\x61l\x46\x75n\x63", ], [ "f\x75\x6cl" => '~function\s*(\w{1,40})\s*\((\$\w{1,40})\)\s*\{\s*(\$\w{1,40})\s*=\s*"\\\\x62\\\\x61\\\\x73\\\\x65\\\\x36\\\\x34\\\\x5f\\\\x64\\\\x65\\\\x63\\\\x6f\\\\x64\\\\x65";\s*(\$\w{1,40})\s*=\s*"\\\\x67\\\\x7a\\\\x69\\\\x6e\\\\x66\\\\x6c\\\\x61\\\\x74\\\\x65";\s*return\s*\4\s*\(\3\s*\(\2\)\);\s*\}\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*eval\s*\(\1\s*\(\"([^\"]*)\"\)\);~msi', "i\x64" => "e\x76\x61l\x46\x75n\x63", ], [ "f\x75\x6cl" => '~(\$\w+)\s?=\s?[\'"]@?(([\w."]+\()+[\'"]([\w\/+]+)[\'"])\)+;[\'"]\s?;\s?(\$\w+)\s?=\s?([\w@."]+)\s?;\s?@?(\$\w+)\s?=\s\5\([\'"]+,\s?"\1;"\s?\);\7\([\'"]{2}\);~msi', "i\x64" => "e\x76\x61l\x43\x6fn\x63\x61t\x46\x75n\x63", ], [ "f\x75\x6cl" => '~function\sT_\((\$\w+)\)\s{\s(\$\w+)\s=\s256;\s(\$w2)\s=\s8;\s(\$\w+)\s=\sarray\(\);\s(\$\w+)\s=\s0;\s(\$\w+)\s=\s0;\sfor\s\((\$\w+)\s=\s0;\s\7\s<\sstrlen\(\1\);\s\7\+\+\)\s{\s\5\s=\s\(\5\s<<\s8\)\s\+\sord\(\1\[\7\]\);\s\6\s\+=\s8;\sif\s\(\6\s>=\s\3\)\s{\s\6\s-=\s\3;\s(\$\w+)\[\]\s=\s\5\s>>\s\6;\s\5\s&=\s\(1\s<<\s\6\)\s-\s1;\s\2\+\+;\sif\s\(\2\s>>\s\3\)\s{\s\3\+\+;\s}\s}\s}\s(\$\w+)\s=\srange\("\\\\x0",\s"\\\\377"\);\s(\$\w+)\s=\s\'\';\sforeach\s\(\4\sas\s\7\s=>\s(\$\w+)\)\s{\sif\s\(!isset\(\9\[\11\]\)\)\s{\s(\$\w+)\s=\s(\$\w+)\s\.\s\13\[0\];\s}\selse\s{\s\12\s=\s\9\[\11\];\s}\s\10\s\.=\s\12;\sif\s\(\7\)\s{\s\9\[\]\s=\s\13\s\.\s\12\[0\];\s}\s\13\s=\s\12;\s}\sreturn\s\10;\s}\s(\$_\w+)="[\w\\\\]+";eval\(T_\(\14\("(.*)"\)\)\);~mis', "f\x61\x73t" => '~function\sT_\((\$\w+)\)\s{\s(\$\w+)\s=\s256;\s(\$w2)\s=\s8;\s(\$\w+)\s=\sarray\(\);\s(\$\w+)\s=\s0;\s(\$\w+)\s=\s0;\sfor\s\((\$\w+)\s=\s0;\s\7\s<\sstrlen\(\1\);\s\7\+\+\)\s{\s\5\s=\s\(\5\s<<\s8\)\s\+\sord\(\1\[\7\]\);\s\6\s\+=\s8;\sif\s\(\6\s>=\s\3\)\s{\s\6\s-=\s\3;\s(\$\w+)\[\]\s=\s\5\s>>\s\6;\s\5\s&=\s\(1\s<<\s\6\)\s-\s1;\s\2\+\+;\sif\s\(\2\s>>\s\3\)\s{\s\3\+\+;\s}\s}\s}\s(\$\w+)\s=\srange\("\\\\x0",\s"\\\\377"\);\s(\$\w+)\s=\s\'\';\sforeach\s\(\4\sas\s\7\s=>\s(\$\w+)\)\s{\sif\s\(!isset\(\9\[\11\]\)\)\s{\s(\$\w+)\s=\s(\$\w+)\s\.\s\13\[0\];\s}\selse\s{\s\12\s=\s\9\[\11\];\s}\s\10\s\.=\s\12;\sif\s\(\7\)\s{\s\9\[\]\s=\s\13\s\.\s\12\[0\];\s}\s\13\s=\s\12;\s}\sreturn\s\10;\s}\s(\$_\w+)="[\w\\\\]+";eval\(T_\(\14\("(.*)"\)\)\);~mis', "i\x64" => "e\x76\x61l\x46\x75n\x63\x46u\x6e\x63", ], [ "f\x75\x6cl" => '~(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w+)\s?=\s?bin2hex\(\5\);\s?(\$\w+)\s?=\s?hex2bin\(\7\);\s*(?:eval\()+[\'"]\?>[\'"]\.\1\(\3\(\8\)+;~msi', "i\x64" => "e\x76\x61l\x42\x69n\x48\x65x\x56\x61r", ], [ "f\x75\x6cl" => '~((?:(?:\${"(?:\w{0,10}?\\\\x\w{1,10}){1,100}"}\["\w{0,10}?(?:\\\\x\w{1,10}){1,100}"\]|\$\w+)\s*=\s*[\'"][^\'"]+["\'];)+.*?define.*?)(?:\${)?\$\w{1,50}}?\s*=\s*array\(array\(([\'"][^\)]+[\'"])\)\);(.*?create_function\(.*?array_walk\((?:\${\${"(?:\\\\x\w{1,10}){1,10}"}\["(?:\\\\x\w{1,10}){1,10}"\]}|(?:\${)?\$\w+}?),\s*(?:\${\${"\w?(?:\\\\x\w{1,10}){1,10}"}\["(?:\w?\\\\x\w{1,10}){1,20}"\]}|\$\w+)\);)~msi', "f\x61\x73t" => '~create_function\([\'"][^"\']+[\'"],\s*(?:[\'"][^"\']+[\'"]\.?)+.*?\);\s*\$[^=]+=\s*array_walk\((?:\${\${"(?:\\\\x\w{1,10}){1,10}"}\["(?:\\\\x\w{1,10}){1,10}"\]}|(?:\${)?\$\w+}?),\s*(?:\${\${"\w?(?:\\\\x\w{1,10}){1,10}"}\["(?:\w?\\\\x\w{1,10}){1,20}"\]}|\$\w+)\);~msi', "i\x64" => "e\x76\x61l\x41\x72r\x61\x79W\x61\x6ck\x46\x75n\x63" ], [ "f\x75\x6cl" => '~(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s*eval\([\'"]\?>[\'"]\s?\.\s?base64_decode\(strtr\(substr\(\1\s?,(\d+)\*(\d+)\)\s?,\s?substr\(\1\s?,(\d+)\s?,\s?(\d+)\)\s?,\s*substr\(\s?\1\s?,\s?(\d+)\s?,\s?(\d+)(?:\s?\))+;~msi', "i\x64" => "e\x76\x61l\x53\x75b\x73\x74r\x56\x61l" ], [ "f\x75\x6cl" => '~(\$\w{1,50})=[\'"]([^\'"]+)[\'"];\s?\1\s?=\s?base64_decode\(\1\);\s?eval\(gzinflate\(str_rot13\(\1\)+;~msi', "i\x64" => "e\x76\x61l\x47\x7aS\x74\x72R\x6f\x74B\x36\x34", ], [ "f\x75\x6cl" => '~(preg_replace\(["\'](?:/\.\*?/[^"\']+|[\\\\x0-9a-f]+)["\']\s*,\s*)[^\),]+(?:[\)\\\\0-5]+;[\'"])?(,\s*["\'][^"\']*["\'])\)+;~msi', "i\x64" => "e\x76\x61l", ], [ "f\x75\x6cl" => '~(\$\w{1,40})\s*=\s*[\'"]([^\'"]*)[\'"]\s*;\s*(\$\w{1,40}\s*=\s*(strtolower|strtoupper)\s*\((\s*\1[\[\{]\s*\d+\s*[\]\}]\s*\.?\s*)+\);\s*)+\s*if\s*\(\s*isset\s*\(\s*\$\{\s*\$\w{1,40}\s*\}\s*\[\s*[\'"][^\'"]*[\'"]\s*\]\s*\)\s*\)\s*\{\s*eval\s*\(\s*\$\w{1,40}\s*\(\s*\$\s*\{\s*\$\w{1,40}\s*\}\s*\[\s*[\'"][^\'"]*[\'"]\s*\]\s*\)\s*\)\s*;\s*\}\s*~msi', "i\x64" => "e\x76\x61l\x49\x6ej\x65\x63t", ], [ "f\x75\x6cl" => '~((\$\w+)\s*=\s*(([base64_decode\'\.\s]+)|([eval\'\.\s]+)|([create_function\'\.\s]+)|([stripslashes\'\.\s]+)|([gzinflate\'\.\s]+)|([strrev\'\.\s]+)|([str_rot13\'\.\s]+)|([gzuncompress\'\.\s]+)|([urldecode\'\.\s]+)([rawurldecode\'\.\s]+));\s*)+\$\w+\s*=\s*\$\w+\(\'\',(\s*\$\w+\s*\(\s*)+\'[^\']+\'\)+;\s*\$\w+\(\);~msi', "f\x61\x73t" => '~\$\w+\s*=\s*\$\w+\(\'\',(\s*\$\w+\s*\(\s*)+\'[^\']+\'\)+;\s*\$\w+\(\);~msi', "i\x64" => "c\x72\x65a\x74\x65F\x75\x6ec\x43\x6fn\x63\x61t", ], [ "f\x75\x6cl" => '~(\$\w+)\s*=\s*base64_decode\("([^"]+)"\);(\1\s*=\s*ereg_replace\("([^"]+)","([^"]+)",\1\);)+\1=base64_decode\(\1\);eval\(\1\);~msi', "i\x64" => "e\x76\x61l\x45\x72e\x67\x52e\x70\x6ca\x63\x65", ], [ "f\x75\x6cl" => '~((\$\w+)\s*=\s*(([base64_decode"\'\.\s]+)|([eval"\'\.\s]+)|([create_function"\'\.\s]+)|([stripslashes"\'\.\s]+)|([gzinflate"\'\.\s]+)|([strrev"\'\.\s]+)|([str_rot13"\'\.\s]+)|([gzuncompress"\'\.\s]+)|([urldecode"\'\.\s]+)([rawurldecode"\'\.\s]+));\s*)+\s*@?eval\(\$[^)]+\)+;~msi', "i\x64" => "e\x76\x61l\x57\x72a\x70\x56a\x72", ], [ "f\x75\x6cl" => '~(?:\$\{"[^"]+"\}\["[^"]+"\]="[^"]+";)+(?:\$\{\$\{"[^"]+"\}\["[^"]+"\]\}="[^"]+";)+@?eval\s*\(\s*([\'"?>.]+)?@?\s*(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+\(?\$\{\$\{"[^\)]+\)+;~msi', "i\x64" => "e\x73\x63a\x70\x65s", ], [ "f\x75\x6cl" => '~(\$\w+)\s*=(?:\s*(?:(?:["\'][a-z0-9][\'"])|(?:chr\s*\(\d+\))|(?:[\'"]\\\\x[0-9a-f]+[\'"]))\s*?\.?)+;\s*(\$\w+)\s*=(?:\s*(?:(?:["\'][a-z0-9][\'"])|(?:chr\s*\(\d+\))|(?:[\'"]\\\\x[0-9a-f]+[\'"]))\s*?\.?)+;\s*@?\1\s*\(@?\2\s*\([\'"]([^\'"]+)[\'"]\)+;~msi', "i\x64" => "a\x73\x73e\x72\x74", ], [ "f\x75\x6cl" => '~eval\s*\(str_rot13\s*\([\'"]+\s*(?:.+(?=\\\\\')\\\\\'[^\'"]+)+[\'"]+\)+;~msi', "i\x64" => "e\x76\x61l\x43\x6fd\x65\x46u\x6e\x63", ], [ "f\x75\x6cl" => '~\$\{"G\x4c\x4fB\x41\x4cS"\}\[[\'"](\w+)[\'"]\]=["\'](\w+)[\'"];\$\{"G\x4c\x4fB\x41\x4cS"\}\[[\'"](\w+)[\'"]\]=["\']\2[\'"];\${\$\{"G\x4c\x4fB\x41\x4cS"\}\[[\'"]\3[\'"]\]}=[\'"]([^\'"]+)[\'"];eval.{10,50}?\$\{\$\{"G\x4c\x4fB\x41\x4cS"\}\[[\'"]\1[\'"]\]\}\)+;~msi', "i\x64" => "e\x76\x61l\x56\x61r\x56\x61r", ], [ "f\x75\x6cl" => '~(\$\w+)=[\'"][^"\']+[\'"];(\$\w+)=strrev\(\'edoced_46esab\'\);eval\(\2\([\'"][^\'"]+[\'"]\)+;~msi', "i\x64" => "e\x64\x6fc\x65\x64_\x34\x36e\x73\x61b", ], [ "f\x75\x6cl" => '~(\$\w+)=strrev\([\'"](?:|ed|oc|_|4|6|es|ab|(?:"\."))+[\'"]\);\s*(\$\w+)=strrev\([\'"](?:|et|al|fn|iz|g|(?:"\."))+[\'"]\);\s?@?eval\(\2\(\1\([\'"]([\w\/\+=]+)[\'"]\)\)\);~msi', "i\x64" => "e\x64\x6fc\x65\x64_\x34\x36e\x73\x61b\x5f\x65t\x61\x6cf\x6e\x69z\x67", ], [ "f\x75\x6cl" => '~(\$\w+)\s*=\s*"((?:[^"]|(?<=\\\\)")*)";(\$\w+)\s*=\s*(\1\[\d+\]\.?)+;(\$\w+)\s*=\s*[^;]+;(\$\w+)\s*=\s*"[^"]+";\$\w+\s*=\s*\5\."[^"]+"\.\6;\3\((\1\[\d+\]\.?)+,\s*\$\w+\s*,"\d+"\);~smi', "f\x61\x73t" => '~(\$\w+)\s*=\s*"((?:[^"]|(?<=\\\\)"){0,1000})";(\$\w+)\s*=\s*(\1\[\d+\]\.?)+;(\$\w+)\s*=\s*[^;]+;(\$\w+)\s*=\s*"[^"]+";\$\w+\s*=\s*\5\."[^"]+"\.\6;\3\((\1\[\d+\]\.?)+,\s*\$\w+\s*,"\d+"\);~smi', "i\x64" => "e\x76\x61l\x32", ], [ "f\x75\x6cl" => '~(?:\${"\\\\x[\\\\\w]+"}\["\\\\x[\\\\\w]+"\]\s?=\s?"[\w\\\\]+";){1,10}\${\${"\\\\x[\\\\\w]+"}\["[\\\\\w]+"\]}\s?=\s?"\w{1,100}";\${\${\${"\\\\x[\\\\\w]+"}\["[\\\\\w]+"\]}\s?}="(\\\\x[^"]+)";eval\(((?|str_rot13\(|gzinflate\(|base64_decode\(){1,10})\(\${\${"\\\\x[\\\\\w]+"}\["[\\\\\w]+"\]}\){1,5};~msi', "i\x64" => "e\x76\x61l\x45\x73c\x61\x70e\x64\x43h\x61\x72s\x43\x6fn\x74\x65n\x74", ], [ "f\x75\x6cl" => '~@?(eval|echo|(\$\w+)\s*=\s*create_function)(?:\/\*+\/)?\s*\((\'\',)?\s*([\'"][?>\s]+[\'".\s]+)?\s*\(?\s*@?\s*(?:base64_decode\s*\(|pack\s*\(\'H\*\',|convert_uudecode\s*\(|htmlspecialchars_decode\s*\(|gzdecode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|unserialize\s*\(|eval\s*\(|hex2bin\()+.*?[^\'");]+((\s*\.?[\'"]([^\'";]+[\'"]*\s*)+|,\s*true)?\s*[\'"\)]+)+\s*;?(\s*\2\(\);)?~msi', "i\x64" => "e\x76\x61l", ], [ "f\x75\x6cl" => '~eval\s*/\*[\w\s\.:,]+\*/\s*\([^\)]+\)+;~msi', "f\x61\x73t" => '~eval\s*/\*[\w\s\.:,]+\*/\s*\(~msi', "i\x64" => "e\x76\x61l", ], [ "f\x75\x6cl" => '~((?:\$\w+\s?=\s?(?:base64_decode|str_rot13)\([\'"][^\'"]+[\'"]\);)+)\s?(@?eval\((?:(?:\w+\()*\$\w+\(?)+(?:.*?)?\)+;)~msi', "i\x64" => "e\x76\x61l\x46\x75n\x63\x56a\x72\x73", ], [ "f\x75\x6cl" => '~eval\("\\\\145\\\\166\\\\141\\\\154\\\\050\\\\142\\\\141\\\\163[^\)]+\)+;~msi', "f\x61\x73t" => '~eval\("\\\\145\\\\166\\\\141\\\\154\\\\050\\\\142\\\\141\\\\163~msi', "i\x64" => "e\x76\x61l\x48\x65x", ], [ "f\x75\x6cl" => '~eval\s*\("\\\\x?\d+[^\)]+\)+;(?:[\'"]\)+;)?~msi', "f\x61\x73t" => '~eval\s*\("\\\\x?\d+~msi', "i\x64" => "e\x76\x61l\x48\x65x", ], [ "f\x75\x6cl" => '~(\$\w+)\s=\s(["\']?[\w\/\+]+["\']?);\s(\$\w+)\s=\s((?:str_rot13\(|rawurldecode\(|convert_uudecode\(|gzinflate\(|str_rot13\(|base64_decode\(|rawurldecode\(|)+\1\)\)+);\secho\s(eval\(\3\);)~msi', "i\x64" => "e\x63\x68o\x45\x76a\x6c", ], [ "f\x75\x6cl" => '~if\(!function_exists\([\'"](\w+)[\'"]\)\){function\s?\1\((\$\w+)\){(\$\w+)=array\((?:\'(\d+)\',)?\'([^\']+)\',\'([^\']+)\',\2\);for\((\$\w+)=0;\7<[34];\7\+\+\){for\((\$\w+)=0;\8<strlen\(\3\[\7\]\);\8\+\+\)\s?\3\[\7\]\[\8\]\s?=\s?chr\(ord\(\3\[\7\]\[\8\]\)-(?:\(\7\?\3\[\8\s?xor\s?\8\]:1\)|1)\);if\(\7==[21]\)\s?\3\[[32]\]=\3\[[01]\]\(\3\[[21]\]\(\3\[[32]\]\)\);}\s?return\s?\3\[[32]\];}(\$\w+)=["\']([\w\+\/=]+)["\'];(\$\w+)=[\'"]\1[\'"];(\$\w+)=\11\([\'"]([^\'"]+)[\'"]\);\$\w+=@?\12\(\'\',\11\(\9\)\);\$\w+\(\);}~msi', "i\x64" => "e\x76\x61l\x43\x72e\x61\x74e\x46\x75n\x63", ], [ "f\x75\x6cl" => '~(\$\w{1,1000})=[\'"]([\'"\w/\+=]+)[\'"];(\$\w{1,3000}=(?:base64_decode|gzinflate|convert_uudecode|str_rot13)\(\$\w{1,3000}\);){1,100}eval\((\$\w{1,3000})\);~msi', "i\x64" => "e\x76\x61l\x41\x73s\x69\x67n\x65\x64V\x61\x72s", ], [ "f\x75\x6cl" => '~(?:\$_{1,50}\s*=\s*[^;]{2,200}\s*;\s*)+(?:\$_{1,50}\s*=\s*\$_{1,50}\([^\)]+\);\s*|(?:if\(!function_exists\(\'[^\']+\'\)\){function\s\w{1,50}\(\$\w{1,50},\$\w{1,50}\){return\s?eval\("return function\(\$\w{1,50}\){{\$\w{1,50}}};"\);}}\s*)?)+(?:\$_{1,50}\s*=\s*\'[^\']+\';\s*)?(?:\s*(\$_{1,50}\s*=\s*)?\$_+\([^)]*\)+;\s*)+(?:echo\s*\$_{1,50};)?~msi', "i\x64" => "s\x65\x6fl\x79\x7ae\x72", ], [ "f\x75\x6cl" => '~(\$\w+)="((?:[^"]|(?<=\\\\)")*)";(\s*\$GLOBALS\[\'\w+\'\]\s*=\s*(?:\${)?(\1\[\d+\]}?\.?)+;\s*)+(.{0,400}\s*\1\[\d+\]\.?)+;\s*}~msi', "f\x61\x73t" => '~(\$\w+)="((?:[^"]|(?<=\\\\)"){0,1000})";(\s*\$GLOBALS\[\'\w+\'\]\s*=\s*(?:\${)?(\1\[\d+\]}?\.?)+;\s*)+(.{0,400}\s*\1\[\d+\]\.?)+;\s*}~msi', "i\x64" => "s\x75\x62s\x74\x32", ], [ "f\x75\x6cl" => '~(\$\w{1,50}\s*=\s*"[^"]{1,1000}";\s*)+(\$\w{1,50}\s*=\s*\$?\w{1,50}\("\w{1,50}"\s*,\s*""\s*,\s*"\w{1,50}"\);\s*)+\$\w{1,50}\s*=\s*\$\w{1,50}\("",\s*\$\w{1,50}\(\$\w{1,50}\("\w{1,50}",\s*"",(\s*\$\w{1,50}\.?)+\)+;\$\w{1,50}\(\);~msi', "i\x64" => "s\x74\x72r\x65\x70l\x61\x63e", ], [ "f\x75\x6cl" => '~\$\w{1,50}\s?=\s?(?:\'[^\']{1,500}\'|"[^}]{1,500}}");\s?\$\w{1,50}\s?=\s?str_replace\([\'"]\w{1,50}[\'"],\s?[\'"][\'"],\s?["\']\w{1,100}[\'"]\);\s?(?:\$\w{1,50}\s?=\s?(?:\'[^\']{1,500}\'|"[^\s]{1,500}?");\s){1,15}.*?\$\w{1,50}\s?=\s?str_replace\((?:\'[^\']{1,100}\'|"[^"]{1,100}?"),\s?\'\',\s?(?:\$\w{1,50}\s?\.?\s?){1,50}\);\s?\$\w{1,50}\s?=\s?\$\w{1,50}\(\'\',\s?\$\w{1,50}\);\s?\$\w{1,50}\(\);~msi', "i\x64" => "s\x74\x72r\x65\x70l\x61\x63e", ], [ "f\x75\x6cl" => '~@?echo\s*([\'"?>.\s]+)?@?\s*(base64_decode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+[\s\/\'"].*?[^\'")]+((\s*\.?[\'"]([^\'";\$]+\s*)+)?\s*[\'"\);]+)+~msi', "i\x64" => "e\x63\x68o", ], [ "f\x75\x6cl" => '~(\$\w+)="([^"]+)";\s*(\$\w+)=strtoupper\s*\((\1\[\d+\]\s*\.?\s*)+\)\s*;\s*if\(\s*isset\s*\(\${\s*\3\s*}\[\d*\s*\'\w+\'\s*\]\s*\)\s*\)\s*{eval\(\${\3\s*}\[\'\w+\']\s*\)\s*;}~smi', "f\x61\x73t" => '~(\$\w+)="([^"]+)";\s*(\$\w+)=strtoupper\s*\((\1\[\d+\]\s*\.?\s*)+\)\s*;\s*if\(\s*isset\s*\(\${\s*\3\s*}\[\d*\s*\'\w+\'\s*\]\s*\)\s*\)\s*{eval\(\${\3\s*}\[\'\w+\']\s*\)\s*;}~smi', "i\x64" => "s\x74\x72t\x6f\x75p\x70\x65r", ], [ "f\x75\x6cl" => '~(\$\w+)="[^"]+";\s*(\$\w+)=str_ireplace\("[^"]+","",\1\);(\$\w+)\s*=\s*"[^"]+";\s*function\s*(\w+)\((\$\w+,?)+\){\s*(\$\w+)=\s*create_function\(\'\',\$\w+\);\s*array_map\(\6,array\(\'\'\)+;\s*}\s*set_error_handler\(\'\4\'\);(\$\w+)=\2\(\3\);user_error\(\7,E_USER_ERROR\);\s*if\s*.+?}~msi', "i\x64" => "e\x72\x72o\x72\x48a\x6e\x64l\x65\x72", ], [ "f\x75\x6cl" => '~(\$\w+)=strrev\(str_ireplace\("[^"]+","","[^"]+"\)\);(\$\w+)="([^"]+)";eval\(\1\(\2\)+;}~msi', "i\x64" => "e\x76\x61l\x49\x52e\x70\x6ca\x63\x65", ], [ "f\x75\x6cl" => '~error_reporting\((?:0|E_ALL\^E_NOTICE)\);ini_set\("d\x69\x73p\x6c\x61y\x5f\x65r\x72\x6fr\x73",\s*[01]\);if\(!defined\(\'(\w+)\'\)\){define\(\'\1\',__FILE__\);if\(!function_exists\("([^"]+)"\)\){function [^(]+\([^\)]+\).+?eval\(""\);.+?;}?eval\(\$[^\)]+\)\);[^\)]+\)+.*?;return\s*\$[^;]+;\s*\?>([^;]+);~msi', "i\x64" => "P\x48\x50J\x69\x61M\x69", ], [ "f\x75\x6cl" => '~\$\w+=0;(\$GLOBALS\[\'\w+\'\])\s*=\s*\'([^\']+)\';\s*(\$\w+)=pack\(\'H\*\',substr\(\1,\s*([-\d]+)\)\);if\s*\(!function_exists\(\'(\w+)\'\)\){function\s*\5\(\$\w+,\s*\$\w+\){\$\w+=\1;\s*\$d=pack\(\'H\*\',substr\(\1,\s*\4\)\);\s*return\s*\$\w+\(substr\(\$\w+,\s*\$\w+,\s*\$\w+\)\);}};eval\(\3\(\'[^\']+\'\)\);~msi', "i\x64" => "s\x75\x62s\x74\x72", ], [ "f\x75\x6cl" => '~(function\s*(\w+)\((\$\w+)\){\s*return\s*(base64_decode|gzinflate|eval)\(\$\w+(,\d+)?\);}\s*)+(\$\w+)="([^"]+)";(\w+\()+\6\)+~msi', "i\x64" => "f\x75\x6ec\x73", ], [ "f\x75\x6cl" => '~(?:\$\{\'GLOBALS\'\}\[\'\w+\'\]=\'_F\';)?\$(?:_F|\{\$\{\'GLOBALS\'\}\[\'\w+\'\]\})=_{1,2}(?:FILE|hex)_{1,2};(?:\$\{\'GLOBALS\'\}\[\'\w+\'\]=\'_X\';)?\$(?:_X|\{\$\{\'GLOBALS\'\}\[\'\w+\'\]\})=["\']([^\'"]+)[\'"];\s*(?:\$[_\w]+\.=[\'"][\w\+\/=]+[\'"];){0,30}\$_\w+=base64_decode\(\$_X\);\$_X=strtr\(\$_X,\'([^\']+)\',\'([^\']+)\'\);\$_R=@?(?:(str_replace)|(ereg_replace)|(preg_replace))\(\'\~?__FILE__\~?\',"\'".\$_F."\'",\$_X\);eval\(\$_R\);\$_R=0;\$_X=0;~msi', "f\x61\x73t" => '~\$_\w+=base64_decode\(\$_X\);\$_X=strtr\(\$_X,\'([^\']+)\',\'([^\']+)\'\);\$_R=@?(?:(str_replace)|(ereg_replace)|(preg_replace))\(\'\~?__FILE__\~?\',"\'".\$_F."\'",\$_X\);eval\(\$_R\);\$_R=0;\$_X=0;~msi', "i\x64" => "L\x6f\x63k\x49\x742", ], [ "f\x75\x6cl" => '~(?:@error_reporting\(\d+\);\s*@set_time_limit\(\d+\);)?\s*(\$\w+)=([\s\'\w\/+=]+);\s*(\$\w+)=(__FILE__);\s*\1=gzinflate\(str_rot13\(base64_decode\(\$tr\)\)\);\1=strtr\(\1,\'([^\']+)\'\s*,\'([^\']+)\'\);(\$_R)=@?ereg_replace\(\'\~?\4\~?\',"\'".\3."\'",\1\);eval\(\7\);\7=0;\1=0;~msi', "f\x61\x73t" => '~(\$\w+)=([\s\'\w\/+=]+);\s*(\$\w+)=(__FILE__);\s*\1=\w+\(\w+\(\w+\(\$tr\)\)\);\1=\w+\(\1,\'([^\']+)\'\s*,\'([^\']+)\'\);(\$_R)=@?\w+\(\'\~?\4\~?\',"\'".\3."\'",\1\);\w+\(\7\);\7=0;\1=0;~msi', "i\x64" => "a\x6e\x61s\x6b\x69", ], [ "f\x75\x6cl" => '~\$\w+="[^"]+";\$l+=0;\$l+=\'base64_decode\';\$l+=0;eval\([^\^]+\^[\dx]+\);}eval\(\$l+\("[^"]+"\)+;eval\(\$l+\);return;~msi', "i\x64" => "c\x75\x73t\x6f\x6d1", ], [ "f\x75\x6cl" => '~(\$\w+)\s*=\s*"(\w{32})";\s*(\$\w+)\s*=\s*array\s*\(\);\s*(\3\[\d+\]\s*=\s*"[^"]+";\s*)+\s*(\$\w+)\s*=\s*"b\x61\x73e\x36\x34_\x64\x65c\x6f\x64e";\s*\$\w+\s*=\s*(\w+)\s*\(\3,\1\);function\s*\6\(\s*.{200,500}return\s*\$\w+;\s*}\s*eval\s*\(\5\s*\(\$\w+\)\);~msi', "i\x64" => "c\x75\x73t\x6f\x6d2", ], [ "f\x75\x6cl" => '~\$\w+=\'=+\s*Obfuscation provided by Unknowndevice64 - Free Online PHP Obfuscator\s*(?:http://www\.ud64\.com/)?\s*=+\';\s*(\$ud64_c[o0]m="[\\\\0-9a-z\."]+;)+\$\w+=(\$ud64_c[o0]m\()+"([^"]+)"\)+;@eval\(\$ud64_c[o0]m\(\'[^\']+\'\)+;~msi', "i\x64" => "u\x64\x364", ], [ "f\x75\x6cl" => '~(\$[\w_]+=("[\\\\\\\\\w]+"\.?)+;)+\$\w+=(?:\$\w+\()+"([\w\/\+=]+)"\)+;@eval\(\$\w+\(\'.*?\'\)+;~msi', "i\x64" => "u\x64\x364", ], [ "f\x75\x6cl" => '~\$\w+=__FILE__;\$\w+=fopen\(\$\w+,\'rb\'\);fread\(\$\w+,(\d+)\);\$\w+=explode\("\\\\t",base64_decode\(fread\(\$\w+,(\d+)\)+;\$\w+=\$\w+\[[\d+]\];[\$l1=\d{}\.;\(\)\[\]]+eval\(\$\w+\(\'[^\']+\'\)+;\s*return\s*;\?>[\w=\+]+~msi', "i\x64" => "q\x69\x62o\x73\x6ff\x74", ], [ "f\x75\x6cl" => '~(\$\w+)=base64_decode\("([^"]+)"\);\s*eval\("return\s*eval\(\\\\"\1\\\\"\);"\)~msi', "i\x64" => "e\x76\x61l\x52\x65t\x75\x72n", ], [ "f\x75\x6cl" => '~(?:\$[0O]+\[[\'"](\w+)[\'"]\]\.?="[\\\\\w]+";)+(?:\$[0O]+\[[\'"]\w+[\'"]\]\.?=\$[0O]+\[[\'"]\w+[\'"]\]\([\'"][\d\(]+[\'"](,__FILE__)?\);)+@eval\((?:\$[0O]+\[[\'"]\w+[\'"]\]\()+"([^"]+)"\)+;~mis', "f\x61\x73t" => '~(?:\$[0O]+\[[\'"](\w+)[\'"]\]\.?="[\\\\\w]+";)+(?:\$[0O]+\[[\'"]\w+[\'"]\]\.?=\$[0O]+\[[\'"]\w+[\'"]\]\([\'"][\d\(]+[\'"](,__FILE__)?\);)+@eval\((?:\$[0O]+\[[\'"]\w+[\'"]\]\()+"([^"]+)"\)+;~mis', "i\x64" => "e\x76\x61l\x43\x68a\x72\x73", ], [ "f\x75\x6cl" => '~<\?php\s+((\$GLOBALS\[\s*[\'"]\w+[\'"]\s*\])\s*=\s*base64_decode\("([^"]*)"\);)+\s*\?><\?php\s.+\2.+exit;\s}\sfunction\s\w+\(\)\s{\sreturn\sarray\(\s\'favicon\'\s=>\s\'[^\']+\',\s+\'sprites\'\s=>\s\'[^\']+\',\s\);\s}~msi', "i\x64" => "g\x6c\x6fb\x61\x6cs\x42\x61s\x65\x364", ], [ "f\x75\x6cl" => '~(\$\w+=strrev\("[^"]+"\);)+eval\((\$\w+\()+"[^"]+"\)+;~mis', "f\x61\x73t" => '~(\$\w+=strrev\("[^"]+"\);)+eval\((\$\w+\()+"[^"]+"\)+;~mis', "i\x64" => "s\x74\x72r\x65\x76V\x61\x72E\x76\x61l", ], [ "f\x75\x6cl" => '~\$\w+=basename/\*\w+\*/\(/\*\w+\*/trim/\*\w+\*/\(.+?(\$\w+)=.+\1.+?;~msi', "i\x64" => "c\x6f\x6dm\x65\x6et\x73", ], [ "f\x75\x6cl" => '~(\$\w+)\s*=\s*(base64_decode\s*\(+|gzinflate\s*\(+|strrev\s*\(+|str_rot13\s*\(+|gzuncompress\s*\(+|convert_uudecode\s*\(+|urldecode\s*\(+|rawurldecode\s*\(+|htmlspecialchars_decode\s*\(+)+"([^"]+)"\)+;\s*@?eval\(([\'"?>.\s]+)?\1\);~', "f\x61\x73t" => '~(\$\w+)\s*=\s*(base64_decode\s*\(+|gzinflate\s*\(+|strrev\s*\(+|str_rot13\s*\(+|gzuncompress\s*\(+|convert_uudecode\s*\(+|urldecode\s*\(+|rawurldecode\s*\(+|htmlspecialchars_decode\s*\(+)+"([^"]+)"\)+;\s*@?eval\(([\'"?>.\s]+)?\1\);~', "i\x64" => "v\x61\x72F\x75\x6ec\x73\x45v\x61\x6c", ], [ "f\x75\x6cl" => '~((\$\w+)="";\$\w+\s*\.=\s*"[^;]+;\s*)+(?:="";)?eval\((\s*\$\w+\s*\.)+\s*"[^"]+(?:"\);)+~msi', "i\x64" => "e\x76\x61l\x43\x6fn\x63\x61t\x56\x61r\x73", ], [ "f\x75\x6cl" => '~<\?php\s*defined\(\'[^\']+\'\)\s*\|\|\s*define\(\'[^\']+\',__FILE__\);(global\s*\$[^;]+;)+\s*(if\(!function_exists\(\'([^\']+)\'\)\){\s*function\s*[^\)]+\(\$[^,]+,\$[^=]+=\'\'\){\s*if\(empty\(\$[^\)]+\)\)\s*return\s*\'\';\s*\$[^=]+=base64_decode\(\$[^\)]+\);\s*if\(\$[^=]+==\'\'\)\s*return\s*\~\$[^;]+;\s*if\(\$[^=]+==\'-1\'\)\s*@[^\(]+\(\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^\)]+\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^,]+,\$[^,]+,\$[^\)]+\);\s*return\s*\$[^^]+\^\$[^;]+;\s*}}\s*)+(\$[^\[]+\["[^"]+"]=[^\(]+\(\'[^\']+\',\'[^\']*\'\);\s*)+(\$[^\[]+\[\'[^\']+\'\]=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\([^\)]*\)+;\s*)+return\(eval\(\$[^\[]+\[\'[^\']+\'\]\)+;\s*\?>\s*#!/usr/bin/php\s*-q\s*(\s*[^\s]+)+~msi', "f\x61\x73t" => '~<\?php\s*defined\(\'[^\']{10,30}\'\)\s*\|\|\s*define\(\'[^\']{10,30}\',__FILE__\);(global\s*\$[^;]{10,30};)+\s*if\(!function_exists\(\'([^\']+)\'\)\){\s*function\s*[^\)]+\(\$[^,]{10,30},\$[^=]{10,30}=\'\'\){\s*if\(empty\(\$[^\)]+\)\)\s*return\s*\'\';\s*\$[^=]{10,30}=base64_decode~msi', "i\x64" => "O\x45\x4co\x76\x65", ], [ "f\x75\x6cl" => '~(?:\$\w+\s*=(\s*(\d+)\+)*\d+;\s*)?(\$\w+="[^"]+";\s*)+\s*(?:\$\w+\s*=(?:\s*(?:\d+)\+)*\s*\d+;\s*)?(\$\w+)\s*=\s*\w+\(\'[^\']+\',\s*\$\w+,\s*\'[^\']+\'\);.+?\4\("[^"]+"\);\s*\$\w+\s*=\s*\4;\s*(\$\w+="[^"]+";\s*)+.+?\$\w+\(\$\w+,\$\w+\("",\s*\$\w+\(\$\w+\(\$\w+\(\$\w+\(\$\w+,\s*"(\d+)"\)+,\$\w+\);.+function \w+\((\$\w+),\s*\$\w+,\s(\$\w+)\)\s{\8\s=\s\8\s\.\s\8;.+return \7;\s*}~msi', "f\x61\x73t" => '~(\$\w+)\s*=\s*\w+\(\'[^\']+\',\s*\$\w+,\s*\'[^\']+\'\);.+?\1\("[^"]+"\);\s*\$\w+\s*=\s*\1;\s*(\$\w+="[^"]+";\s*)+~msi', "i\x64" => "O\x62\x66_\x32\x302\x30\x304\x30\x32_\x31", ], [ "f\x75\x6cl" => '~(?:\$\w+\s*=\s*"[^"]+";\s*)?(?:((?:\$\w+\s*=\s*\'[^\']+\';\s*)+)(\$\w+=(?:\$\w+\.?)+);)?function\s(\w+)\((\$\w+),\s*(\$\w+),\s*(\$\w+)\)\s*{\s*return\s*([\'\. ]*(\4|\5|\6)[\'\. ]*)+;\s*}\s*(?:\$\w+\s*=\s*"[^"]+";)?(\s*\$\w+\s*=\s*\3\((((\'\')|(\$\w+)|(\$\w+[\[\{]\d+[\]\}](\.\'\')?)|(\$\w+[\[\{]\d+[\]\}]\.\$\w+[\[\{]\d+[\]\}]))\s*,?\s*)+\);\s*)+\s*\$\w+\s*=\s*\3[^"]+[^\']+\'([^\']+)\'"[^/]+\'//\'\)+;~msi', "f\x61\x73t" => '~function\s(\w+)\((\$\w+),\s*(\$\w+),\s*(\$\w+)\)\s*{\s*return\s*([\'\. ]*(\2|\3|\4)[\'\. ]*)+;\s*}\s*(?:\$\w+\s*=\s*"[^"]+";)?(\s*\$\w+\s*=\s*\1\((((\'\')|(\$\w+)|(\$\w+[\[\{]\d+[\]\}](\.\'\')?)|(\$\w+[\[\{]\d+[\]\}]\.\$\w+[\[\{]\d+[\]\}]))\s*,?\s*)+\);\s*)+\s*\$\w+\s*=\s*\1[^"]+[^\']+\'([^\']+)\'"[^/]+\'//\'\)+;~msi', "i\x64" => "O\x62\x66_\x32\x302\x30\x304\x30\x32_\x32", ], [ "f\x75\x6cl" => '~(?:function\s*\w{1,50}\(\$\w{1,50},\s*\$\w{1,50}\)\s*\{(?:\s*\$\w{1,50}\s*=\s*(?:md5\(\$\w{1,50}\)|\d+|base64_decode\(\$\w{1,50}\)|strlen\(\$\w{1,50}\)|\'\');\s*)+\s*for\s*\(\$\w{1,50}\s*=\s\d+;\s*\$\w{1,50}\s*<\s*\$len;\s*\$\w{1,50}\+\+\)\s*\{\s*if\s*\(\$\w{1,50}\s*==\s*\$\w{1,50}\)\s*\{\s*\$\w{1,50}\s*=\s*\d+;\s*}\s*\$\w{1,50}\s*\.=\s*substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\);\s*\$\w{1,50}\+\+;\s*\}(?:\s*\$\w{1,50}\s*=\s*\'\';)?\s*for\s*\(\$\w{1,50}\s*=\s*\d+;\s*\$\w{1,50}\s*<\s*\$\w{1,50};\s*\$\w{1,50}\+\+\)\s*{\s*if\s*\(ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\s*<\s*ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\)\s*\{\s*\$\w{1,50}\s*\.=\s*chr\(\(ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\s*\+\s*\d+\)\s*-\s*ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\);\s*}\s*else\s*{\s*\$\w{1,50}\s*\.=\s*chr\(ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\s*-\s*ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\);\s*}\s*}\s*return\s*\$\w{1,50};\s*\}\s*|\$\w{1,50}\s*=\s*"([^"]+)";\s*){2}\s*\$\w{1,50}\s*=\s*"([^"]+)";\s*\$\w{1,50}\s*=\s*\w{1,50}\(\$\w{1,50},\s*\$\w{1,50}\);\s*eval\(\$\w{1,50}\);~msi', "i\x64" => "O\x62\x66_\x32\x302\x30\x304\x31\x34_\x31", ], [ "f\x75\x6cl" => '~(?:\$\w+\s*=\s*\'\w+\';)?\s*(\$\w+)\s*=\s*urldecode\(\'[%0-9a-f]+\'\);(\s*(\$\w+)\s*=(\s*\1\{\d+\}\.?)+;)+\s*(\$\w+)\s*=\s*"[^"]+"\.\3\("[^"]+"\);\s*eval\(\5\);~msi', "f\x61\x73t" => '~(\$\w+)\s*=\s*urldecode\(\'[%0-9a-f]+\'\);(\s*(\$\w+)\s*=(\s*\1\{\d+\}\.?)+;)+\s*(\$\w+)\s*=\s*"[^"]+"\.\3\("[^"]+"\);\s*eval\(\5\);~msi', "i\x64" => "O\x62\x66_\x32\x302\x30\x304\x32\x31_\x31", ], [ "f\x75\x6cl" => '~(\$\w+)=\'([^\']+)\';(\$\w+)=str_rot13\(gzinflate\(str_rot13\(base64_decode\(\1\)\)\)\);eval\(\3\);~msi', "i\x64" => "S\x6d\x61r\x74\x54o\x6f\x6cs\x53\x68o\x70", ], [ "f\x75\x6cl" => '~(\$\w+)\s*=\s*\("\?>"\.gzuncompress\(base64_decode\("[^"]+"\)\)\);\s*@?eval\(\1\);~msi', "i\x64" => "O\x62\x66_\x32\x302\x30\x305\x30\x34_\x31", ], [ "f\x75\x6cl" => '~(\$\w+)=base64_decode\(\'[^\']+\'\);\s*eval\(\1\);~mis', "f\x61\x73t" => '~(\$\w+)=base64_decode\(\'[^\']+\'\);\s*eval\(\1\);~mis', "i\x64" => "O\x62\x66_\x32\x302\x30\x305\x30\x37_\x31", ], [ "f\x75\x6cl" => '~(?:error_reporting\(0\);\s*ini_set\("m\x61\x78_\x65\x78e\x63\x75t\x69\x6fn\x5f\x74i\x6d\x65",0\);\s*(?:/\*.*?\*/)?\s*)?(\$\w+)=\s*\[(("."=>".",?\s*)+)];\s*(\$\w+)=str_split\("([^"]+)"\);\s*(?:\$\w+="";)?\s*foreach\(\4\s*as\s*(\$\w+)\)\s*{\s*foreach\(\s*\1\s*as\s*(\$\w+)=>(\$\w+)\)\s*{\s*if\(\6==\(string\)\8\)\s*\{\s*\$\w+\.=\7;\s*break;\s*}\s*}\s*}~msi', "f\x61\x73t" => '~(\$\w+)=\s*\[(("."=>".",?\s*)+)];\s*(\$\w+)=str_split\("([^"]+)"\);\s*(?:\$\w+="";)?\s*foreach\(\4\s*as\s*(\$\w+)\)\s*{\s*foreach\(\s*\1\s*as\s*(\$\w+)=>(\$\w+)\)\s*{\s*if\(\6==\(string\)\8\)\s*\{\s*\$\w+\.=\7;\s*break;\s*}\s*}\s*}~msi', "i\x64" => "O\x62\x66_\x32\x302\x30\x305\x30\x37_\x34", ], [ "f\x75\x6cl" => '~assert\("[eval"\.]+\([base64_decode\."]+\(\'([^\']+)\'\)\)"\);~msi', "i\x64" => "O\x62\x66_\x32\x302\x30\x305\x30\x37_\x35", ], [ "f\x75\x6cl" => '~parse_str\s*\(\'([^\']+)\'\s*,\s*(\$\w+)\)\s*;(\2\s*\[\s*\d+\s*\]\s*\(\s*)+\'[^\']+\'\s*\),\s*array\(\s*\),\s*array\s*\(\s*\'[^\']+\'\s*\.(\2\[\s*\d+\s*\]\()+\'([^\']+)\'\s*[\)\s]+\.\'//\'[\s\)]+;~msi', "i\x64" => "O\x62\x66_\x32\x302\x30\x305\x31\x33_\x31", ], [ "f\x75\x6cl" => '~(\$\w+)=strrev\("[base64_decode"\.]+\);eval\(\1\(\'([^\']+)\'\)\);~msi', "i\x64" => "O\x62\x66_\x32\x302\x30\x305\x32\x36_\x31", ], [ "f\x75\x6cl" => '~error_reporting\(0\);define\(\'\w+\',\s*__FILE__\);define\(\'\w+\',\s*fopen\(__FILE__,\s*\'r\'\)\);fseek\(\w+,\s*__COMPILER_HALT_OFFSET__\);((\$\w+="\\\\x[0-9a-f]+";)+(\$\w+="[^"]+";)+eval\("\?>"\.(\$\w+\()+"([^"]+)"\)+;)+(?:/\*\w+\*/)?__halt_compiler\(\);[\w#|>^%\[\.\]\\\\/=]+~msi', "i\x64" => "O\x62\x66_\x32\x302\x30\x305\x32\x37_\x31", ], [ "f\x75\x6cl" => '~(\$\w+)=strrev\("[base64_decode]+"\)\.str_replace\(\'(\w+)\',\'\',\'\w+\'\);\s*eval\(\1\(\$\w+\)\);~msi', "i\x64" => "O\x62\x66_\x32\x302\x30\x306\x30\x32_\x31", ], [ "f\x75\x6cl" => '~(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*base64_decode\(\1\);\s*eval\(\3\);~msi', "i\x64" => "O\x62\x66_\x32\x302\x30\x307\x32\x30_\x31", ], [ "f\x75\x6cl" => '~[\'".]+(\$\w+\s*=\s*[\'"]\w+[\'"];)+(\$\w+=\$\w+[\'.]+\$\w+;)+(\$\w+=(str_rot13|base64_decode|gzinflate)\(\$\w+\);)+eval\(\$\w+\);~msi', "i\x64" => "f\x6c\x61m\x75\x78", ], [ "f\x75\x6cl" => '~function\s*(\w+)\(\)\{\s*return\s*"([^"]+)";\s*\}\s*eval\("([^"]+)"\.\1\(\)\."([^"]+)"\);~msi', "i\x64" => "b\x79\x70a\x73\x73", ], [ "f\x75\x6cl" => '~(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+(echo)\s*"(?:[<\w\\\\>\/\s={:}#]+);(?:[\\\\\w\-:]+;)+(?:[\\\\\w}:{\s#]+;)+(?:[\\\\\w}:{#\-\s]+;)+[\\\\\w}<\/]+";\$\w+=["\\\\\w]+;(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+\$\w+=["\\\\\w]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";error_reporting\(\d\);\$\w+=["\\\\\w]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\$\w+=["\\\\\w]+;set_time_limit\(\d\);\$\w+=["\\\\\w]+;(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+(if\(empty\()[\$_\w\["\\\\\]]+\)\){\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\w()]+;(}else{)\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;}chdir\(\${\$\w+}\);\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=htmlentities\(\$[_\w\["\\\\\].?]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);\1[<\\\\\w>\/"]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";(?:\$\w+=["\w\\\\]+;)+(?:\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;)+\$\w+=["\w\\\\]+;\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1["\\\\\w<>=\s\'.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w=\s\/<>]+;(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+\1["<\\\\\w\s\'.\${}>\/]+;\1["<\\\\\w>\s\'.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."&\w\\\\\'<\/]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\$\w+=["\\\\\w]+;\1["<\\\\\w>\s=\'.\${}&\/]+;(?:\1["<\\\\\w>\/]+;)+\$\w+=["\\\\\w]+;\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";switch\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\){case"[\w\\\\\s]+":(?:\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;)+\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){(?:\$\w+=["\\\\\w]+;)+(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=fopen\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},"\w"\);\$\w+=["\\\\\w]+;\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=(?:(?|fread|filesize)\(\${\$\w+},?)+\)\);\${\$\w+}=str_replace\("[\w\\\\\s]+",[<\w\\\\>"]+,\${\$\w+}\);\1["\\\\\w<>=\s\'.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w=\s\/<>&\${}\']+;\1["\\\\\w\s.:]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\."[\w\\\\\s]+";\1["\\\\\w\s\'=]+\.\${\$\w+}\.["<\w\\\\>]+;\1["<\\\\\w>\s=\'\/;]+\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";(?:\$\w+=["\w\\\\]+;)+\${\$\w+}=fopen\(\${\$\w+},"\w"\);if\(fwrite\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\s\\\\\w]+;\3\1["\\\\\w\s.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\\\\\w]+;}}fclose\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);(break;case")[\w\\\\\s]+":\${\$\w+}=[\$_\w\["\]\\\\]+;if\(unlink\([\${}\w]+\)\){\1\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\.["\s\w\\\\.>]+;\3\$\w+=["\w\\\\]+;\1["\\\\\w\s.${}<]+;}\4[\w\\\\\s]+":(?:\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;)+\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1["<\w\\\\\s=.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}.["\\\\\w&.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w\s=]+;(?:\1["\w\\\\:\s\'><=\/]+;)+\3(?:\$\w+=["\w\\\\]+;)+if\(copy\(\${\$\w+},\${\$\w+}\)\){\1"[\w\\\\\s]+";\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+;}}\4[\w\\\\\s]+":(?:\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;)+\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\'\\\\\w\s=>]+;\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\1["\\\\\w\s\'=>\/;]+\3if\(rename\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\3\$\w+=["\w\\\\]+;\1"[\w\\\\\s]+"\.\${\$\w+}[."\\\\\w>;]+}}\4[\w\\\\\s]+":\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;\${\$\w+}=[\$_\w\["\]\\\\]+;\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1["\\\\\w\s\'.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\.["\\\\\w=.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\.["\\\\\w\s>]+;(?:\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;)+\1["\\\\\w\s=\'<\/;]+\3if\(rename\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+;}}\4[\w\\\\\s]+":\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;if\(rmdir\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\3\$\w+=["\\\\\w]+;\1"[\w\\\\\s]+"\.\${\$\w+}[."\\\\\w]+;}\4[\w\\\\\s]+":\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";system\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);}\4[\w\\\\\s]+":\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\$\w+=["\w\\\\]+;(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+\3\$\w+=["\w\\\\]+;if\(\${\$\w+}=fopen\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},"\w"\)\){\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;\3\$\w+=["\w\\\\]+;\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;}\$\w+=["\w\\\\]+;fclose\(\${\$\w+}\);}\4[\w\\\\\s]+":\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;\${\$\w+}=basename\([\$_\w\["\\\\\]]+\);\2\${\$\w+}\)\){\1["<\\\\\w\s=\'.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\.["&\w\\\\\s=\/\-\'>]+;(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";if\(move_uploaded_file\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;unlink\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);\3\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+;}}\4[\w\\\\\s]+":\${\$\w+}=[\$_\w\["\]\\\\]+;\2\${\$\w+}\)\){(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\$\w+=["\\\\\w]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=explode\(":",\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);if\(\(!is_numeric\(\${\$\w+}\[\d\]\)\)or\(!is_numeric\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\[\d\]\)\)\){\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\3(?:\$\w+=["\w\\\\]+;)+\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\$\w+=["\w\\\\]+;(?:\${\$\w+}=\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\[\d\];)+\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;while\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}<=\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\){\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\$\w+=["\\\\\w]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=\d;\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=fsockopen\(\$\w+,\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)or\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=\d;if\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}==\d\){\$\w+=["\\\\\w]+;echo\${\$\w+}\.["\\\\\w>]+;}\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\+\+;fclose\(\${\$\w+}\);}}}break;}clearstatcache\(\);(?:\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;){2}\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=scandir\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);foreach\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\s\w+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\){if\(is_file\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=round\(filesize\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\/\d+,\d\);\$\w+=["\w\\\\]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1["<\\\\\w>.\s=]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\/\w\\\\>;]+\$\w+=["\\\\\w]+;\1["<\\\\\w>.\s=]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w\s<\/>]+;\1["<\\\\\w>.\s=]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w=&]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w\/<>;]+\$\w+=["\\\\\w]+;\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+\${\$\w+}[.">\w\\\\\/<]+;(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+\3(?:\$\w+=["\\\\\w]+;){2}\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=scandir\(\${\$\w+}\);(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";){2}\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=count\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\-\d;\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+\/\w+>";\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1["<\\\\\w>.\s=]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w\s=<\/]+;(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;){3}}}\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;~msi', "i\x64" => "d\x61\x72k\x53\x68e\x6c\x6c", ], [ "f\x75\x6cl" => '~(\$\w+)=\'([\w\(;\$\)=\s\[\/\]."*]+)\';(\$\w+)=(?:\1\[[-+\(\d*\/\)]+\]\.?)+;(\$\w+)=(?:\1\[[-+\(\d*\/\)]+\]\.?)+;(\$\w+)=(?:\1\[[-+\(\d*\/\)]+\]\.?)+;(\$\w+)=\s+"([\'\w\/+=]+)";(\$\w+)\.=\4;\8\.=\6;\8\.=\5;@(\$\w+)=\3\(\(\'+\),\s+\(\8\)\);@\9\(\);~msi', "i\x64" => "w\x73\x6f", ], [ "f\x75\x6cl" => '~(?:(?:@?error_reporting|@?set_time_limit)\(\d+\);\s*){1,2}function\s*class_uc_key\((\$\w{1,50})\){\s*(\$\w{1,50})\s*=\s*strlen\s*\(trim\(\1\)\);\s*(\$\w{1,50})\s*=\s*\'\';\s*for\((\$\w{1,50})\s*=\s*0;\4\s*<\s*\2;\4\+=2\)\s*{\s*\3\s*\.=\s*pack\s*\("C",hexdec\s*\(substr\s\(\1,\4,2\)\)\);\s*}\s*return\s*\3;\s*}\s*header\("\w+-\w+:\s\w+\/\w+;\s*charset=(\w+)"\);\s*(\$\w{1,50})=(?:(?:class_uc_key\("(\w+)"\)|\$\w{1,50})\.?\s*)+\.\'([\w\/\+=\\\\]+\'\)\)\);)\';\s*(\$\w{1,50})=create_function\(\'\',\6\);\9\(\);~msi', "i\x64" => "a\x6e\x6fn\x79\x6do\x75\x73F\x6f\x78", ], [ "f\x75\x6cl" => '~(\$my_sucuri_encoding)\s{0,10}=\s{0,10}[\'"]([^\'"]+)[\'"];\s{0,10}(\$tempb64)\s{0,10}=\s{0,10}base64_decode\(\s{0,10}\1\);\s{0,10}eval\(\s{0,10}\3\s{0,10}\);~msi', "i\x64" => "w\x73\x6fE\x76\x61l", ], [ "f\x75\x6cl" => '~(?:(?:(\$\w+)\s*\.?=\s*["\'][assert]+["\'];)+\s*(if\s*\(\!\@\$\w+\)\s*\{\$\w+=1;)?\s*@?\1)(\((?:\w+\()+\'[^;]+;\'\)+;(?(2)}))~msi', "i\x64" => "a\x73\x73e\x72\x74S\x74\x72", ], [ "f\x75\x6cl" => '~(function\s\w+\(\$\w+,\$\w+,\$\w+\){return\sstr_replace\(\$\w+,\$\w+,\$\w+\);}\s?){3}(\$\w+)\s=\s\'(\w+)\';\s\2\s=\s(\w+)\(\'(\w+)\',\'\',\2\);\s(\$\w+)\s=\s\'(\w+)\';\s\6\s=\s\4\(\'(\w+)\',\'\',\6\);\s(\$\w+)\s=\s\'(\w+)\';\s\9\s=\s\4\(\'(\w+)\',\'\',\9\);\s(\$\w+)\s=\s\'(\$\w+)\';\s(\$\w+)\s=\s\6\(\12,\9\.\'\(\'\.\2\.\'\(\'\.\12\.\'\)\);\'\);\s\14\(\'(\w+)\'\);~msi', "i\x64" => "f\x75\x6ec\x56\x61r", ], [ "f\x75\x6cl" => '~(\$\w+)=[\'"]([\w</,\s()\$\+}\\\\\'"?\[\]{;%=^&-]+)[\'"];(\$\w+=(?:\s?\1\[\d+\](?:\s?\.?))+;)+((?:\$\w+\(\d+\);)?(\$\w+=(\$\w+)\(["\']{2},(\$\w+\(\$\w+\(["\'][=\w\+\/]+[\'"]\)\))\);\$\w+\(\);|.*?if\s?\(isset\(\${(?:\$\w+\[\d+\]\.?)+}.*?function\s\w+.*?include\s\${(?:\$\w+\[\d+\]\.?)+}\[(?:\$\w+\[\d+\]\.?)+\];\s?}))~msi', "i\x64" => "d\x69\x63t\x69\x6fn\x61\x72y\x56\x61r\x73", ], [ "f\x75\x6cl" => '~(?:(?<concatVar>\$\w+)\s?=\s?""\s?;((?:\s?(?P=concatVar)\s?\.=\s?"[\w]+"\s?;\s?)+))?(\$\w+)\s?=\s?(?:(?P=concatVar)|"(?<strVal>[\w]+)")\s?;\s?if\s?\(\s?!function_exists\s?\(\s?"(\w+)"\)\){\s?function\s\5\(\s?(\$\w+)\){\s?(?:\$\w+\s?=\s?""\s?;)?\s?(\$\w+)\s?=\s?strlen\s?\(\s?\6\s?\)\s?\/\s?2\s?;\s?for\s?\(\s?(\$\w+)\s?=0\s?;\s?\8\s?<\s?\7\s?;\s?\8\+\+\s?\)\s?{\s?\$\w+\s?\.=\s?chr\s?\(\s?base_convert\s?\(\s?substr\s?\(\s?\6\s?,\s?\8\s?\*\s?2\s?,\s?2\s?\)\s?,\s?16\s?,\s?10\s?\)\s?\)\s?;\s?}\s?return\s?\$\w+;\s?}\s?}\s?\$\w+\s?=\s?create_function\s?\(\s?null\s?,\s?\5\(\s?\3\)\)\s?;\s?\3\(\)\s?;~msi', "i\x64" => "c\x6f\x6ec\x61\x74V\x61\x72F\x75\x6ec", ], [ "f\x75\x6cl" => '~function\s?(\w+)\(\){(((\$\w+)\.?="\w+";)+)return\seval\(\4\(\w+\(\)\)\);}function\s(\w+)\((\$\w+)\){((?:(\$\w+)\.?="\w+";)+)return\s\8\(\6\);}function\s?(\w+)\(\){((\$\w+)\.?="([\w\/+=]+)";)return\s(\w+)\(\11\);}function\s\13\((\$\w+)\){(\$\w+)=(\w+)\((\w+)\((\w+)\(\14\)\)\);return\s\15;}function\s\17\(\14\){(((\$\w+)\.?="\w+";)+)return\s\21\(\14\);}\1\(\);function\s\16\(\14\){(((\$\w+)\.?="\w+";)+)return\s\24\(\14\);}~msi', "i\x64" => "c\x6f\x6ec\x61\x74V\x61\x72F\x75\x6ec\x46\x75n\x63", ], [ "f\x75\x6cl" => '~(?:(?:\s?\$\w+\s?=\s?strrev\([\'"][^\'"]+[\'"]\);\s?)|(?:\s?\$\w+\s?=\s?strrev\([\'"][^\'"]+[\'"]\);\s?)|(?:\s?eval\((?:\$\w+)?\([\'"][^\'"]+[\'"]\)\);\s?)|(?:\s?eval\(\$\w+\(\$\w+\([\'"][^\'"]+[\'"]\)\)\);\s?)){3,4}~msi', "i\x64" => "e\x76\x61l\x56\x61r\x44\x6fu\x62\x6ce\x64", ], [ "f\x75\x6cl" => '~(\$\w+)\s?=\s?(\w+)\("([\w+\/=]+)"\);\s?echo\s?\1;~msi', "i\x64" => "v\x61\x72F\x75\x6ec\x73\x45c\x68\x6f", ], [ "f\x75\x6cl" => '~(\$\w+)="";\s*(?:do\s?{[^}]+}\s?while\s?\(\d+>\d+\);\s*\1=\1\."[^"]+";)?.*?\s?.*?(\$\w+)=(\'[^\']+\'\s?\.\s?(?:\'[^\']+\'\s?\.?\s?)+);\s?.*?(?:\s(\$\w+)=((?:\4\[?{?\d+\]?}?\.?)+);\s?|\$\w{1,50}->\w{1,50}\(\);)?\s*(?:function\s\w+\(\){(?:.*?);\s}\s?\1=\w+\(\1,"\w+"\);\s?|\$\w+=array\((?:\'\w+\',?)+\);\s?|\1=\w+\(\1,\sjoin\(\'\',\s\$\w+\)\s?\);\s?|\s?\$\w+\+=\d+;\s?|\1=\w+\(\1,\w+\(\)\);\s?|function\s\w+\(\){\s?|do{\s?if\s?\(\d+<\d+\)\s?{\s?)*.*?(?:\$\w+\s?=\s?\$\w+\([\'"]{2},\s?\$\w+\(\$\w+(?:\(\1\),\s?(?:\$\w+\[\'\w+\'\]\)\s?)?|\)\s?)\);\s?\$\w+\(\);)(?:\s?function\s\w+\((?:\$\w+,\s?\$\w+)?\)(?:.*?);\s}|\s?class\s\w+\s?{(?:.*?);(?:\s}){1,2})+~msi', "f\x61\x73t" => '~function\s+\w+\(\)\{\s*global\s*(\$\w+);\s*return\s*(\1[\[{]\d+[\]}]\.?){15};\s*}~msi', "i\x64" => "v\x61\x72F\x75\x6ec\x73\x4da\x6e\x79", ], [ "f\x75\x6cl" => '~((\$(?:GLOBALS|{"[\\\\\w]+"})\[[\'"]\w+["\']\])\s?=\s?[\'"]+([\\\\\w]+)["\'];)\s?(?:(\$GLOBALS\[?(\s?(?:\2|\$GLOBALS\[\'\w+\'\])\[\d+\]\.?)+\])\s?=\s?\g<5>+;\s?)+(?:\g<4>\s?=\s[\$_\w]+;\s)+(?:@\g<4>\(\g<5>+\s?,\s?\w+\s?\);\s?)+@\g<4>\(\d+\);\s{0,50}(?:if\s?\(!\g<4>\s?\(\g<5>+\)\)\s{\s{0,50}\g<4>\(\g<5>+,\s\g<5>*\d*\);\s{0,50}}?\s{0,50})*(?:\$\w+\s?=\s?\w+;\s?)*\g<4>\s?=\s\g<5>+;\s?global\s?\$\w+;\s?function\s\w+\(\$\w+,\s\$\w+\)\s{\s?\$\w+\s?=\s?["\']{2};\s?for\s?\(\$\w+\s?=\d+;\s?\$\w+\s?<\s?\g<4>\(\$\w+\)\s?;\s?\)\s?{\s?for\s?\(\s?\$\w+=\d+;\s?\$\w+\s?<\s?\g<4>\(\$\w+\)\s?&&\s?\$\w+\s?<\g<4>\(\$\w+\);\s?\$\w+\+{2},\s?\$\w+\+{2}\)\s?{\s?\$\w+\s?\.=\s?\g<4>\(\g<4>\(\$\w+\[\$\w+\]\)\s?\^\s?\g<4>\(\$\w+\[\$\w+\]\)\);\s?}\s?}\s?return\s\$\w+;\s?}\s?function\s?\w+\(\$\w+,\s?\$\w+\)\s?{\s?global\s?\$\w+;\s?return\s\g<4>\(\g<4>\(\$\w+,\s?\$\w+\),\s?\$\w+\)\s?;\s?}\s?foreach\s?\(\g<4>\sas\s\$\w+=>\$\w+\)\s?{\s?\$\w+\s?=\s?\$\w+;\s?\$\w+\s?=\s?\$\w+;\s?}\s?if\s?\(!\$\w+\)\s?{\s?foreach\s?\(\g<4>\sas\s\$\w+\s?=>\s?\$\w+\)\s?{\s?\$\w+\s?=\s?\$\w+;\s?\$\w+\s?=\s?\$\w+;\s?}\s?}\s?\$\w+\s?=\s?@\g<4>\(\g<4>\(@?\g<4>\(\$\w+\),\s?\$\w+\)\);\s?if\s?\(isset\(\$\w+\[\g<5>+\]\)\s?&&\s?\$\w+==\$\w+\[\g<5>+\]\)\s?{\s?if\s?\(\$\w+\[\g<5>\]\s?==\s?\g<5>\)\s?{\s?\$\w+\s?=\s?array\(\s?\g<5>+\s?=>\s?@\g<4>\(\),\s?\g<5>+\s?=>\s?\g<5>+,\s?\);\s?echo\s?@\g<4>\(\$\w+\);\s?}\s?elseif\s?\(\$\w+\[\g<5>\]\s?==\s?\g<5>\)\s?{\s?eval\(\$\w+\[\g<5>\]\);\s?}\s?(?:exit\(\);)?\s?}\s?}?~msi', "i\x64" => "g\x6c\x6fb\x61\x6cA\x72\x72a\x79\x45v\x61\x6c", ], [ "f\x75\x6cl" => '~<\?php\s{0,30}(\$\w+)\s{0,30}=\s{0,30}"(.+?)";\s{0,30}((?:\$\w+\s{0,30}=\s{0,30}(?:\1\[\'\w\s{0,30}\'\s{0,30}\+\s{0,30}\d+\s{0,30}\+\s{0,30}\'\s{0,30}\w\'\]\s{0,30}\.?\s{0,30})+;\s{0,30})+)(\$\w+)\s{0,30}=\s{0,30}"(\d+)";\s{0,30}(?:\$\w+\s{0,30}=\s{0,30}\$\w+\(\s{0,30}\$\w+\s{0,30},\s{0,30}\$\w+\(\s{0,30}"\s{0,30}"\)\s{0,30},\s{0,30}"[\w\+]+"\)\s{0,30};\s{0,30})+(?:\$\w+\s{0,30}=\s{0,30}\$\w+\(\s{0,30}\$\w+\(\s{0,30}\$\w+\)\s{0,30},\s{0,30}\$\w+\(\s{0,30}?\$\w+\)\s{0,30}\)\s{0,30};\s{0,30})+\$\w+\((?:\s{0,30}\$\w+\(\s{0,30}"\s{0,20}\w\s{0,20}"\)\s{0,30}\.?\s{0,30})+"\(\\\\"\w+\\\\"\s{0,30},\s{0,30}"\s{0,30}\.\s{0,30}\$\w+\(\s{0,30}\$\w+\(\s{0,30}"\d+"\s{0,30},\s{0,30}\$\w+\(\s{0,30}"\s{0,20}"\)\s{0,30},\s{0,30}"[\d\w=]+"\)\s{0,30}\)\s{0,30}\.\s{0,30}"\s{0,30}\)\s{0,30};"\)\s{0,30};\s{0,30}\$\w+\s{0,30}=\s{0,30}\$\w+\(\w+\)\s{0,30};\s{0,30}\$\w+\(\s{0,30}(?:\$\w+\(\s{0,30}"\s{0,30}[?>]\s{0,30}"\)\s{0,30}\.\s{0,30})+(\$\w+)\(\s{0,30}(\$\w+)\(\s{0,30}(\$\w+),\s{0,30}(\$\w+)\(\s{0,30}"\s{0,30}"\)\s{0,30},\s{0,30}(\$\w+)\(\s{0,30}"([()\w@|*#\[\]&\/\+=]+)"\s{0,30},\s{0,30}(\$\w+),\s{0,30}(\$\w+)\)\s{0,30}\)\)\s{0,30}\)\s{0,30};\s{0,30}\$\w+\s?=\s?\d+\s?;\s{0,30}\?>~msi', "i\x64" => "t\x69\x6ek\x6c\x65S\x68\x65l\x6c", ], [ "f\x75\x6cl" => '~(?:\$\w+="\w+";)+(\$\w+)="([\w_)(;\/\.*]+)";\$\w+="\w+";function\s(\w+)\((?:\$\w+,?){3}\){return\s?""(?:\.\$\w+\.""){3};}(?:\$\w+=(?:(?:"\w+")|(?:\3\((?:\1\[\d+\],?\.?)+\))|(?:(?:\3\()+(?:\$\w+\,?(?:\)\,)?)+)(?:(?:(?:\3\()+)*(?:(?:\$\w+,?)+)*(?:\),)*(?:\)*))+);)+\$\w+=\3\((?:\1\[\d+\]\.?)+(?:,"")+\);(?:\$\w+=\3\(\3\(\$\w+,\$\w+,\$\w+\),\3\((?:\$\w+,?)+\),\3\(\$\w+,\3\(\$\w+,\$\w+,""\),\$\w+\)\)\."\'(?<str>[\w\/\+]+)\'")\.\3\((?:\1\[\d+\],?\.?)+\);\$\w+\(\$\w+,array\("","}"\.\$\w+\."\/+"\)\);~msi', "i\x64" => "w\x73\x6fF\x75\x6ec", ], [ "f\x75\x6cl" => '~\$\w+\[\'\w+\'\]\s?=\s?"[\w;\/\.*)(]+";\s?\$\w+\[\'\w+\'\]\s?=\s?(?:\$\w+\[\'\w+\'\]\[\d+\]\.?)+;\s?\$\w+\s?=\s?(?:"[\w()]*"\.chr\([\d-]+\)\.?)+"\(";\s?\$\w+\s?=\s?"[)\\\\\w;]+";\s?\$\w+\s?=\s?\$\w+\."\'(?<str>[\w\/\+]+)\'"\.\$\w+;\s?\$\w+\[\'\w+\'\]\((?:\$\w+\[\'\w+\'\]\[\d+\]\.?)+,\s?\$\w+\s?,"\d+"\);~msi', "i\x64" => "w\x73\x6fF\x75\x6ec", ], [ "f\x75\x6cl" => '~function\s(\w+)\((\$\w+)\)\s{0,50}{\s{0,50}\2=gzinflate\(base64_decode\(\2\)\);\s{0,50}for\((\$\w+)=\d+;\3<strlen\(\2\);\3\+\+\)\s{0,50}{\s{0,50}\2\[\3\]\s?=\s?chr\(ord\(\2\[\3\]\)-(\d+)\);\s{0,50}}\s{0,50}return\s?\2;\s{0,50}}\s{0,50}eval\(\1\([\'"]([\w\+\/=]+)[\'"]\)\);~msi', "i\x64" => "e\x76\x61l\x57\x61n\x46\x75n\x63", ], [ "f\x75\x6cl" => '~(?:(?:if\s?\(file_exists\("\w+"\)\)\s?{\s?}\s?else\s?{\s?)?\$\w+\s?=\s?fopen\([\'"][^\'"]+\.php[\'"],\s?[\'"]w[\'"]\);)?\s?(\$\w+)\s?=\s?(?:base64_decode\()?[\'"]([^\'"]+)[\'"]\)?;\s?(?:\$\w{1,50}\s?=\s?fopen\([\'"][^\'"]+[\'"],\s?[\'"]\w[\'"]\);\s?)?(?:echo\s?)?fwrite\(\$\w{1,50}\s?,(?:base64_decode\()?\$\w{1,50}\)?\);\s?fclose\(\$\w{1,50}\);\s?}?~msi', "i\x64" => "f\x75\x6ec\x46\x69l\x65", ], [ "f\x75\x6cl" => '~(\$(?:GLOBALS\[\')?\w+(?:\'\])?\s{0,100}=\s{0,100}array\(\s{0,100}(?:\s{0,100}\'[^\']+\'\s{0,100}=>\s{0,100}\'?[^\']+\'?,\s{0,100})+\s{0,100}\);\s{0,100}((?:\$\w+=(?:[\'"][^\'"]*[\'"]\.?)+;)+)?(?:if\(!\$?\w+\((?:\'\w*\'\.?|\$\w+)+\)\){function\s{0,100}\w+\(\$\w+\){.*?else{function\s{0,100}\w+\(\$\w+\){.*?return\s{0,100}\$\w+\(\$\w+\);\s?}}){2})\$\w+=(?:\'\w*\'\.?)+;\s?(\$\w+)\s{0,100}=\s{0,100}@?\$\w+\(\'\$\w+\',(?:\$\w+\.\'\(.\.\$\w+\.(?:\'[\w(\$);]*\'\.?)+\)|(?:\'[^\']+\'\.?)+\));.*?\3\([\'"]([^"\']+)[\'"]\);~msi', "i\x64" => "g\x75\x6cf", ], [ "f\x75\x6cl" => '~(\$\w+)=(\w+);\$\w+="(.+?)";(?:\$\w+=\$\w+;)?(\$\w+)=strlen\(\$\w+\);(\$\w+)=[\'"]{2};for\((\$\w+)=\d+;\6<\4;\6\+\+\)\s?\5\s?\.=\s?chr\(ord\(\$\w+\[\6\]\)\s?\^\s?\1\);eval\("\?>"\.\5\."<\?"\);~msi', "i\x64" => "e\x76\x61l\x43\x6fn\x63\x61t\x41\x73c\x69\x69C\x68\x61r\x73", ], [ "f\x75\x6cl" => '~(?:\$\w+="[\w=]+";\s?)+(\$\w+)\s?=\s?str_replace\((?:"\w*",?)+\);\s?(\$\w+)\s?=\s?\1\((?:"\w*",?\s?)+\);\s?(\$\w+)\s?=\s?\1\((?:"\w*",?)+\);\s?(\$\w+)\s?=\s?\3\("",\s?(\2\(\2\((\1\("([#;*,\.]+)",\s?"",\s?((?:\$\w+\.?)+)\))\)\))\);\s?\4\(\);~msi', "i\x64" => "e\x76\x61l\x50\x6fs\x74", ], [ "f\x75\x6cl" => '~\$\w+\s?=\s?"e\/\*\.\/";\spreg_replace\(strrev\(\$\w+\),"([\\\\\w]+)\'([\w\/\+=]+)\'([\\\\\w]+)","\."\);~msi', "i\x64" => "e\x76\x61l\x50\x72e\x67\x53t\x72", ], [ "f\x75\x6cl" => '~\$GLOBALS\[\'\w+\'\]=array\(\'preg_re\'\s?\.\'place\'\);\s?function\s\w+\(\$\w+\)\s?{\$\w+=array\("\/\.\*\/e","([\\\\\w]+)\'([\w\/\+]+)\'([\\\\\w]+)","{2}\);\s?return\s\$\w+\[\$\w+\];}\s?\$GLOBALS\[\'\w+\'\]\[\d+\]\(\w+\(\d+\),\w+\(\d+\),\w+\(\d+\)\);~msi', "i\x64" => "e\x76\x61l\x50\x72e\x67\x53t\x72", ], [ "f\x75\x6cl" => '~class\s?\w+{\s?function\s?__destruct\(\){\s?\$this->\w+\(\'([\w&]+)\'\^"([\\\\\w]+)",array\(\(\'([#\w]+)\'\^"([\\\\\w]+)"\)\."\(base64_decode\(\'([\w\+\/=]+)\'\)\);"\)\);\s?}\s?function\s?\w+\(\$\w+,\$\w+\){\s?@array_map\(\$\w+,\$\w+\);\s?}\s?}\s?\$\w+\s?=\s?new\s?\w+\(\);~msi', "i\x64" => "c\x6c\x61s\x73\x44e\x73\x74r\x75\x63t\x46\x75n\x63", ], [ "f\x75\x6cl" => '~\$\w+="([\\\\\w]+)";\s?\$\w+=\$\w+\(\'([\w\+\/=]+)\'\);\s?\$\w+\s?=\s?"([\\\\\w]+)";\s?\$\w+\s?=\s?\$\w+\([\'"]{2}.\s?eval\(\$\w+\)\);\s?\$\w+\([\'"]{2}\);~msi', "i\x64" => "c\x72\x65a\x74\x65F\x75\x6ec\x45\x76a\x6c", ], [ "f\x75\x6cl" => '~((\$\w+)="([\w-]+)";\s*(?:\$\w+=\'\d+\';\s*)*\s*((?:\$\w+=(?:\2{\d+}\.?)+;)+)+)(?:header[^\)]+\);)?(?:\$\w+=)?(\$\{"[GLOBALSx0-9a-f\\\\]+"})(.+?((.+?\5).+?)+)"[^"]+"\]\(\);~msi', "i\x64" => "d\x69\x63t\x69\x6fn\x61\x72y\x43\x72e\x61\x74e\x46\x75n\x63\x73", ], [ "f\x75\x6cl" => '~(\$\w+)\s?=\s?"([\w\s=]+)";\s?(\$\w+)\s?=\s?array\(((?:\d+,?\s?)+)\);\s?(\$\w+)\s?=\s?array\(((?:"[\w\d\s\/\.]+",?\s?)+)\);\s?(\$\w+)\s?=\s?\'\';\s?(?:\$\w+\s=(?:\s?\5\[\d+\]\s?\.?)+;\s?)+(\$\w+)\s?=\s?\$\w+\("\\\\r\\\\n",\s?\1\);\s?for\((\$\w+)=0;\9\s?<\s?sizeof\(\8\);\9\+\+\){\s?\7\s\.=\s?\$\w+\(\8\[\9\]\);\s?}\s?\1\s?=\s?\7;\s?(\$\w+)\s?=\s?\3;\s?(\$\w+)\s?=\s?"";\s?for\((\$\w+)=0;\s?\12<sizeof\(\10\);\s?\12\+=2\){\s?if\(\12\s?%\s?4\){\s?\11\.=\s?substr\(\1,\10\[\12\],\10\[\12\+1\]\);\s?}else{\s?\11\.=strrev\(substr\(\1,\10\[\12\],\10\[\12\+1\]\)\);\s?}\s?};\s?\1\s?=\s?\$\w+\(\11\);\s(\$\w+)\s?=\s?array\(\);\s?(\$\w+)\s?=\s?(?:\5\[\d+\]\s?\.?\s?;?)+;\s?(\$\w+)\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;\s?(\$\w+)\s?=\s?\'\';\s?for\((\$\w+)=0;\s?\17<strlen\(\1\);\s?\17\+=32\){\s?\13\[\]\s?=\s?substr\(\1,\s?\17,\s?32\);\s?}\s?(?:\$\w+\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;\s)+\$\w+\s?=\s?\'\';\s?\$\w+\s?=\s?\(\$\w+\(\$\w+\(\$\w+\)\)\)\s?%\s?sizeof\(\$\w+\);\s?\$\w+\s?=\s?\$\w+\[\$\w+\];\s?(\$\w+)\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;(\s?\18\s?=\s?\$_POST\[\18\];\s?(\14\s?=\s?\15\(\$_COOKIE\[\14\]\);)\s?\$\w+\s?=\s?\5\[\d+\]\s?\.\s?\5\[\d+\];\s?(eval\(\$\w+\(\18\)\);)\s?if\(!\16\){\s?((?:\$\w+\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;\s)+)(\$\w+\(\$\w+\);\s?echo\(\$\w+\);)\s?})~msi', "f\x61\x73t" => '~(\s?(\$\w+)\s?=\s?\$_POST\[\2\];\s?((\$\w+)\s?=\s?\$\w+\(\$_COOKIE\[\4\]\);)\s?(\$\w+)\s?=\s?(\$\w+)\[\d+\]\s?\.\s?\6\[\d+\];\s?(eval\(\$\w+\(\2\)\);)\s?if\(!\5\){\s?((?:\$\w+\s?=\s?(?:\6\[\d+\]\s?\.?\s?)+;\s)+)(\$\w+\(\$\w+\);\s?echo\(\$\w+\);)\s?})~msi', "i\x64" => "e\x76\x61l\x50\x6fs\x74\x44i\x63\x74i\x6f\x6ea\x72\x79", ], [ "f\x75\x6cl" => '~(\$\w)\s?=\s?str_rot13\("([^"]+)"\);preg_replace\("/\x2f\x65","\1",""\);~msi', "i\x64" => "s\x74\x72r\x6f\x74P\x72\x65g\x52\x65p\x6c\x61c\x65\x45v\x61\x6c", ], [ "f\x75\x6cl" => '~(\$\w+)\s*=\s*[^\']+\'([^\']+)\';\s*(\$\w+)\s*=\s*\'([^\']+)\';\s*if\(!file_exists\(\$file\)+\{\s*@file_put_contents\(\1,base64_decode\(base64_decode\(\3\)+;\s*\}\s*\@include\s*\$file;~msi', "i\x64" => "d\x72\x6fp\x49\x6ec\x6c\x75d\x65", ], [ "f\x75\x6cl" => '~(?(DEFINE)(?\'c\'(?:/\*[^/]*/?\*/)*))(?&c)@?(eval|echo|(\$\w+)\s*=\s*create_function)(?:\/\*+\/)?\s*(?&c)\((?&c)(\'\',)?\s*([\'"?>.\s]+)?\s*\(?\s*@?\s*((?&c)base64_decode(?&c)\s*\((?&c)|(?&c)pack(?&c)\s*\(\'H\*\',|(?&c)convert_uudecode(?&c)\s*\(|(?&c)htmlspecialchars_decode(?&c)\s*\(|(?&c)stripslashes(?&c)\s*\(|(?&c)gzinflate(?&c)\s*\(|(?&c)strrev(?&c)\s*\(|(?&c)str_rot13(?&c)\s*\(|(?&c)gzuncompress(?&c)\s*\(|(?&c)urldecode(?&c)\s*\(|(?&c)rawurldecode(?&c)\s*\(|(?&c)eval(?&c)\s*\()+.*?[^\'")]+(?&c)(((?&c)\s*(?&c)\.?(?&c)[\'"]((?&c)[^\'";]+(?&c)[\'"](?&c)*\s*)+(?&c))?(?&c)\s*[\'"\);]+(?&c))+(?&c)(\s*\2\(\);(?&c))?~msi', "i\x64" => "e\x76\x61l\x43\x6fm\x6d\x65n\x74\x73", ], [ "f\x75\x6cl" => '~\@?error_reporting\(0\);\@?set_time_limit\(0\);(?:\s*rename\([^;]+;)?\s*(\$\w+)="([^"]+)";\s*\1=\@?urldecode\(\1\);\1=\@?strrev\(\1\);\@?eval\(\1\);~msi', "i\x64" => "s\x74\x72r\x65\x76U\x72\x6cd\x65\x63o\x64\x65E\x76\x61l", ], [ "f\x75\x6cl" => '~(\$\w+\s*=\s*"\w+";\s*\@?error_reporting\(E_ERROR\);\s*\@?ini_set\(\'display_errors\',\'Off\'\);\s*\@?ini_set\(\'max_execution_time\',\d+\);\s*header\("[^"]+"\);\s*)?(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*pack\("H\*",str_rot13\(\2\)+;\s*(?:eval\(\4\);|(\$\w+)=\$\w+\(\'\',\4\);\s*\5\(\);)~msi', "i\x64" => "e\x76\x61l\x50\x61c\x6b\x53t\x72\x72o\x74", ], [ "f\x75\x6cl" => '~\$\w+\s*=\s*\d+;\s*function\s*(\w+)\(\$\w+,\s*\$\w+\)\{\$\w+\s*=\s*\'\';\s*for[^{]+\{([^}]+\}){2}\s*\$\w{1,40}\s*=\s*((\'[^\']+\'\s*\.?\s*)+);\s*\$\w+\s*=\s*Array\(((\'\w\'=>\'\w\',?\s*)+)\);\s*eval(?:/\*[^/]\*/)*\(\1\(\$\w+,\s*\$\w+\)+;~msi', "i\x64" => "u\x72\x6cD\x65\x63o\x64\x65T\x61\x62l\x65", ], [ "f\x75\x6cl" => '~((?:\$\w+=\'\w\';)+)((?:\$\w+=(\$\w+\.?)+;)+)eval\((\$\w+\()+\'([^\']+)\'\)+;~msi', "i\x64" => "e\x76\x61l\x56\x61r\x43\x68a\x72", ], [ "f\x75\x6cl" => '~(\$\w+\s*=\s*(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\()+"([^"]+)"\);)\s*eval\("?(\$\w+)"?\);~msi', "i\x64" => "e\x76\x61l\x56\x61r\x46\x75n\x63", ], [ "f\x75\x6cl" => '~((?:\$\w+\s*=\s*("[\w=+/\\\\]+");\s*)+)(eval\((\$\w+\(+)+(\$\w+)\)+);~msi', "i\x64" => "e\x76\x61l\x56\x61r\x73\x46u\x6e\x63s", ], [ "f\x75\x6cl" => '~<\?php\s*(?:/\*[^=\$\{\}/]{99,499}\bencipher\s*can\s*be\s*obtained\s*from:\s*https?://docs\.google\.com/[^\*\$\(;\}\{=]{1,99}\*/\s*)?(\$[^\w=(,${)}]{0,50})=\'(\w{0,50})\';((?:\$[^\w=(,${)}]{0,50}=(?:\1{\d+}\.?){0,50};){1,20})(\$[^=]{0,50}=\$[^\w=(,${)}]{1,50}\(\$[^\w=(,${)}]{1,50}\(\'\\\\{2}\',\'/\',__FILE__\)\);(?:\$[^\w=(,${)}]{0,50}=\$[^\w=(,${)}]{0,50}\(\$[^\w=(,${)}]{0,50}\);){2}\$[^\w=(,${)}]{0,50}=\$[^\w=(,${)}]{0,50}\(\'\',\$[^\w=(,${)}]{0,50}\)\.\$[^\(]{0,50}\(\$[^\w=(,${)}]{0,50},\d+,\$[^\w=(,${)}]{0,50}\(\$[^\w=(,${)}]{0,50},\'@ev\'\)\);\$[^\w=(,${)}]{0,50}=\$[^\(]{0,50}\(\$[^\w=(,${)}]{0,50}\);\$[^\w=(,${)}]{0,50}=\$[^\w=(,${)}=]{0,50}=\$[^\w=(,${)}]{0,50}=NULL;@eval\(\$[^\w=(,${)}]{0,50}\(\$[^\w=(,${)}(]{0,50}\(\$[^\w=(,${)}]{0,50},\'\',\$[^\w=(,${)}]{0,50}\(\'([^\']{0,500})\',\'([^\']{0,500})\',\'([^\']{0,500})\'\){4};)unset\((?:\$[^,]{0,50},?){0,20};return;\?>.+~msi', "i\x64" => "e\x76\x61l\x46\x69l\x65\x43o\x6e\x74e\x6e\x74", ], [ "f\x75\x6cl" => '~echo\s{0,50}"(\\\\\${\\\\x\d{2}(?:[^"]+(?:\\\\")*)*[^"]+)";~msi', "i\x64" => "e\x63\x68o\x45\x73c\x61\x70e\x64\x53t\x72", ], [ "f\x75\x6cl" => '~file_put_contents\(\$\w+\[[\'"]\w+[\'"]\]\.[\'"][/\w]+\.php[\'"],(base64_decode\([\'"]([\w=]+)[\'"]\))\)~msi', "i\x64" => "f\x69\x6ce\x50\x75t\x44\x65c\x6f\x64e\x64\x43o\x6e\x74e\x6e\x74s", ], [ "f\x75\x6cl" => '~eval\(implode\(array_map\([\'"](\w+)[\'"],str_split\([\'"]([^\'"]+)[\'"]\)\)\)\);~msi', "i\x64" => "e\x76\x61l\x49\x6dp\x6c\x6fd\x65\x64A\x72\x72S\x74\x72", ], [ "f\x75\x6cl" => '~(\$\w+)\s?=\s?\'(.*?NULL\);)\';\s*(\$\w+)\s?=\s?[\'"]([\w\\\\]+)[\'"];\s?\3\([\'"]/\(\.\*\)/e[\'"],\s?[\'"]([\w\\\\]+)[\'"],\s?NULL\);~msi', "i\x64" => "p\x72\x65g\x52\x65p\x6c\x61c\x65\x43o\x64\x65C\x6f\x6et\x65\x6et", ], [ "f\x75\x6cl" => '~(\$\w+)\s*=\s*"([^"]+)";(?:\$\w+)\s*=\s*base64_decode\("[^"]+"\);(\$\w+)\s*=\s*gzinflate\(base64_decode\(\1\)\);((\s*\$\w+\s*=\s*\[(\'[^\']+\',?)+\];)+)\s*\3\s*=\s*str_replace\(\$\w+,\$\w+,\3\);\s*eval\(\3\);\$\w+="[^"]+";~msi', "i\x64" => "s\x69\x73t\x65\x6di\x74\x43o\x6d\x45n\x63", ], [ "f\x75\x6cl" => '~((?:\$\w+\s*\.?=\s*"[^"]*";\s*)+)(\$\w+)\s*=\s*str_replace\(\s*"([^"]+)",\s*"",\s*\$\w+\s*\);\s*(\$\w+)\s*=\s*str_replace\(\s*"([^"]+)",\s*"",\s*"([^"]+)"\s*\);\s*(\$\w+)\s*=\s*\4\(\s*\2\s*\);\s*\7\s*=\s*"[^"]+\7";\s*eval\(\s*\7\s*\);~msi', "i\x64" => "c\x6f\x6ec\x61\x74V\x61\x72s\x52\x65p\x6c\x61c\x65\x45v\x61\x6c", ], [ "f\x75\x6cl" => '~(\$\w{1,50})\s?=\s?file_get_contents\(__FILE__\);\s?\1\s?=\s?base64_decode\(substr\(\1,\s?([+-]\d+)\)\);\s*\1\s?=\s?gzuncompress\(\1\);\s*eval\(\1\);\s*die\(\);\?>\s*([^"\']+)~msi', "f\x61\x73t" => '~\$\w{1,50}\s?=\s?file_get_contents\(__FILE__\);\s?\$\w{1,50}\s?=\s?base64_decode\(substr\(\$\w{1,50},\s?([+-]\d+)\)\);\s*\$\w{1,50}\s?=\s?gzuncompress\(\$\w{1,50}\);\s*eval\(\$\w{1,50}\);\s*die\(\);\?>\s*([^"\']+)~msi', "i\x64" => "d\x65\x63o\x64\x65F\x69\x6ce\x43\x6fn\x74\x65n\x74", ], [ "f\x75\x6cl" => '~((\$\w+\s*=\s*\(?(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\()*((?:"([^"]+)";\s*)|(?:\$\w+)\)*;\s*))+)(eval\("?(\$\w+)"?\);)~msi', "i\x64" => "e\x76\x61l\x56\x61r\x46\x75n\x63\x32", ], [ "f\x75\x6cl" => '~((\$\w+)\s*=\s*"([^"]+)";)\s*((\$\w+)\s*=\s*array\(((\s*\d+,?)+)\);)\s*((\$\w+)\s*=\s*array\(((\s*"[^"]+",?)+)\);)\s*(\$\w+)\s*=\s*\'\';(\s*\$\w+\s*=\s*(?:\9\[\d+\]\s*\.?\s*)+;)+(.+?(\s*\$\w+\s*=\s*\w+\((?:\9\[\d+\]\s*\.?\s*)+)\);\s*eval\(\$\w+\);\s*\})~msi', "f\x61\x73t" => '~((\s*(\$\w+)\s*=\s*\w+\((\$\w+)\[\d+\]\s*\.\s*(?:\4\[\d+\]\s*\.?\s*)+)\);\s*eval\(\3\);\s*\})~msi', "i\x64" => "e\x76\x61l\x41\x72r\x61\x79s", ], [ "f\x75\x6cl" => '~\$\w+\s?=\s?preg_replace\([\'"]/([^\'"/]+)/\w{0,2}[\'"],[\'"]([^\'"]+)[\'"],[\'"]{2}\);~msi', "i\x64" => "p\x72\x65g\x52\x65p\x6c\x61c\x65\x56a\x72", ], [ "f\x75\x6cl" => '~function\s(\w+)\((\$\w+),\s?(\$\w+)\){\s?(\$\w+)=[\'"]{2};\s?for\(\$\w+=0;\$\w+<strlen\(\2\);\)\s?for\(\$\w+=0;\$\w+<strlen\(\3\);\$\w+\+\+,\s?\$\w+\+\+\)\s?\4\s?\.=\s?\2{\$\w+}\s?\^\s?\3{\$\w+};\s?return\s?\4;\s?};eval\(\1\(base64_decode\([\'"]([^\'"]+)[\'"]\),[\'"]([^\'"]+)[\'"]\)\);~msi', "i\x64" => "e\x76\x61l\x46\x75n\x63\x54w\x6f\x41r\x67\x73", ], [ "f\x75\x6cl" => '~function\s(\w+)\(\$\w+\)\s?{\s?\$\w+\s?=\s?[\'"]{2};\s?unset\(\$\w+\);\s?\$\w+\s?=\s?[\'"]([^\'"]+)[\'"];\s?\$\w+\s?=\s?preg_replace\("/([^"]+)/",\s?[\'"]{2},\s?\$\w+\);\s?\$\w+\s?=\s?(?:(?:[\'"]\w+[\'"]|\$\w+)\.?)+;\s?\$\w+\s?=\s?\$\w+\([\'"]\$\w+[\'"],\s?\$\w+\);\s?@?\$\w+\(\$\w+\);\s?}\s?function\s?(\w+)\(\$\w+\)\s?{\s?\$\w+\s?=\s?[\'"](.*?)[\'"];\s?\$\w+\s?=\s?preg_replace\("/([^\'"]+)/",\s?[\'"]{2},\s?\$\w+\);\s?return\s?\$\w+\(\$\w+\);\s?}\s?\1\(\4\(\s?join\([\'"]([^\'"]+)[\'"],\s?array\(((?:[\'"][^\'"]+[\'"][,\s]*)+)\)+;~msi', "i\x64" => "e\x76\x61l\x50\x72e\x67\x52e\x70\x6ca\x63\x65F\x75\x6ec\x73", ], [ "f\x75\x6cl" => '~error_reporting\(0\);((?:\$\w+=\'[^;]+;)+)error_reporting\(0\);((?:\$\w+=\$\w+\(\$\w+\(\'([^\']+)\'\)\);)+\$\w+=(?:\$\w+\()+\'([^\']+)\'\)+\.(?:\$\w+\()+\'([^\']+)\'\)+;\$\w+=(?:\$\w+\()+\'([^\']+)\'\)+;\$\w+=(?:\$\w+\()+"\\\\n",\s*\'\',\s*\'([^\']+)\'\)+;(?:[^}]+\})+}\s*echo\s*(?:\$\w+\()+\'([^\']+)\'\)+);exit;~msi', "i\x64" => "u\x72\x6cM\x64\x35P\x61\x73s\x77\x64", ], [ "f\x75\x6cl" => '~((?:\$\w+\s?=\s?\'(?:[^\']+)\';\s?)+)((?:\$\w+\s?=\s?(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?\.?\s?)+;)+\$\w+\s?=\s?\$\w+\s?\(\$\w+,(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?\.?\s?)+\);\s*\$\w+\(\$\w+,(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?[.,]?\s?)+\);)~msi', "f\x61\x73t" => '~((?:\$\w+\s?=\s?(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?\.?\s?)+;)+\$\w+\s?=\s?\$\w+\s?\(\$\w+,(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?\.?\s?)+\);\s*\$\w+\(\$\w+,(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?[.,]?\s?)+\);)~msi', "i\x64" => "M\x61\x6ey\x44\x69c\x74\x69o\x6e\x61r\x79\x56a\x72\x73", ], [ "f\x75\x6cl" => '~function\s(\w+)\(\$\w+\)\s?{\s?\$\w+\s?=\s?(?:[\'"][\\\\\w]+[\'"]\(\d+\s?[-+]\s?\d+\)\s?\.?\s?)+;\s?(?:\$\w+\s?=\s?\$\w+\([\'"](?:edoced_46esab|etalfnizg|ecalper_rts)[\'"]\);\s?)+\$\w+\s?=\s?\$\w+\(array\(((?:\s?"[^"]+",?)+)\),\s?[\'"]{2},\s?\$\w+\);\s?return\s?(?:\$\w+\(){2}\$\w+\)\);\s?}\s?(\$\w+\s?=\s?[\'"]\w+[\'"];)?\s?ob_start\(\);\s?\?>(.*?)<\?php\s?\$\w+\s?=\s?ob_get_clean\(\);\s?eval\(\1\(\$\w+\)\);\s?\?>~msi', "i\x64" => "e\x76\x61l\x42\x75f\x66\x65r", ], [ "f\x75\x6cl" => '~((?:\$\w+\s?=\s?[\'"]\w*[\'"];\s?){0,50}(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];(?:\$\w+\s?\.?=\s?(?:\$\w+{\d+}\.?)+;)+)\s?(eval\((\$\w+)\([\'"]([^\'"]+)[\'"]\)\);)~msi', "i\x64" => "e\x76\x61l\x44\x69c\x74\x69o\x6e\x61r\x79\x56a\x72\x73", ], [ "f\x75\x6cl" => '~\$\w+\s?=\s?[\'"]([^\'"]+)[\'"];(?:\$\w+\s?=\s?base64_decode\([\'"][^\'"]+[\'"]\);)+\$\w+\s?=\s?\$\w+\(\$\w+\(\$\w+\)\);\$\w+\s?=\s?\$\w+\(\$\w+\);(\$\w+)\s?=\s?[\'"]{2};for\(\$\w+\s?=\s?0\s?;\s?\$\w+\s?<\s?\$\w+\s?;\s?\$\w+\+\+\){\2\s?\.=\s?\$\w+\(\(\$\w+\(\$\w+\[\$\w+\]\)\^(\d+)\)\);}eval\(\2\);return;~msi', "i\x64" => "e\x76\x61l\x46\x75n\x63\x58o\x72\x65d", ], [ "f\x75\x6cl" => '~[\'"]-;-[\'"];(.*?\(\'\\\\\\\\\',\'/\',__FILE__\)\);.*?,[\'"];[\'"]\),[\'"]"[\'"]\);.*?)[\'"]-;-[\'"];((\$\w+)=[\'"]([^\'"]+)[\'"];.*?\$\w+\s?\.\s?\3,\s?[\'"]([^\'"]+)[\'"],\s?[\'"]([^\'"]+)[\'"]\)\)\).*?)[\'"]-;-[\'"];(.*?)[\'"]-;-[\'"];~msi', "i\x64" => "e\x76\x61l\x46\x75n\x63\x45x\x70\x6co\x64\x65d\x43\x6fn\x74\x65n\x74", ], [ "f\x75\x6cl" => '~(\$\w{0,100}\s?=\s?(?:chr\(\w{1,10}\)\s?\.?\s?){1,100};\s?(?:\$\w{0,100}\s?=\s?(?:\s?(?:[\'"][\\\\\w]{1,10}[\'"]|[\d\.]{1,5}\s[*\+\-\.]\s\d{1,5})\s?\.?)+?;\s?){1,10}(?:\$\w{0,100}\s?=\s?(?:chr\(\w{1,10}\)\s?\.?){1,100};)?\s?\$\w{1,50}\s?=\s?\$\w{1,50}\(\$\w{1,50}\((?:[\'"][^\'"]{1,500}[\'"]\s?\.?\s?)+\),\s?(?:[\'"][^\'"]{1,500}[\'"]\s?\.?\s?)+,\s?substr\(hash\([\'"]SHA256[\'"],(?:\s?[\'"]\d{1,15}[\'"]\s?\.?){2},\s?true\),\s?(\d{1,10}),\s?(\d{1,10})\),\s?OPENSSL_RAW_DATA,\s?\$\w{1,50}\);.*?)(\$\w{1,50})\s?=\s?\$\w{1,50}\([\'"]([^\'"]+)[\'"],\s*[\'"]{2},\s*[\'"]([^\'"]+)[\'"]\);\s?return\s?@eval\(((?:\$\w{1,50}\s?\()+\$\w{1,50}(?:\)\s?)+);\s?exit;~msi', "i\x64" => "e\x76\x61l\x45\x6ec\x72\x79p\x74\x65d\x56\x61r\x73", ], [ "f\x75\x6cl" => '~function\s(\w+)\((\$\w+),\s*(\$\w+)[^)]+\)\s*\{\s*\$\w+\s*=\s*\2;\s*\$\w+\s*=\s*\'\';\s*for\s*\(\$\w+\s*=\s*0;\s*\$\w+\s*<\s*strlen\(\$\w+\);\)\s*{\s*for\s*\(\$\w+\s*=\s*0;\s*\$\w+\s*<\s*strlen\(\3\)\s*&&\s*\$\w+\s*<\s*strlen\(\$\w+\);\s*\$\w+\+\+,\s*\$\w+\+\+\)\s*{\s*\$\w+\s*\.=\s*\$\w+\[\$\w+\]\s*\^\s*\3\[\$\w+\];\s*}\s*}\s*return \$\w+;\s*}\s*\$\w+\s*=\s*["\'][^"\']+[\'"];\s*\$\w+\s*=\s*[\'"]([^\'"]+)["\'];\s*(?:\$\w+\s*=\s*["\']+;\s*)+(?:foreach[^{]+{[^}]+}\s*)+(\$\w+)\s*=\s*\$\w+\([create_funion\'. "]+\);\s*(\$\w+)\s*=\s*\5\(["\'][^"\']*[\'"],\s*\$\w+\(\1\(\$\w+\(\$\w+\),\s*["\']([^\'"]+)["\']\)+;\s*\6\(\);~msi', "i\x64" => "x\x6f\x72e\x64\x4be\x79", ], [ "f\x75\x6cl" => '~(\$\w+)=str_rot13\(\'[^\']+\'\);(\$\w+)=str_rot13\(strrev\(\'[^\']+\'\)\);(\s*eval\(\1\(\2\(\'([^\']+)\'\)+;)+~msi', "i\x64" => "e\x76\x61l\x47\x7aB\x36\x34", ], [ "f\x75\x6cl" => '~(function\s*(_\d+)\((\$\w+)\)\s*{(\$\w+)=Array\(\'[^)]+\'\);return\s*base64_decode\(\4\[\3\]\);\})(.+?\2\(\d+\))+[^;]+;exit;~msi', "i\x64" => "e\x76\x61l\x41\x72r\x61\x79B\x36\x34", ], [ "f\x75\x6cl" => '~http_response_code\(\d{1,3}\);function\s?(\w{1,100})\(\$\w{1,50}\){if\s?\(empty\(\$\w{1,50}\)\)\s?return;\$\w{1,50}\s?=\s?"[^"]{1,500}";(?:(?:\$\w{1,50}\s?=\s?[\'"]{0,2}){1,4};){1,2}\$\w{1,50}\s?=\s?0;\$\w{1,50}\s?=\s?"";\$\w{1,50}\s?=\s?preg_replace\("[^"]{1,50}",\s?"",\s?\$\w{1,50}\);do{.*?while\s?\(\$\w{1,50}\s?<\s?strlen\(\$\w{1,50}\)\);return\s?\$\w{1,50};}eval\(\1\(hex2bin\("(\w{1,30000})"\)\)\);~msi', "i\x64" => "e\x76\x61l\x46\x75n\x63\x42i\x6e\x61r\x79", ], [ "f\x75\x6cl" => '~(\$\w{1,50}\s?=\s?\'\w{1,500}\';){1,5}\$\w{1,50}\s?=\s?(?:\$\w{1,50}\.?){1,10};\$\w{1,50}=\$\w{1,50}\([\'"]H\*[\'"],[\'"](\w{1,200})[\'"]\);\s?\$\w{1,50}\("[^"]{1,100}","(\\\\x[^\']{1,500})(\'[^\']{1,50000}\')\\\\x[^"]{1,50}",[\'"]{2}\);~msi', "i\x64" => "e\x76\x61l\x50\x61c\x6b\x46u\x6e\x63s", ], [ "f\x75\x6cl" => '~parse_str\s*\(((?:\s?\'[^\']+\'\s?\.?\s?){1,500}),\s?(\$\w{1,50})\s?\)\s?;@?\s?\2\s?\[\s?\d{1,5}\s?\]\(\s?\2\s?\[\d{1,5}\]\s?,\s?array\s?\(\s?\)\s?,\s?array\s?\(\s?\'([^\']{1,10})\'\s?\.(\$\w{1,50}\s?\[\s?\d\s?\]\s?\(\s?\$\w{1,50}\s?\[\s?\d\s?\]\s?\(\s?\$\w{1,50}\s?\[\s?\d{1,2}\s?\]\s?\(\s?)(\'[^\']{1,50000}\'\s?)\)\)\)\.\s?\'([^\']{1,10})\'\s?\)\s?\)\s?;~msi', "i\x64" => "p\x61\x72s\x65\x53t\x72\x46u\x6e\x63", ], [ "f\x75\x6cl" => '~eval\("\\\\(\$\w+)=(gz[^\)]+\)\);)"\);eval\("\?>"\.\1\);~msi', "i\x64" => "e\x76\x61l\x47\x7ai\x6e\x66l\x61\x74e", ], [ "f\x75\x6cl" => '~function\s?(\w{1,50})\(\$\w{1,50}\)\s?{\s?(\$\w{1,50})\s?=\s?\("([^"]{1,500})"\);\s?(?:\$\w{1,50}\s?=\s?(?:"[^"]+"|\$\w{1,50}|[\'"]{2});\s?)+for\(\$\w{1,50}\s?=\s?0;\s?\$\w{1,50}<strlen\(\$\w{1,50}\);\s?\)\s?{\s?for\(\$\w{1,50}\s?=\s?0;\s?\(\$\w{1,50}<strlen\(\2\)\s?&&\s?\$\w{1,50}<strlen\(\$\w{1,50}\)\);\s?\$\w{1,50}\+\+,\$\w{1,50}\+\+\){\s?(?:\$\w{1,50}\s?=\s?"[^"]+";\s?){1,2}\$\w{1,50}\s?\.=\s?\$\w{1,50}{\$\w{1,50}}\s?\^\s?\$\w{1,50}{\$\w{1,50}};\s?\$\w{1,50}\s?=\s?"[^"]+";\s?}\s?}\s?return\s?\$\w{1,50};\s?}\s?(\$\w{1,50})\s?=\s?preg_replace\("([^"]+)",\s?"",\s?"([^"]+)"\);\s?(?:\s?\$\w{1,50}\s?=\s?(?:"[^"]+"|\w{1,50}\(\$\w{1,50}\("[^"]+"\)\)|\$\w{1,50}\(\)\.\s?\w{1,50}\(\$\w{1,50}\("[^"]+"\)\)|"[^"]+"\s*\.\s*\w+\(\$\w+\("[^"]+"\)\));\s?){1,50}(\$\w{1,50}\(\$\w{1,50},(?:\$\w{1,50}\.?)+\);)\s?(?:\$\w{1,50}\s?=\s?"[^"]+";\s?|include\s?\$\w{1,50};\s){1,50}~msi', "i\x64" => "f\x75\x6ec\x56\x61r\x73", ], [ "f\x75\x6cl" => '~(\$\w+)\s*=\s*"([^"]+)";(?:\$\w+\s*=\s*(?:\1\[\d+\][\.;])+)+@?(?:\$\w+[\(,])+((?:\1\[\d+\][\.;\)])+)\)\),\$\w+\[\d+\],\$\w+\[\d+\]\);~msi', "i\x64" => "d\x69\x63t\x56\x61r\x73", ], [ "f\x75\x6cl" => '~\$\w{1,50}\s?=\s?(?:\'\'|\.|chr\(\d+\)|\'\w+\')+\s?;\$\w{1,50}\s?=\s?\$\w{1,50}\(\'\',array\(((?:"[^"]+",?)+)\)\);(?:\$\w{1,50}\s?=\s?(?:\'\'|\.|chr\(\d+\)|\'\w+\')+\s?;)+\$\w{1,50}\s?=\s?\$\w{1,50}\(\'\',\$\w{1,50}\(((?:\'[^\']+\'\s?\.?)+)\)\);\$\w{1,50}\(\);\$\w{1,50}\(\$\w{1,50}\(\$\w{1,50}\)\);~msi', "i\x64" => "d\x65\x63o\x64\x65d\x44\x6fu\x62\x6ce\x53\x74r\x53\x65t", ], [ "f\x75\x6cl" => '~(\$\w{1,100})=[\'"]([^"\']+)[\'"];(\$\w{1,100}=(?:(?:strrev\("[^"]+"\)|"[^"]+")\.?)+;(\$\w{1,100})\s?=\s?\$\w{1,100}\([\'"]([^"\']+)[\'"]\);\$\w{1,100}=(?:(?:strrev\("[^"]+"\)|"[^"]+")\.?)+;(\$\w{1,100})\s?=\s?\$\w{1,100}\(\'\1\',\$\w{1,100}\);\$\w{1,100}\(\1\);)~msi', "f\x61\x73t" => '~(\$\w{1,100})=[\'"]([^"\']+)[\'"];(\$\w{1,100}=(?:(?:strrev\("[^"]+"\)|"[^"]+")\.?)+;(\$\w{1,100})\s?=\s?\$\w{1,100}\([\'"]([^"\']+)[\'"]\);\$\w{1,100}=(?:(?:strrev\("[^"]+"\)|"[^"]+")\.?)+;(\$\w{1,100})\s?=\s?\$\w{1,100}\(\'\$\w{1,100}\',\$\w{1,100}\);\$\w{1,100}\(\$\w{1,100}\);)~msi', "i\x64" => "c\x72\x65a\x74\x65F\x75\x6ec\x53\x74r\x72\x65v", ], [ "f\x75\x6cl" => '~(\$\w+)\s*=\s*create_function\(\'\$\w+\',strrev\(\'[^\']+\'\)\);\s*\1\(strrev\(\'([^\']+)\'\)\);~msi', "i\x64" => "s\x74\x72r\x65\x76B\x61\x73e\x36\x34", ], [ "f\x75\x6cl" => '~(\$\w+)\s*=\s*"([^"]+)";if\(!function_exists\("([^"]+)"\)\){function\s*\3\(\$\w+\)\{\$\w+=(\d+);foreach\(array\(((?:"[0-9a-f]+",?)+)\)as\$\w+=>\$\w+\)[^}]+\}\}\3\(\1\."([^"]+)"\);~msi', "i\x64" => "c\x75\x73t\x6f\x6dD\x65\x63o\x64\x65", ], [ "f\x75\x6cl" => '~((?:\$\w+\s*=\s*[abcdehnoprstux\._64\'"]+;\s*)+)(\$\w+="?\w+["\(\)]*;\s*)+\$\w+="[^"]+";\s*\$\w+=(\$\w+\("([^"]+)"\);)[^/]+/pre>\';~msi', "i\x64" => "e\x78\x70D\x6f\x6fr\x43\x6fd\x65", ], [ "f\x75\x6cl" => '~include\((base64_decode\(\'([^\']+)\'\))\);~msi', "i\x64" => "i\x6e\x63l\x75\x64e\x42\x364", ], [ "f\x75\x6cl" => '~(\$\w+)=strrev\(\'nib2xeh\'\);(\$\w+)=array\(((?:\'[^\']+\',?)+)\);(\$\w+)\s*=\s*\'\';for\s*\(\$\w+\s*=\s*0;\s*\$\w+\s*<\s*\d+;\s*\$\w+\+\+\)\s*\{\4\s*\.=\s*str_replace\(array\(((?:\'([^\']*)\',?)+)\),\s*array\(((?:\'[^\']*\',?)+)\),\s*\2\[\$\w+\]\);\}eval\(\1\(\4\)\);~msi', "i\x64" => "n\x69\x622\x78\x65h", ], [ "f\x75\x6cl" => '~error_reporting\(0\);\s*\$\w+\s*=\s*"[0-9a-f]{32}";\s*((\$\w+)\s*=\s*((?:\w+\()+)\'([^\']+)\'\)+;\$\w+\s*=\s*"";for\s*\(\$\w+\s*=\s*0;\s*\$\w+\s*<\s*120;\s*\$\w+\+\+\)[^}]+}\$\w+\s*=\s*strlen\(\2\);\$\w+\s*=\s*strlen\(sha1\(hash\(str_rot13\("f\x75\x6e2\x35\x36"\),\s*md5\(\$\w+\)+;for[^}]+}[^}]+}eval\(\$\w+\);)~msi', "i\x64" => "f\x75\x6e2\x35\x36", ], [ "f\x75\x6cl" => '~(\$\w+)\s*=\s*((?:\w+\()+)\'([^\']+)\'\)+;\s*if\s*\(\s*\'\w{40,40}\'\s*==\s*sha1\(\s*\1\s*\)\s*\)\s*{\s*\1\s*=\s*gzinflate\s*\(\s*gzinflate\s*\(\s*base64_decode\(\s*\1\s*\)\s*\)\s*\)\s*;\s*\$\w{1,10}\s*=\s*""\s*;for\s*\([^)]+\)\s*{[^}]+}\s*(?:\s*\$[^;]+;\s*)+for\s*\([^)]+\)\s*{\s*\$[^;]+;\s*if\s*\([^)]+\)\s*{[^}]+}(?:\s*\$[^;]+;\s*)+}\s*eval\s*\(\s*\$\w+\s*\)\s*;\s*}\s*else\s*{[^}]+}~msi', "i\x64" => "f\x75\x6e2\x35\x36", ], [ "f\x75\x6cl" => '~(\$\w+)\s?=\s?\'([^\']+)\';\s?(\$\w+\s?=\s?(?:\1\[\d+\]\.?)+;\s?(?:(?:\$\w+\s?=\s?(?:\$\w+\()+(?:(?:\1\[\d+\])\.?|"[^"]+"\.?)+)\)+;\s?)+)(\$\w+\s?=\s?\$\w+\(\'H\*\',\s?\$\w+\(\'/\[([^]]+)\]\+/\w\',\'\',\s?(\$\w+)\(\1\)\)\);\s?eval\(\$\w+\);)~msi', "i\x64" => "e\x76\x61l\x50\x61c\x6b\x50r\x65\x67", ], [ "f\x75\x6cl" => '~((?:\$_\w{1,50}\s?=\s?"[^"]{1,100}";)+)@eval\("\?>"\.(\$_\w{1,50}\((/\*.*?\*\/)\$\w{1,50}\("[^"]+"\)\))\);~msi', "i\x64" => "e\x76\x61l\x56\x61r\x57\x69t\x68\x43o\x6d\x6de\x6e\x74", ], [ "f\x75\x6cl" => '~(?(DEFINE)(?\'s\'((?:chr\([0-9a-fx]+([/\-+\*][0-9a-fx]+)?\)|str_rot13\(\'[^\']+\'\)|base64_decode\(\'[^\']+\'\)|\'[^\']*\')[\.]?)+))(\$\w+)=create_function\(((?P>s)),((?P>s))\);\4\(base64_decode\(((?P>s))\)\);~msi', "i\x64" => "c\x72\x65a\x74\x65F\x75\x6ec\x4f\x62f", ], [ "f\x75\x6cl" => '~(\$[\w_]{1,50})\s*=\s*\[\s*base64_decode\s*\(\s*[\'"]([\w=]+)[\'"]\s*\)\s*,\s*([^;]{2,200})\]\s*;\s*(if\s*[^}]+}\s*else\s*{[^}]+}\s*function\s\w+[^}]+})~mis', "f\x61\x73t" => '~(\$[\w_]{1,50})\s*=\s*\[\s*base64_decode\s*\(\s*[\'"]([\w=]+)[\'"]\s*\)\s*,\s*([^;]{2,200})\]\s*;\s*(if\s*[^}]+}\s*else\s*{[^}]+}\s*function\s\w+[^}]+})~mis', "i\x64" => "b\x61\x73e\x36\x34A\x72\x72a\x79", ], [ "f\x75\x6cl" => '~(\$[\w]{1,34}\s*=\s*[\'"](?:[\\\\\w]{1,32}\\\[\\\\\w]{1,32})[\'"]\s*;\s*(?:\$[\w]{1,34}\s*=\s*[\'"][^\'"]+[\'"];){1,3})\s*@?eval\s*\(\s*([^;]{0,100})\);~mis', "i\x64" => "s\x69\x6dp\x6c\x65V\x61\x72s\x41\x6ed\x45\x76a\x6c", ], [ "f\x75\x6cl" => '~(if\(defined\(\'PHP_MAJOR_VERSION\'\)[^{]{1,30}{\s*if[^}]+}\s*}\s*.*?if\s*\(\s*!\s*function_exists\s*\(\s*\'nel\'\s*\)\s*\)\s*{\s*)(function\s*nel\s*\(\s*\$i\s*\)\s*{\s*\$[\w]+\s*=\s*array\(([^)]+)\);[^}]+})(.*}\s*exit\s*;\s*}\s*})~mis', "i\x64" => "r\x65\x70l\x61\x63e\x46\x75n\x63\x57i\x74\x68B\x61\x73e\x36\x34D\x65\x63o\x64\x65A\x72\x72a\x79", ], [ "f\x75\x6cl" => '~\$\w{1,50}\s?=\s?(?:\'[^\']+\'\.?)+;\$\w{1,50}\s?=\s?create_function\(\'\$\w{1,50}\',\$\w{1,50}\);((?:\$\w{1,50}\s?=\s?(?:\'[^\']+\'\.?)+;)+)\$\w{1,50}\(((?:\$\w{1,50}\()+"[^"]+"\)+;)~msi', "i\x64" => "c\x72\x65a\x74\x65F\x75\x6ec\x56\x61r\x73", ], [ "f\x75\x6cl" => '~\$\w{1,50}\s?=\s?json_decode\((base64_decode\([\'"][^\'"]+[\'"]\))\);~msi', "i\x64" => "j\x73\x6fn\x44\x65c\x6f\x64e\x64\x56a\x72", ], [ "f\x75\x6cl" => '~if\s?\(file_put_contents\(\$\w{1,50}\.[\'"][^\'"]+[\'"],(base64_Decode\([\'"][^\'"]+[\'"]\))\)\)echo\s?[\'"][^\'"]+[\'"];~msi', "i\x64" => "f\x69\x6ce\x50\x75t\x50\x75r\x65\x45n\x63\x6fd\x65\x64C\x6f\x6et\x65\x6et\x73", ], [ "f\x75\x6cl" => '~function\s?(\w{1,50})\((\$\w{1,50})\){for\s?\((\$\w{1,50})\s?=\s?0;\s?\3\s?<=\s?strlen\(\2\)-1;\s?\3\+\+\s?\){(\$\w{1,50})\s?\.=\s?\2{strlen\(\2\)-\3-1};}return\(\4\);}((?:eval\(\1\(\'[^\']+\'\)\);)+)~msi', "i\x64" => "e\x76\x61l\x46\x75n\x63\x52e\x76\x65r\x73\x65", ], [ "f\x75\x6cl" => '~function\s?(\w{1,50})\(\$\w{1,50}\)\s?{return\s?base64_decode\(\$\w{1,50}\);}(?:.*?\1\("[^"]+"\))+~msi', "f\x61\x73t" => '~function\s?\w{1,50}\(\$\w{1,50}\)\s?{return\s?base64_decode\(\$\w{1,50}\);}(?:.*?\w{1,50}\("[^"]+"\))+~msi', "i\x64" => "b\x61\x73e\x36\x34d\x65\x63o\x64\x65F\x75\x6ec\x73", ], [ "f\x75\x6cl" => '~error_reporting\(\s?0\s?\);\s?(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w{1,50})\s?=\s?(?:\1\[\d+\]\.?)+;\s?(\$\w{1,50})\s?=\s?eval\s?\(\3\s?\("((?:\\\\x\w{1,50})+)"\s?\([\'"]{1,2}([^"\']+)[\'"]{1,2}\)\)\);\s?create_function\(\'\',\s?\'}\'\.\4\.\'//\'\);~msi', "f\x61\x73t" => '~error_reporting\(\s?0\s?\);\s?(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?\$\w{1,50}\s?=\s?(?:\$\w{1,50}\[\d+\]\.?)+;\s?(\$\w{1,50})\s?=\s?eval\s?\(\$\w{1,50}\s?\("((?:\\\\x\w{1,5})+)"\s?\([\'"]{1,2}([^"\']+)[\'"]{1,2}\)\)\);\s?create_function\(\'\',\s?\'}\'\.\$\w{1,50}\.\'//\'\);~msi', "i\x64" => "e\x76\x61l\x43\x72e\x61\x74e\x46\x75n\x63\x57i\x74\x68D\x69\x63t\x69\x6fn\x61\x72y\x56\x61r", ], [ "f\x75\x6cl" => '~error_reporting\(\s?0\s?\);\s?(\$\w+)\s?=\s?"([^"]+)";(?:\$\w+\s?=\s?(?:\$\w+\[\d+\]\.?)+;)+function\s\w+\((?:\$\w+,?){5}\){\s*return\s?(?:\$\w+\.?){5};}(?:\$\w+\s?=\s?(?:[\'"][^\'"]*[\'"]\.?)+;)+\$\w+\s?=\s?\w+\((?:\$\w+,?){5}\);(?:\$\w+\s?=\s?(?:[\'"][^\'"]*[\'"]\.?)+;)+function\s(\w+)\((?:\$\w+,?){3}\){\s*return\s?(?:\$\w+\.?){3};}\$\w+\s?=\s?((?:\3\((?:(?:\$\w+|\.?[\'"][^"\']*[\'"]\.?)+,?){3}\)\.)+["\']{1,2}([^"\']+)[\'"]{1,2}\.\$\w+);\$\w+\(\'\',\s?\'}\'\.\$\w+\.\'//\'\);~msi', "i\x64" => "e\x76\x61l\x43\x72e\x61\x74e\x46\x75n\x63\x57i\x74\x68V\x61\x72s", ], [ "f\x75\x6cl" => '~(error_reporting\([^)]+\);define\(\'([^\']+)\',\s*\'[^\']+\'\);\$(?:_GET|GLOBALS)\[\2\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'(.*)\',([0-9a-fx]+),\s*([0-9\-]+)\)\)\);\s*)(.+?)((\$(?:_GET|GLOBALS)\{\2\}\{[a-fx\d]+\})(.+?\2)+.+)}(?:,!\d+\);|\)\);(\$\w+\((?:\$\w+\.?)+\);))~msi', "i\x64" => "e\x78\x70l\x6f\x64e\x53\x75b\x73\x74r\x47\x7ai\x6e\x66l\x61\x74e", ], [ "f\x75\x6cl" => '~error_reporting\([^)]+\);header\([^)]+\);ini_set\([^)]+\);ini_set\([^)]+\);define\(\'PASSWD\',\'[^)]+\);define\(\'VERSION\',\'Bypass[^)]+\);define\(\'THISFILE\'[^;]+;define\(\'THISDIR\',[^;]+;define\(\'ROOTDIR\',[^;]+;(((?:\$\w+=\'[^\']+\';)+)((?:\$\w+=str_replace\(\'[^\']+\',\'\',\'[^\']+\'\);)+)(\$\w+)=\$\w+\(\$\w+\(\'[^\']+\'\),\$\w+\(\'[^\']+\'\)\);\4\(((?:\$\w+\.?)+)\);)~msi', "i\x64" => "b\x61\x73e\x36\x34V\x61\x72s", ], [ "f\x75\x6cl" => '~function\s*(\w+)\(\$\w+,\$\w+\)\s*\{\$\w+=array\(\);for\(\$\w+=0;\$\w+<256;\$\w+\+\+\)(?:[^}]+}){2}return\s*\$res;\s*}\s*function\s*(\w+)\(\)\s*{(?:[^}]+}){12}(?:\$\w+=(?:chr\([0-9b]+\)\.?)+;)+\2\(\);@?eval\(\$\w+\(\1\(\$\{\'[^\']+\'\.(?:\(\'.\'\^\'.\'\)\.?)+}\[\(\'.\'\^\'.\'\)\.\(\'.\'\^\'.\'\)\],\$\w+\("([^"]+)"\)\)\)\);exit;~msi', "i\x64" => "c\x68\x720\x62", ], [ "f\x75\x6cl" => '~@?error_reporting\(0\);\s*@?ini_set\(\'error_log\',NULL\);\s*@?ini_set\(\'log_errors\',0\);\s*(\$\w+)=strrev\([base64_decode\'\.]+\);(\$\w+)=gzinflate\(\1\(\'([^\']+)\'\)\);\s*create_function\("","}\2//"\);~msi', "i\x64" => "c\x72\x65a\x74\x65F\x75\x6ec\x50\x6cu\x67\x69n", ], [ "f\x75\x6cl" => '~((?:\$\w+\s*=\s*str_replace\("[^"]+",\s*"",\s*"[^"]+"\);\s*)+)\s*(eval\((?:\$\w+\()+\'([^\']+)\'\)+;)~msi', "i\x64" => "s\x74\x72r\x65\x70l\x61\x63e\x45\x76a\x6c", ], [ "f\x75\x6cl" => '~(\$\w+)\s*\s*=\s*"[a-f0-9]{32,40}";\s*(\$\w+)\s*=\s*"[create_fution".]+;\s*(\$\w+)=@?\2\(\'(\$\w+),(\$\w+)\',\'[eval\'\.]+\("\\\\\1=\\\\"\5\\\\";\?>"[gzinflate\.\']+\(\s*[base64_decode\'\.]+\(\4\)+;\'\);\s*@?\$\w+\("([^"]+)",\1\);~msi', "i\x64" => "h\x61\x63k\x4d\x319", ], [ "f\x75\x6cl" => '~(\$\w+)\s*=\s*strrev\("[create_funtio"\.\s]+\);\s*(\$\w+)\s*=\s*\1\(\'(\$\w+)\',\s*strrev\(\';\)+\w+\$\([bas64_dcode\'\.\s]+\([bzdecompres\'\.\s]+">\?"\([eval\.\'\s]+\)\);\s*\2\("([^"]+)"\);~msi', "i\x64" => "e\x76\x340\x34", ], [ "f\x75\x6cl" => '~class\s+(_\w+)\s*{\s*private\s+static\s*\$\w{1,5}\s*;\s*public\s*static\s*function\s*(\w+)[^}]{1,1000}\s*}\s*private\s*static\s*function\s*\w{1,10}\s*\(\s*\)\s*{self::\$\w{1,5}\s*=\s*array\s*\(\s*([^)]+)\s*\);\s*}\s*}\s*class\s+(_\w+)\s*{\s*private\s+static\s*\$\w{1,5}\s*;\s*public\s*static\s*function\s*(\w+)[^}]{1,1000}\s*}\s*private\s*static\s*function\s*\w{1,10}\s*\(\s*\)\s*{self::\$\w{1,5}\s*=\s*array\s*\(\s*([^)]+)\s*\);\s*}\s*}\s*(.{1,5000}exit\s*;\s*})~mis', "i\x64" => "t\x77\x6fH\x61\x73h\x46\x75n\x63", ], [ "f\x75\x6cl" => '~(\s*function\s*(\w+)\((\$\w+)\)\s*\{\s*(?:\$\w+\s*=\s*[gzinflatebs64_dco\'\.]+;\s*)+\3\s*=\s*(?:\$\w+\()+\3\)+;\s*return\s*\3;}(\$\w+)\s*=\s*\'([^\']+)\';\s*(\$\w+)\s*=\s*\'\2\';\s*\3\s*=\s*\6\(\'[^)]+\);\s*(\$\w+)\s*=\s*\3\(\'\',\6\(\4\)+;\7\(\);)\s*\w+\(\d+(,\'[^\']+\',\'[^\']+\')?\);~msi', "i\x64" => "s\x65\x74V\x61\x72s", ], [ "f\x75\x6cl" => '~(?:\$\w+=\'[gzuncompresbae64_dtfi\.\']+;\s*)+\$\w+=\$\w+\(\'(\$\w+)\',\'[eval\'\.]+\(\1\);\'\);\s*(\$\w+)=\'([^\']+)\';\s*\$\w+\("\?>"\.(\$\w+\()+\2\)+;~msi', "i\x64" => "c\x72\x65a\x74\x65F\x75\x6ec\x47\x7aB\x36\x34", ], [ "f\x75\x6cl" => '~(\$\w{1,50})=(?:[\'"][create_funcion]+[\'"]\.?)+;\$\w{1,50}=\1\([\'"](\$\w{1,50})[\'"],(?:[\'"][eval(gzuncomprsb64_d]+[\'"]\.?)+[\'"][decode(]+\2\)+;[\'"]\);\$\w{1,50}\([\'"]([^\'"]+)[\'"]\);~msi', "i\x64" => "c\x72\x65a\x74\x65F\x75\x6ec\x47\x7aB\x36\x34", ], [ "f\x75\x6cl" => '~(\$\w+)=strrev\(\'[base64_dco]+\'\);\s?(\$\w+)=gzinflate\(\1\(\'([^\']+)\'\)\);\s?create_function\("","}\2//"\);~msi', "i\x64" => "c\x72\x65a\x74\x65F\x75\x6ec\x47\x7aI\x6e\x66l\x61\x74e\x42\x364", ], [ "f\x75\x6cl" => '~(\$\w+)\s*=\s*(\(?\s*gzinflate\s*\(\s*base64_decode\s*)\(\s*\'([^\']+)\'\s*\)\s*\)\s*\)?\s*;\s*\$\w+\s*=\s*@?create_function\(\'([^\']*)\',\s*(?:\1|\'@?eval\(\4\)[^\']+\')\)\s*;\s*@?\$\w+(?:\(\)|\(\1\));~msi', "i\x64" => "c\x72\x65a\x74\x65F\x75\x6ec\x47\x7aI\x6e\x66l\x61\x74e\x42\x364", ], [ "f\x75\x6cl" => '~(\$\w+)="((?:\\\\\w+)+)";((\$\w+)=\1\("[^"]+"\);)@(eval\(\1\("[^"]+"\)\);)(\$\w+=(?:\$\w+\[\d+\]\.?)+;)((\$\w+)=(\$\w+)\(\1\("([^"]+)"\),-1\);)((?:\$\w+=(?:\$\w+\[\d+\]\.?)+;)+)@(eval\(\$\w+\(\1\("[^"]+"\)\)\));~msi', "i\x64" => "w\x73\x6fS\x68\x65l\x6c\x44i\x63\x74V\x61\x72s", ], [ "f\x75\x6cl" => '~error_reporting\(\d+\);(\$\w+)="([^"]+)";(\$\w+)=explode\("([^"]+)","([^"]+)"\);foreach\(\3\sas\s\$\w+=>\$\w+\){\$\w+=preg_split\("/\x2f",\$\w+,-1,[^)]+\);\3\[\$\w+\]=implode\("",array_reverse\(\$\w+\)\);}(\$\w+)=explode\("([^"]+)","([^"]+)"\);foreach\(\6\sas\s\$\w+=>\$\w+\){\${\$\w+}=\3\[\$\w+\];}function\s(\w+)\(\$\w+,\$\w+\){\$\w+=\${"[^"]+"}\["([^"]+)"\]\("/\x2f",\$\w+,-1,[^)]+\);foreach\(\$\w+\sas\s\$\w+=>\$\w+\){\$\w+\[\$\w+\]=\${"[^"]+"}\["([^"]+)"\]\(\${"[^"]+"}\["([^"]+)"\]\(\$\w+\)\+\$\w+\);}\$\w=\${"[^"]+"}\["([^"]+)"\]\("",\$\w+\);return\s\$\w+;}(\$\w+)=\9\(\14,-2\);@ini_set\(\'[^\']+\',\'[^\']+\'\);((?:\$\w+=(?:\$\w+\[\d+\]\.?)+;)(\$\w+)=(?:\$\w+\[\d+\]\.?)+;)function\s(\w+)\(\$\w+\){\$\w+=\9\(\$\w+,1\);\$\w+=strtr\(\$\w+,"([^"]+)","([^"]+)"\);return\s\$\w+;}((?:\$\w+\.?=(?:\$\w+\[\d+\]\.?)+;)+)(\$\w+)=\${"[^"]+"}\["[^"]+"\]\(\'(?:\$\w+,?)+\',(\$\w+)\(\17\("([^"]+)"\)\)\);@\${"[^"]+"}\["[^"]+"\]\((?:@\$\w+,?)+\);~msi', "i\x64" => "f\x75\x6ec\x44\x69c\x74\x56a\x72\x73", ], [ "f\x75\x6cl" => '~((\$\w{1,10})\s*=\s*\(\s*[\'"]([^\'"]{40,50000})[\'"]\s*\)\s*;\s*(\$\w{1,10})\s*=\s*base64_decode\s*\(\s*\2\s*\)\s*;)\s*(\$\w{1,10}\s*=\s*fopen\s*[^;]+;\s*echo\s*fwrite[^;]+;\s*fclose[^;]+;)~mis', "i\x64" => "f\x75\x6ec\x46\x69l\x65\x32", ], [ "f\x75\x6cl" => '~function\s*(\w+)\((\$\w+)\)\s*\{\s*\2=((?:\w+\()+)\2(\)+);\s*for\(\$\w=0;\$\w+<strlen\(\2\);\$\w+\+\+\)\s*\{\s*\2\[\$\w+\]\s*=\s*chr\(ord\(\2\[\$\w+\]\)-(\d+)\);\s*\}\s*return\s*\2;\s*\}eval\(\1\(("[^"]+")\)\);~mis', "i\x64" => "s\x65\x637\x6f\x72", ], [ "f\x75\x6cl" => '~error_reporting\(0\);\s*class\s*(\w+)\{\s*private\s*\$\w+=\s*array\(\s*((?:"[^"]+"=>"[^"]+",?\s*)+)\)\s*;\s*public\s*function\s*(\w+)\s*\(\s*\$\w+,\s*\$\w+\s*\)\s*{[^}]+}\s*public\s*function\s*(\w+)\s*\(\$\w+,\$\w+\)\s*{[^}]+}\s*private\s*function\s*\w+\((?:\$\w+,?){7}\)\s*{[^}]+}return\s*array\((?:\$\w+,?){3}\);}}\s*(\$\w+)=new\s*\1;\s*(\$\w+)=\5->\3\(\'tmhapbzcerff\',array\(\'onfr\',\'_qrpbqr\',\'fgeeri\'\)\);\5->\4\(\6,\'\'\);\s*die\(\);~msi', "i\x64" => "c\x6c\x61s\x73\x57i\x74\x68A\x72\x72a\x79\x73", ], [ "f\x75\x6cl" => '~error_reporting\(0\);(\s*(\$\w+)="[asert\."]+;\s*\$(\w+)=\2\(strrev\("([^"]+)"\)\);\s*\$\{\'\3\'\};)~msi', "i\x64" => "a\x73\x73e\x72\x74S\x74\x72r\x65\x76", ], [ "f\x75\x6cl" => '~error_reporting\(0\);\$\w+\="[^"]+";\$\w+\=explode\("[^"]+","[^"]+"\);foreach\(\$\w+ as \$\w+\=\>\$\w+\)\{\$\w+\=preg_split\("/\x2f",\$\w+,\-1,PREG_SPLIT_NO_EMPTY\);\$\w+\[\$\w+\]\=implode\("",array_reverse\(\$\w+\)\);\}\$\w+\=explode\("[^"]+","[^"]+"\);foreach\(\$\w+ as \$\w+\=\>\$\w+\)\{\$\{\$\w+\}\=\$\w+\[\$\w+\];\}function \w+\(\$\w+,\$\w+\)\{\$\w+\=\$\{"[^"]+"\}\["\w+"\]\("/\x2f",\$\w+,\-1,PREG_SPLIT_NO_EMPTY\);foreach\(\$\w+ as \$\w+\=\>\$\w+\)\{\$\w+\[\$\w+\]\=\$\{"[^"]+"\}\["[^"]+"\]\(\$\{"[^"]+"\}\["\w+"\]\(\$\w+\)\+\$\w+\);\}\$\w+\=\$\{"[^"]+"\}\["\w+"\]\("",\$\w+\);return \$\w+;\}\$\w+\=\w+\(\$\w+,\-2\);@ini_set\(\'memory_limit\',\'1024M\'\);(?:\$\w+\=(?:\$\w+\{\d+\}\.?)+;)+function \w+\(\$\w+\)\{\$\w+\=\w+\(\$\w+,(\d+)\);\$\w+\=strtr\(\$\w+,"([^"]+)","([^"]+)"\);return \$\w+;\}(?:\$\w+\.?=(?:\$\w+\{\d+\}\.?)+;)+\$\w+\=\$\{"[^"]+"\}\["\w+"\]\(\'\$\w+,\$\w+,\$\w+,\$\w+\',\$\w+\(\w+\("([^"]+)"\)\)\);@\$\{"[^"]+"\}\["\w+"\]\(@\$\w+,@\$\w+,@\$\w+,@\$\w+,@\$\w+,@\$\w+\);~msi', "i\x64" => "b\x36\x34s\x74\x72t\x72", ], [ "f\x75\x6cl" => '~error_reporting\(\d\);function\s(\w{1,50})\(\$\w{1,50},\$\w{1,50}\){if\(file_exists\("[^"]+"\)\){touch\(__FILE__,filemtime\("[^"]+"\)\);}\$\w{1,50}=str_replace\(array\(\'([^\']+)\',\'([^\']+)\'\),array\(\'([^\']+)\',\'([^\']+)\'\),\$\w{1,50}\);\$\w{1,50}=strrev\(\'[base64]+\'\)\."_"\.strrev\(\'[decode]+\'\);\$\w{1,50}=\$\w{1,50}\(\$\w{1,50}\);\$\w{1,50}=strrev\(\'[gzinflate]+\'\);return@\$\w{1,50}\(\$\w{1,50}\);}\s?\$\w{1,50}=\'([^;]+;)([^\']+)">\';preg_match\(\'#\6\(\.\*\)">#\',\$\w{1,50},\$\w{1,50}\);\$\w{1,50}=\$\w{1,50}\[1\];\$\w{1,50}=\1\(\$\w{1,50},\$\w{1,50}\);if\(isset\(\$\w{1,50}\)\){eval\(\$\w{1,50}\);}~msi', "i\x64" => "g\x7a\x426\x34\x73t\x72\x52e\x70\x6ca\x63\x65D\x61\x74a\x49\x6da\x67\x65", ], [ "f\x75\x6cl" => '~(\$\w{1,50})=array\((?:base64_decode\([\'"][^\'"]+[\'"]\),?){2}base64_Decode\(strrev\(str_rot13\(explode\(base64_decode\([\'"][^\'"]+[\'"]\),file_get_contents\(__FILE__\)\)\[1\]\){4};preg_replace\(\1\[0\],serialize\(eval\(\1\[2\]\)\),\1\[1\]\);exit\(\);\s?\?>\s*([^\s]{1,5000})~msi', "i\x64" => "s\x65\x72i\x61\x6ci\x7a\x65F\x69\x6ce\x43\x6fn\x74\x65n\x74", ], [ "f\x75\x6cl" => '~(function\s\w{1,50}\(\$\w{1,50}\)\s?{\s?global\s(?:\$\w{1,50},?\s*)+;\s*\$\w{1,50}\(\$\w{1,50},\s?\$\w{1,50},\s?\$\w{1,50}\(\)\s?\+\s?\w{1,50}\(\$\w{1,50}\),\s?(?:\$\w{1,50}\s?,?\.?\s*)+\);\s*}\s*global\s?(?:\$\w{1,50},?\s*)+;\s*(?:\$\w{1,50}\s?=\s?\'[^\']+\';\s*)+function\s?\w{1,50}\(\$\w{1,50}\)\s{\s*global\s?(?:\$\w{1,50},?\s*)+;.*?return\s\$\w{1,50}\(\$\w{1,50}\);\s}\s*(?:\$\w{1,50}\s?=\s?\'[^\']*\';\s*)+(?:function\s\w{1,50}\(.*?(?:\$\w{1,50}\s?=\s?\'[^\']*\';\s*)+)+(?:\$\w{1,50}\s\.?=\s\$\w{1,50};\s*)+.*?extract\(\w{1,50}\(get_defined_vars\(\)\)\);)\s*(\$\w{1,50}\(\d\);\s*\$\w{1,50}\(\$\w{1,50},\s?0\);\s*\$\w{1,50}\s=\s\$\w{1,50}\(\$_REQUEST,\s?\$_COOKIE,\s?\$_SERVER\);.*?\$\w{1,50}\(\$\w{1,50}\);\s*echo\s?\$\w{1,50};)~msi', "i\x64" => "g\x6c\x6fb\x61\x6cV\x61\x72s\x4d\x61n\x79\x52e\x70\x6ca\x63\x65", ], [ "f\x75\x6cl" => '~\$\w{1,50}\s{0,100}=\s{0,100}"([^"]{1,50000})";\s?(\$\w{1,50}\s?=\s?(?:["][^"]{1,5}["]\.?)+;\s?\s?(?:\s?\$\w{1,50}\s?\.?=(?:\s?(?:\s?"[^"]+"|\$\w{1,50})\s?\.?)+;\s?)+)\$\w{1,50}\s?\(\s?\$\w{1,50},((?:\$\w{1,50}\()+\$\w{1,50}\)+),"[^"]{1,100}"\);~msi', "i\x64" => "c\x6f\x6ec\x61\x74V\x61\x72s\x50\x72e\x67\x52e\x70\x6ca\x63\x65", ], [ "f\x75\x6cl" => '~(?:\$\w{1,50}\s?=\s?(?:"[^"]+"\.?)+;)+\s?echo\sjson_encode\(array\([\'"][^"\']+[\'"]=>@\$\w{1,50}\(__FILE__,(\$\w{1,50}\([\'"][^"\']+[\'"]\)\))>0,[\'"][^"\']+[\'"]=>__FILE__\)\);exit;~msi', "i\x64" => "f\x69\x6ce\x50\x75t\x43\x6fn\x74\x65n\x74\x73B\x36\x34D\x65\x63o\x64\x65d", ], [ "f\x75\x6cl" => '~(\$\w{1,50})\s?=\s?base64_decode\([\'"][^\'"]+[\'"]\);\s?\$\w{1,50}\s?=\s?\$_POST\[[\'"][^\'"]+[\'"]\]\.[\'"][^\'"]+[\'"];\s?\$\w{1,50}\s?=\s?fopen\([\'"][^\'"]+[\'"]\.\$\w{1,50},\s?[\'"]w[\'"]\);\s?fwrite\(\$\w{1,50},\1\);~msi', "i\x64" => "f\x77\x72i\x74\x65B\x36\x34D\x65\x63o\x64\x65d\x53\x74r", ], [ "f\x75\x6cl" => '~file_put_contents\(\$_SERVER\[\'[^\']+\'\]\.\'[^\']+\',base64_decode\(\'[^\']+\'\)\);~msi', "i\x64" => "f\x69\x6ce\x50\x75t\x43\x6fn\x74\x65n\x74\x73B\x36\x34C\x6f\x6et\x65\x6et", ], [ "f\x75\x6cl" => '~((\$\w{1,50})\s?=\s?((?:chr\(\d{1,5}\)\.?)+);)(\$\w{1,50})\s?=\s?(?:\2\[\d{1,5}\]\.?)+;(\$\w{1,50})\s?=\s?(?:\2\[\d{1,5}\]\.?)+;\4\(\5\(null,\s?((?:\2\[\d{1,5}\]\.?)+)\)\);~msi', "i\x64" => "c\x68\x72D\x69\x63t\x43\x72e\x61\x74e\x46\x75n\x63", ], [ "f\x75\x6cl" => '~(?:function\s\w{1,50}\((?:\$\w{1,50}\,?)+\){return\sstr_replace\((?:\$\w{1,50}\,?)+\);}\s?){3}(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?\$\w{1,50}\s?=\s?\w{1,50}\([\'"]([^\'"]+)[\'"],\'\',\1\);\s?(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?\$\w{1,50}\s?=\s?\w{1,50}\([\'"][^\'"]+[\'"],\'\',\$\w{1,50}\);\s?){2}\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?\$\w{1,50}\s?=\s?\$\w{1,50}\(\$\w{1,50},\$\w{1,50}\.\'\(\'\.\1\.\'\(\'\.\$\w{1,50}\.\'\)\);\'\);\s?\$\w{1,50}\([\'"]([^\'"]+)[\'"]\);~msi', "i\x64" => "s\x74\x72R\x65\x70l\x61\x63e\x46\x75n\x63\x73E\x76\x61l\x56\x61r", ], [ "f\x75\x6cl" => '~\$\w{1,50}\s?=\s?"\\\\x[^"]+";\${\$\w{1,50}}\s?=\s?base64_decode\("(.*?\\\\x[^"]+")\);\s?eval\(".*?\\\\x[^\$]+\$\w{1,50}\\\\"\);"\);~msi', "i\x64" => "B\x36\x34S\x6c\x61s\x68\x65d\x53\x74r", ], [ "f\x75\x6cl" => '~(\$\w{1,50})\s?=\s?array\((?:[\'"][base64_dco]+[\'"],?\s?)+\);\s?array_splice\(\1,\s?4,\s?0,\s?8\*8\);\s?(\$\w{1,50})\s?=\s?implode\(\'\',\s?array_reverse\(\1\)\);\s?(\$\w{1,50})\s?=\s?\2\([\'"]([^\'"]+)[\'"]\);\s?eval\(\3\);~msi', "i\x64" => "B\x36\x34A\x72\x72a\x79\x53t\x72\x45v\x61\x6c", ], [ "f\x75\x6cl" => '~(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?\$\w{1,50}\s?=\s?(?:\1\[\d+\]\.?)+;\s?@\$\w{1,50}\((?:\1\[\d+\]\.?)+,(?:\1\[\d+\]\.?)+"\("\.(?:\1\[\d+\]\.?)+\'\([\'"]([^\'"]+)[\'"]\)\);\',"\."\);~msi', "i\x64" => "D\x69\x63t\x56\x61r\x73\x50r\x65\x67R\x65\x70l\x61\x63e\x42\x364", ], [ "f\x75\x6cl" => '~(\$\w+\s*=\s*\'[bs64_dcogzinflate\.\'\s]+;\s*)+(\$\w+)\s*=\s*\'([^\']+)\';\s*eval\((?:\$\w+\()+\2\)+;~msi', "i\x64" => "e\x76\x61l\x56\x61r\x42\x364", ], [ "f\x75\x6cl" => '~(if\s*\(\!function_exists\s*\("([^"]+)"\)\)\s*\{\s*function\s*\2\s*\((\$\w+)\)\s*\{\s*(\$\w+)\s*=\s*"";\s*(\$\w+)\s*=\s*0;\s*\$\w+\s*=\s*strlen\s*\(\3\);\s*while\s*\(\$\w+\s*<\s*\$\w+\)\s*\{\s*if\s*\(\3\[\5\]\s*==\s*\'\s\'\)\s*\{\s*\4\s*\.=\s*"\s";\s*\}\s*else\sif\s*\(\3\[\5\]\s*==\s*\'!\'\)\s*\{\s*\4\s*\.=\s*chr\s*\(\s*\(ord\s*\(\3\[\5\+\d\]\)-ord\s*\(\'A\'\)\)\*16\+\s*\(ord\s*\(\3\[\5\+\d\]\)-ord\s*\(\'a\'\)\)\);\s*\5\s*\+=\s*2;\s*\}\s*else\s*\{\s*\4\s*\.=\s*chr\s*\(ord\s*\(\3\[\5\]\)\+1\);\s*\}\s*\5\+\+;\s*\}\s*return\s*\4;\s*\}\s*\}\s*)eval\s*\(\2\s*\(\'([^\']+)\'\)\);~msi', "i\x64" => "d\x65\x63o\x64\x65A\x43\x68a\x72", ], [ "f\x75\x6cl" => '~(\$\w+)="([^"]+)";(\$\w+)="[str_eplac"\.]+";((?:\$\w+\s*=\s*\3\("([^"]+)","","[^"]+"\);)+)(\$\w+)\s*=\s*\$\w+\(\'\',\s*((?:\$\w+\()+\1\)\))\);\6\(\);~msi', "i\x64" => "s\x74\x72R\x65\x70l\x61\x63e\x43\x72e\x61\x74e\x46\x75n\x63", ], [ "f\x75\x6cl" => '~function\s*(\w+)\((\$\w+)\)\s*\{\s*\$\w+\s*=\s*strlen\(trim\(\2\)+;\s*\$\w+\s*=\s*\'\';\s*(\$\w+)\s*=\s*0;\s*while\s*\(\(\(\$\w+\s*<\s*\$\w+\)+\s*\{\s*(\$\w+)\s*\.=\s*pack\([\'"]C[\'"],\s*hexdec\(substr\(\2,\s*\3,\s*2\)\)\);\s*\3\s*\+=\s*2;\s*\}\s*return\s*\4;\s*\}\s*eval\(\1\([\'"]([0-9a-f]+)[\'"]\)\s*\.\s*\'([^\']+\'\)+;)\s*\'\);~msi', "i\x64" => "e\x76\x61l\x62\x69n\x32\x68e\x78", ], [ "f\x75\x6cl" => '~function\s\w{1,50}\(\$\w{1,50},\s?\$\w{1,50}\)\s?{\s?return;\s?}\s?function\s\w{1,50}\((?:\$\w{1,50}\s?=\s?"",?\s?){2}\)\s?{.*?(?:function\s\w{1,50}\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}\s?)+function\s\w{1,50}\(\).*?(?:function\s\w{1,50}\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}\s?)+function\s\w{1,50}\(\).*?(?:function\s\w{1,50}\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}\s?)+(?:header\(\w{1,50}\([\'"][^\'"]+[\'"]\)\);\s?)+define.*?PDO\(.*?\$\w{1,50}\s?=\s?0;\s?function\s?\w{1,50}\(\$\w{1,50}\)\s?{\s?global.*?function\s(\w{1,50})\(\$\w{1,50}\)\s?{\s?\$\w{1,50}\s?=\s?"";\s?for\s?\(\$\w{1,50}\s?=\s?0;\s?\$\w{1,50}\s?<\s?strlen\(\$\w{1,50}\)\s?-\s?1;\s?\$\w{1,50}\s?\+=2\)\s?{\s?\$\w{1,50}\s?\.=\s?chr\(hexdec\(\$\w{1,50}\[\$\w{1,50}\]\s?\.\s?\$\w{1,50}\[\$\w{1,50}\s?\+\s?1\]\)\s?\^0x66\);\s?}\s?return\s\$\w{1,50};\}(?:.*?(?:function\s\w{1,50}\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}\s?)+)+~msi', "i\x64" => "m\x61\x6ey\x46\x75n\x63\x73W\x69\x74h\x43\x6fd\x65", ], [ "f\x75\x6cl" => '~((?:\$GLOBALS\["[^"]+"\]=base64_decode\("[^"]*"\);)+).{0,10}((?:\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]=base64_decode\(\$GLOBALS\["[^"]+"\]\);)+).{0,10}((?:\$GLOBALS\[\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]\]=base64_decode\(\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]\);)+).{0,10}(\$\w+)=\$_POST\[\$GLOBALS\[\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]\]\];if\(\4\!=\$GLOBALS\[\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]\]\)\s*\{(\$\w+)=base64_decode\(\$_POST\[\$GLOBALS\[\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]\]\]\);@?eval\("\\\\\$\w+=\5;"\);\}~msi', "i\x64" => "m\x61\x6ey\x47\x6co\x62\x61l\x73", ], [ "f\x75\x6cl" => '~(\$[0o]+)="([\\\\x0-9a-f]+)";(\$[0o]+)=@?\1\(\'([^\']+)\',"([\\\\x0-9a-f]+)"\);@?\3\("([^"]+)"\);~msi', "i\x64" => "g\x7a\x426\x34\x46u\x6e\x63", ], [ "f\x75\x6cl" => '~(?:(?:session_start|error_reporting|set_time_limit)\(\d*\);\s?)+(?:@?ini_set\([\'"][^\'"]+[\'"],[\'"][^\'"]+[\'"]\);\s?)+((\$\w{1,50})\s?=\s?(?:[\'"][base64_dco]+[\'"]\.?)+;\s(\$\w{1,50})\s?=\s?\2\(((?:[\'"][^\'"]+[\'"]\.?)+)\);)\s?(\$\w{1,50})\s?=\s?array\(((?:(?:\s?\3\((?:[\'"][^\'"]+[\'"]\.?)+\)(?:\.?)?|\3|\2|(?:chr\(\d+\)\.?))+,\s?)+\${(?:chr\(\d+\)\.?)+}\[(?:chr\(\d+\)\.?)+\])\);\s?(?:.*?\5\[\d+\])+~msi', "i\x64" => "d\x69\x63t\x41\x72r\x61\x79F\x75\x6ec\x56\x61r\x73", ], [ "f\x75\x6cl" => '~function\s(\w{1,50})\(\){\$\w{1,50}\s?=\s?[\'"]([^\'"]+)[\'"];\$\w{1,50}\s?=\s?str_rot13\(\$\w{1,50}\);\$\w{1,50}\s?=\s?base64_decode\([\'"]([^\'"]+)[\'"]\);(\$\w{1,50})\s?=\s?@\$\w{1,50}\(\'\',\s?pack\(\'H\*\',\s?\$\w{1,50}\)\);\s?\4\(\);\s?}\1\(\);~msi', "i\x64" => "c\x72\x65a\x74\x65F\x75\x6ec\x50\x61c\x6b\x53t\x72\x52o\x74\x313", ], [ "f\x75\x6cl" => '~error_reporting\(0\);\s?(?:\s?function\s(\w{1,50})\((?:\$\w{1,50}\,?\s?){3}\)\s?{\s?return\s?[\'"]{2}\s?\.\s?(?:\$\w{1,50}\s?\.\s?[\'"]{2}\s?\.?\s?)+;\s*}|\s?(?:\w{1,50}:)?(\$\w{1,50})\s?=\s?"([^"]+)";){2}\s?(?:\s?(?:\w{1,50}:)?\$\w{1,50}\s?=\s?\1\((?:\2\[0\d{1,5}\][,.\s\'"]*)+\);\s?)+\s?print_r\(\2\[0\d{1,5}\]\);\s?echo\s?"[^"]+";\s*(\$\w{1,50})=\1\((?:\1\((?:(?:\$\w{1,50}|""),?)+\),?\.?)+\)\."\'([^\'"]+)\'"\.\1\((?:\2\[0\d{1,5}\],?)+\."",\2\[0\d{1,5}\]\);\s?print_r\(\$\w{1,50}\);\s?(?:\$\w{1,50}=\1\((?:\2\[0\d{1,5}\][.,]?)+\);\s?)+\$\w{1,50}=\1\(\1\((?:\$\w{1,50},?)+\),\$\w{1,50},\1\((?:\$\w{1,50},?)+\)\);\s?\$\w{1,50}\(create_function,array\("","}"\.\4\."/\x2f"\)\);~msi', "i\x64" => "d\x69\x63t\x56\x61r\x73\x43r\x65\x61t\x65\x46u\x6e\x63", ], [ "f\x75\x6cl" => '~(?:function\s(\w{1,50})\((?:\$\w{1,50}\,?\s?){3}\)\s?{\s?return\s?[\'"]{2}\s?\.\s?(?:\$\w{1,50}\s?\.\s?[\'"]{2}\s?\.?\s?)+;\s*}\s?|(?:\w{1,50}:)?(\$\w{1,50})\s?=\s?"([^"]+)";\s?){2}(?:\s?\$\w{1,50}\s?=\s?\1\((?:(?:(?:\2\[\d+\])?[,.\s\'"]*)+|(?:\s?\1\((?:\$\w{1,50}[,.\s\'"]*)+\),?)+)\);)+\s?(\$\w{1,50})\s?=\s?\1\((?:\s?\1\((?:\$\w{1,50}[,.\s\'"]*)+\),?)+\)\s?\.\s?"\'([^"]+)\'"\s?\.\s?\1\((?:(?:\2\[\d+\])?[,.\s\'"]*)+\);\s?\$\w{1,50}\(\$\w{1,50},\s?array\(\'\',\s?"}"\s?\.\s?\4\s?\.\s?"/\x2f"\)\);~msi', "i\x64" => "d\x69\x63t\x56\x61r\x73\x43r\x65\x61t\x65\x46u\x6e\x63", ], [ "f\x75\x6cl" => '~function\s(\w{1,50})\((\$\w{1,50})\)\s?{.*?\$\w+\s?=\s?"[^"]+";\$\w{1,50}\s?=\s?str_split\(\$\w{1,50}\);\$\w{1,50}\s?=\s?array_flip\(\$\w{1,50}\);\$\w{1,50}\s?=\s?0;\$\w{1,50}\s?=\s?"";\$\w{1,50}\s?=\s?preg_replace\("[^"]+",\s?"",\s?\$\w{1,50}\);do\s?{(?:\$\w{1,50}\s?=\s?\$\w{1,50}\[\$\w{1,50}\[\$\w{1,50}\+\+\]\];){4}\$\w{1,50}\s?=\s?\(\$\w{1,50}\s?<<\s?2\)\s?\|\s?\(\$\w{1,50}\s?>>\s?4\);\$\w{1,50}\s?=\s?\(\(\$\w{1,50}\s?&\s?15\)\s?<<\s?4\)\s?\|\s?\(\$\w{1,50}\s?>>\s?2\);\$\w{1,50}\s?=\s?\(\(\$\w{1,50}\s?&\s?3\)\s?<<\s?6\)\s?\|\s?\$\w{1,50};\$\w{1,50}\s?=\s?\$\w{1,50}\s?\.\s?chr\(\$\w{1,50}\);if\s?\(\$\w{1,50}\s?!=\s?64\)\s?{\$\w{1,50}\s?=\s?\$\w{1,50}\s?\.\s?chr\(\$\w{1,50}\);}if\s?\(\$\w{1,50}\s?!=\s?64\)\s?{\$\w{1,50}\s?=\s?\$\w{1,50}\s?\.\s?chr\(\$\w{1,50}\);}}\s?while\s?\(\$\w{1,50}\s?<\s?strlen\(\$\w{1,50}\)\);return\s?\$\w{1,50};}\s?.*?function\s(\w{1,50})\(\){\$\w{1,50}\s?=\s?@file_get_contents\(\w{1,50}\(\)\);.*?(\$\w{1,50})\s?=\s?"([^"]{1,20000})";.*?\4\s?=\s?@unserialize\(\1\(\4\)\);.*?(function\s(\w{1,50})\(\$\w{1,50}=NULL\){foreach\s?\(\3\(\)\s?as.*?eval\(\$\w{1,50}\);}}}).*?(\7\(\);)~msi', "i\x64" => "d\x65\x63o\x64\x65d\x46\x69l\x65\x47e\x74\x43o\x6e\x74e\x6e\x74s\x57\x69t\x68\x46u\x6e\x63", ], [ "f\x75\x6cl" => '~((?:\$\w{1,50}\s?\.?=\s?"\\\\[^"]+";)+)((?:\$\w{1,50}=\$\w{1,50}\(\$\w{1,50}\);){3})(\$\w{1,50})=[\'"]([^\'"]+)[\'"];(\$\w{1,50})=[\'"]([^\'"]+)[\'"];if\(function_exists\(\$\w{1,50}\)\){\$\w{1,50}=@\$\w{1,50}\(\'\3,\$\w{1,50}\',(\$\w{1,50}\(\$\w{1,50}\()\5\)\)\);if\(\$\w{1,50}\)\3=@\$\w{1,50}\(\3,\$\w{1,50}\);\s?}else{.*?};if\(function_exists\(\$\w{1,50}\)\)\s?{\$\w{1,50}=@\$\w{1,50}\("",\7\3\)\)\);if\(\$\w{1,50}\)@\$\w{1,50}\(\);}else{.*?};~msi', "i\x64" => "c\x72\x65a\x74\x65F\x75\x6ec\x56\x61r\x73\x43o\x64\x65", ], [ "f\x75\x6cl" => '~(\$\w+)=\'[preg_lac.\']+\';\1\(\'[#\~\\\\1\'.e]+\',\'([^,]+)\',\'1\'\);~msi', "i\x64" => "p\x72\x65g\x43\x6fn\x63\x61t", ], [ "f\x75\x6cl" => '~(?:\$\{"[^"]+"\^"[^"]+"\}\s*=\s*"[^"]+"\s*\^\s*"[^"]+";\s*)+\$\{"[^"]+"\^"[^"]+"\}\s*=\s*\(\s*\$\{"[^"]+"\^"[^"]+"\}\(\s*\$\{"[^"]+"\^"[^"]+"\}\s*\(\s*\'([^\']+)\'\)\s*\)\s*\)\s*;\s*\$\{"[^"]+"\^"[^"]+"\}="[^"]+"\s*\^\s*"[^"]+";\s*\$\{"[^"]+"\^"[^"]+"\}\s*=\s*@?\$\{"[^"]+"\^"[^"]+"\}\(\'[^\']+\',\s*"[^"]+"\s*\^\s*"[^"]+"\)\s*;@?\${"[^"]+"\^"[^"]+"\}\(\$\{"[^"]+"\^"[^"]+"\}\);~msi', "i\x64" => "x\x6f\x72e\x64\x53t\x72\x69n\x67\x73", ], [ "f\x75\x6cl" => '~\$\w+\s*=\s*\'([^\']+)\';\s*//base64 - gzinflate - str_rot13 - convert_uu - gzinflate - base64~msi', "i\x64" => "c\x6f\x6dm\x65\x6et\x57\x69t\x68\x41l\x67\x6f", ], [ "f\x75\x6cl" => '~error_reporting\(0\);\s*set_time_limit\(0\);\s*ini_set\(\'memory_limit\',\s*\'-1\'\);\s*if\(isset\(\$_POST\[\'pass\']\)\)\s*{\s*function\s*[^}]+}\s*file_put_contents\((\$\w+)\."[^"]+",\s*gzdeflate\(file_get_contents\(\1\),\s*\d\)\);\s*unlink\(\1\);\s*copy\(\'\.htaccess\',\'[^\']+\'\);\s*(\$\w+)\s*=\s*base64_decode\("[^"]+"\);\s*(?:\$\w+\s*=\s*str_replace\(\'[^\']+\',\s*[^;]+;\s*)+\$\w+\s*=\s*\$\w+;\s*(\$\w+)\s*=\s*"<\?php[^;]+;\s*\?>";\s*(\$\w+)\s*=\s*fopen\(\'[^\']+\',\'w\'\);\s*fwrite\(\4,\s*\3\);\s*fclose\(\4\);\s*(\$\w+)\s*=\s*base64_decode\("[^"]+"\);\s*(\$\w+)\s*=\s*fopen\(\'[^\']+\',\s*\'w\'\);\s*fwrite\(\6,\s*\5\);\s*fclose\(\6\);\s*echo\s*"[^"]+";\s*}\s*function\s*(\w+)[^}]+}[^}]+[\s}]+[^!]+!+\';[^!]+!+\';\s*}\s*exit\(\);\s*}\s*function\s*\w+\(\){~msi', "i\x64" => "f\x69\x6ce\x45\x6ec\x72\x79p\x74\x6fr", ], [ "f\x75\x6cl" => '~function\s?\w{1,50}\(\$\w{1,50}\)\s*{(\$\w{1,50}=true;)?((?:\$\w{1,50}\s?=\s?[\'"](?:base64_(?:de|en)code|[\\\\xa-f0-9]+)[\'"];)+).*?exit;}}\w{1,50}\([\'"][^\'"]+[\'"]\);~msi', "i\x64" => "b\x61\x73e\x36\x34d\x65\x63o\x64\x65d\x46\x75n\x63\x43o\x6e\x74e\x6e\x74s", ], [ "f\x75\x6cl" => '~((?:if\(!function_exists\(base64_[end]+code\)\)\{function\s*(\w+)[^{]+({([^{}]*+(?:(?3)[^{}]*)*+)})\}\s*else\s*\{function\s*\2\((\$\w+)\)\s*\{\s*global\s*base64_[end]+code;return\s*base64_[end]+code\(\5\);\}\})+).*?((?:function\s*(\w+)\(\$\w+\)\{return\s*\w+\(\$\w+\);\s*\}\s*)+).*?(eval\(gzinflate\(\7\(\'([^\']+)\'\)\)\);)~msi', "i\x64" => "d\x65\x66i\x6e\x65d\x42\x364", ], [ "f\x75\x6cl" => '~(?(DEFINE)(?\'v\'(?:(?:\$\{)*"G\x4c\x4fB\x41\x4cS"\}\["\w+"\]\}?|\$\w+|"\w+")))(?:(?&v)\s*=\s*"\w+";\s*)+(?:if\s*\(isset\(\$_GET\["[^"]+"\]\)\)\s*\{\s*echo\s*(?:"[^"]+"|\$_GET\["[^"]+"\]);\s*die;\s*\}\s*)*(?:(?&v)\s*=\s*"\w+";\s*)*function\s*(\w+)\(\$\w+,\s*\$\w+\s*=\s*\'\'\)\s*\{\s*(?:(?&v)\s*=\s*(?&v);\s*)+[^\^]+\^\s*(?&v)\[(?&v)\];\s*\}\s*\}\s*return\s*(?&v);\s*\}\s*(?:\$\w+\s*=\s*"[^"]+";)?\s*(?&v)\s*=\s*"[^"]+";\s*(?:(?&v)\s*=\s*"[^"]+";)?\s*(?:\$\w+ = "D";)?\s*((?&v))\s*=\s*"([^"]+)";(?:\s*(?&v)\s*=\s*[\'"][^\'"]*[\'"];\s*)+(?:foreach\s*\(array\(([\d\s,]+)\)\s*as\s*(?&v)\)\s*\{\s*(?:(?&v)\s*=\s*"\w+";\s*)*\s*(?&v)\s*\.=\s*(?&v)\[(?&v)\];\s*\}\s*(?:\s*(?&v)\s*=\s*[\'"][^\'"]*[\'"];\s*)?)+\s*(?&v)\s*=\s*(?&v)\([creat_fuion"\'\s\.]+\);\s*(?&v)\s*=\s*(?&v)\("[^"]*",\s*(?&v)\s*\(\2\((?&v)\((?&v)\),\s*"([^"]+)"\)\)\);\s*(?&v)\(\);~msi', "i\x64" => "B\x36\x34X\x6f\x72e\x64", ], [ "f\x75\x6cl" => '~(\$\w{1,50})\s?=\s?<<<FILE\s*([\w\s+/=]+)FILE;\s*(\$\w{1,50}\s?=\s?(base64_decode\(\1\));)~msi', "i\x64" => "B\x36\x34A\x73\x73i\x67\x6ee\x64\x56a\x72\x43o\x6e\x74e\x6e\x74", ], [ "f\x75\x6cl" => '~(\$\w{1,50})\s?=\s?\'([^\']+)\';((?:\$\w{1,50}\s?=\s?(?:\1\[[()\d/+*-]+\]\.?)+;)+)\$\w{1,50}\s?=\s?"[^"]+";(?:\$\w{1,50}\s?\.?=\s?\$\w{1,50};)+@?\$\w{1,50}\s?=\s?\$\w{1,50}\(\(\'\'\),\s?\((\$\w{1,50})\)\);@?\$\w{1,50}\(\);~msi', "i\x64" => "d\x69\x63t\x56\x61r\x73\x57i\x74\x68M\x61\x74h", ], [ "f\x75\x6cl" => '~(\$\w{1,50})\s?=\s?"([^"]+)";\s*class\s?(\w+){\s*var\s?\$\w{1,50};\s*function\s__construct\(\)\s?{\s?\$this->\w{1,50}\(\d+\);\s*}\s*function\s?(\w{1,50})\(\$\w{1,50}\)\s?{\s?\$\w{1,50}\s?=\s?\$_SERVER\[\'HTTP_USER_AGENT\'\];\s?if\s?\(\s?preg_match\(\'/\s?Apple\(\.\*\)\s?\\\\\(/is\',.*?str_replace.*?explode.*?\'0+\';(?:.*?function\s\w{1,50}\([^)]+\){.*?(?:unpack|pack|\$this->|fmod|chr))+.*?return\s\$\w{1,50};[\s}]+(\$\w{1,50})\s?=\s?hex2bin\(\1\);\s?\$\w{1,50}\s?=\s?new\s?\3\(\d+\);\s?(\$\w{1,50})\s?=\s?\$\w{1,50}->\4\(\5\);\s?eval\(\6\);~msi', "i\x64" => "c\x6c\x61s\x73\x44e\x63\x72y\x70\x74e\x64\x57i\x74\x68K\x65\x79", ], [ "f\x75\x6cl" => '~((\$\w+)\s*=\s*str_rot13\(base64_decode\(\'([^\']+)\'\)\);\s*(\$\w+)\s*=\s*str_rot13\(base64_decode\(\'([^\']+)\'\)\);\s*\$\w+\s*=\s*\'[^\']+\';)\s*preg_match\(\$\w+\(\$\w+\(\'[^\']+\'\)\),\s*file_get_contents\(__FILE__\),\s*\$\w+\);\s*(eval\(\$\w+\(\$\w+\(\'([^\']+)\'\)\)\);)\s*eval\(\$\w+\(\$\w+\(\'[^\']+\'\)\)\);\s*unset\(\$\w+,\s*\$\w+\);\s*__halt_compiler\(\);\s*\?>\s*\[PHPkoru_Info\]\s*[^\]]+\]\s*\[PHPkoru_Code\]\s*([^\[]+)\[/PHPkoru_Code\]~msi', "i\x64" => "P\x48\x50k\x6f\x72u", ], [ "f\x75\x6cl" => '~(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*\$this->(\w+)\("([^"]+)"\);\s*(\$\w+)\s*=\s*\3\(\'\',\s*\$this->\4\(\1\)\);\s*\6\(\);~msi', "i\x64" => "J\x6f\x6fm\x6c\x61I\x6e\x6ae\x63\x74", ], [ "f\x75\x6cl" => '~((\$\w{1,50})\s*=\s*[\'"]([^"\']+)[\'"];\s*)\$\w{1,50}\s*=\s*fopen\([^)]+\);\s*\$\w{1,50}\s*=\s*fwrite\s?\(\$\w{1,50}\s*,\s*(base64_decode\(\2\))\);~msi', "i\x64" => "f\x77\x72i\x74\x65B\x36\x34C\x6f\x6et\x65\x6et", ], [ "f\x75\x6cl" => '~(\$\w{1,50})\s*=\s*"([^"]+)";\s*(\$\w{1,50})\s*=\s*base64_decode\(\1\);\s*(\$\w{1,50})\s*=\s*base64_decode\("([^"]+)"\);\s*(\$\w{1,50}\s*=(\s*\3\s*\.\s*\4);)~msi', "i\x64" => "B\x36\x34c\x6f\x6ec\x61\x74e\x64\x56a\x72\x73", ], [ "f\x75\x6cl" => '~(\$\w{1,50})\s*=\s*"(\\\\[\w\\\\]+)";\s*(\$\w{1,50})\s*=\s*@\1\([\'"](\$\w{1,50})[\'"]\s*,\s*"(\\\\[\w\\\\]+)"\);\s*@\3\(([\'"][^\'"]+[\'"])\);~msi', "i\x64" => "s\x6c\x61s\x68\x65d\x43\x72e\x61\x74e\x46\x75n\x63", ], [ "f\x75\x6cl" => '~(\$\w{1,50})\s*=\s*"([^"]+)";((?:\$\w{1,50}\s*=\s*(?:\$\w{1,50}\[\d+\]\.?)+;)+@?(?:\$\w{1,50}(?:\[\d+\]\.?)?[,()]*)+;)~msi', "i\x64" => "v\x61\x72D\x69\x63t\x43\x72e\x61\x74e\x46\x75n\x63", ], [ "f\x75\x6cl" => '~@call_user_func\(create_function\([\'"]\s*[\'"],gzinflate\(base64_decode\([\'"\\\\]{1,3}([^\'"\\\\]+)[\'"\\\\]{1,3}\)\)\),[^)]+\);~msi', "i\x64" => "c\x61\x6cl\x46\x75n\x63\x47z\x42\x364", ], [ "f\x75\x6cl" => '~@?(\$\w{1,50})\s*=\s*"([^"]+)";@?(\$\w{1,50})\s*=\s*array\((\d+),(\d+),(\d+),(\d+),(\d+),(\d+)\);@?(\$\w{1,50})\s*=\s*"([^"]+)";@?(\$\w{1,50})\s*=\s*[\'"]{2};for\s*\(\$\w{1,50}\s?=\s?0;\s?\$\w{1,50}\s?<\s?6;\s?\$\w{1,50}\+\+\)\s*{@?\$\w{1,50}\s?=\s?@?\3\[@?\$\w{1,50}\]\s*;@?\12\.=\s?@?\1\[@?\$\w{1,50}\]\s?;\s*}@?\12\(((?:"\\\\x[^"]+"\.?)+)\);~msi', "i\x64" => "a\x73\x73e\x72\x74D\x69\x63t\x56\x61r\x45\x76a\x6c", ], [ "f\x75\x6cl" => '~function\s+(\w{1,50})\((\$\w{1,50})\)\s*{\s*\$\w{1,50}\s?=\s?"[^"]+";\s?(?:(?:\$\w{1,50}\s?=\s?)+"";)+.*?<<\s?2.*?<<\s?6.*?!=\s?64.*return\s?\$\w{1,50};}\s?function\s+(\w{1,50})\(\$\w{1,50}\){\s*return\s\1\(\$\w{1,50}\);}\s*eval\(\3\(gzinflate\(\3\("([^"]+)"\),0\)+~msi', "i\x64" => "B\x36\x34F\x75\x6ec\x45\x76a\x6c\x47z", ], [ "f\x75\x6cl" => '~(\$\w{1,50})\s*=\s*"([^"]+)";\s*(\$\w{1,50})\s?=\s?(?:[\d\-+*])+;\s*\$\w{1,50}\s?=\s?[\'"]base[\'"]\s?\.\s?\3\.\s?[\'"]_decode[\'"];\s*\$\w{1,50}\s?=\s?\$\w{1,50}\(\$\w{1,50}\);(\$\w{1,50})\s?=\s?@?gzinflate\(\$\w{1,50}\);@?eval\(("\?>"\.?)?\4\);~msi', "i\x64" => "B\x36\x34G\x7a", ], [ "f\x75\x6cl" => '~\$\w+\s*=\s*"\w{32}";\s*function\s*(\w+)\((\$\w+)\)\{\s*\2=gzinflate\(base64_decode\(\2\)\);\s*for\(\$\w+=0;\$\w+<strlen\s*\(\2\);\$\w+\+\+\)\s*\{\2\[\$\w+\]\s*=\s*chr\(ord\(\2\[\$\w+\]\)(-?\d+)\);\s*\}\s*return\s*\2;\s*\}eval\(\1\s*\("([^"]+)"\)\);~msi', "i\x64" => "d\x65\x6ct\x61\x4fr\x64", ], [ "f\x61\x73t" => '~<\?php\s(?:eval\(")?ob_start\(\);(?:"\))?\s\?>(.*?)<\?php\s(eval\(")?if\(!function_exists\("([^"]+)"\)\)\{function\s\3\(\)\{(\$[^=]+)=str_replace\(array\(([^)]+)\),array\(([^)]+)\),ob_get_clean\(\)\);for\((\$[^=]+)=1,(\$[^=]+)=ord\(\4\[0\]\);\7<strlen\(\4\);\7\+\+\)\4\[\7\]=chr\(ord\(\4\[\7\]\)-\8-\7\);\4\[0\]=\'\s\';return\s\4;\}\}(?:"\))?\s\?>(.*?)<\?php\s(\$[^=]+)=\3\(\);\s*eval\(\10\s*\)\s*(\?>\s*)+~msi', "f\x75\x6cl" => '~(?:<\?php\s*\$\w+\s*=\s*"[^"]+";\s*\?>\s*)?<\?php\s(?:eval\(")?ob_start\(\);(?:"\))?\s\?>(.*?)<\?php\s(eval\(")?if\(!function_exists\("([^"]+)"\)\)\{function\s\3\(\)\{(\$[^=]+)=str_replace\(array\(([^)]+)\),array\(([^)]+)\),ob_get_clean\(\)\);for\((\$[^=]+)=1,(\$[^=]+)=ord\(\4\[0\]\);\7<strlen\(\4\);\7\+\+\)\4\[\7\]=chr\(ord\(\4\[\7\]\)-\8-\7\);\4\[0\]=\'\s\';return\s\4;\}\}(?:"\))?\s\?>(.*?)<\?php\s(\$[^=]+)=\3\(\);\s*eval\(\10\s*\)\s*(\?>\s*)+~msi', "i\x64" => "o\x75\x74p\x75\x74B\x75\x66f\x65\x72", ], [ "f\x61\x73t" => '~\s*(\$\w+)\s*=\s*[base64_decode"\.]+;.*?\1(?:.{0,300}?\1\((?:\$\w+|"[^"]+")\))+[^\}]+\}~msi', "f\x75\x6cl" => '~(?:\$\w+\s*=\s*\$_SERVER\["D\x4f\x43U\x4d\x45N\x54\x5fR\x4f\x4fT"\]\."/";)?\$\w+\s*=\s*"[^"]+";(?:\$\w+\s*=\s*\$_SERVER\["D\x4f\x43U\x4d\x45N\x54\x5fR\x4f\x4fT"\]\."/";)?\s*(\$\w+)\s*=\s*[base64_decode"\.]+;.*?\1(?:.{0,300}?\1\((?:\$\w+|"[^"]+")\))+[^\}]+\}~msi', "i\x64" => "d\x6f\x6fr\x77\x61y\x49\x6es\x74\x61l\x6c\x65r", ], [ "f\x75\x6cl" => '~(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*str_replace\((\w),"","[^"]+"\);\s*\3\(\'[eval\'.]+\(\'[base64_dcod\'.]+\(\'[gzinflate.\']+\(\'[base64_dcod\'.]+\(\'[^\)]+\)[^;]+;~msi', "i\x64" => "s\x74\x72R\x65\x70l\x61\x63e\x41\x73s\x65\x72t", ], [ "f\x75\x6cl" => '~(?:(\$\{\'GLOBALS\'\}\[\'[^\']+\'\])=\'\w+\';\s*)+.*\1\};\}~msi', "i\x64" => "a\x6e\x61L\x54\x45A\x4d\x53h\x65\x6cl", ], [ "f\x75\x6cl" => '~(\$\w+)=\'[function_exis\'\.]+;\$\w+=\'[charodet\'\.]+;(\$\w+)=\'[eval\'\.]+;(\$\w+)=\'[gzinflate\'\.]+;(if\(!\1\(\'[base64_dcon\'\.]+\)\)({([^{}]*+(?:(?5)[^{}]*)*+)})else{function\s*[^}]+\}\})+(\$\w+)=\'[create_funion\'\.]+;(\$\w+)\s*=\s*\7\(\'([^\']+)\',\2\.\'\(\'\.\3\.\'\(\'\.\'[^(]+\(\9\)\'\.\'\)\'\.\'\)\'\.\';\'\);\8\("([^"]+)"\);~msi', "i\x64" => "z\x65\x75r\x61\x426\x34\x47z\x69\x6ef\x6c\x61t\x65", ], [ "f\x75\x6cl" => '~function\s*(\w+)\((\$\w+)\)\{((?:(\$\w+)\s*=\s*str_replace\(\'[^\']+\',\'[^\']+\',\'[^\']+\'\);\s*)+)return\s*(\$\w+\(\'\',\$\w+\(\2\)\);)\}(\$\w+)\s*=\'([^\']+)\';(\$\w+)=\1\(\6\);\8\(\);~msi', "i\x64" => "s\x74\x72R\x65\x70l\x61\x63e\x46\x75n\x63", ], [ "f\x75\x6cl" => '~(\$\w+)=array\(array\(((?:\'[^\']+\',?)+)\)\);\s*(?:/\*[^\*]+\*/)?(\$\w+)(?:/\*[^\*]+\*/)?[^\?]+\?>\s*\.\s*base64_decode\s*\(\s*str_rot13\s*\(\s*join\s*\(\s*\'\'\s*,\s*\3\s*\)\s*\)\s*\)\s*\.\s*\'[^\']+\'\s*\);(?:/\*[^\*]+\*/)?\s*(\$\w+)=array_walk\s*\(\1,\$\w+\);~msi', "i\x64" => "a\x72\x72a\x79\x4da\x70\x426\x34", ], [ "f\x75\x6cl" => '~preg_replace\(\'/\.\+\/e\',str_replace\("([^"]+)","([^"])*","([^"]+)"\),\'\.\'\);~msi', "i\x64" => "p\x72\x65g\x52\x65p\x6c\x61c\x65\x53t\x72\x52e\x70\x6ca\x63\x65", ], [ "f\x75\x6cl" => '~(\$\w+)\s*=\s*(base64_decode\("([^"]+)"\));\s*(\$\w+)\s*=\s*(base64_decode\("([^"]+)"\));\s*echo\s*"[^"]+";\s*if\s*\(\$\w+\s*==\s*"[^"]+"\)\s*\$\w+\s*=\s*"[^"]+"\.\4\."[^"]+"\.\1;~msi', "i\x64" => "e\x63\x68o\x42\x364", ], [ "f\x75\x6cl" => '~(\$\w+\s*=\s*"[^"]+"\^"[^"]+";)+\$\w+\s*=\s*\(?(?:@?\$\w+\()+\'([^\']+)\'\)+;(\$\w+\s*=\s*"[^"]+"\^"[^"]+";)+(\$\w+)\s*=\s*\(?(?:@?\$\w+\()+\'\$\w+\',"[^"]+"\^"[^"]+"\);@?\4\(\$\w+\);~msi', "i\x64" => "c\x72\x65a\x74\x65F\x75\x6ec\x58\x6fr\x65\x64", ], [ "f\x75\x6cl" => '~(\$\w{1,50})\s?=\s?array\(((?:\'[^\']\',?)+)\);\s?(?:\$\w{1,50}\s?=\s?(?:\1\[\d+\]\.?)+;\s?)+(\$\w{1,50})\s?=\s?((?:\$\w{1,50}\.?)+)\'(\$\w{1,50})\'\.(?:\1\[\d+\]\.?)+;\5\s?=\s?"([^"]+)";\s?@?eval\(\3\);~msi', "i\x64" => "e\x76\x61l\x44\x69c\x74\x41r\x72\x61y\x43\x6fn\x63\x61t", ], [ "f\x75\x6cl" => '~(?:(?:\$\w+="[^"]+"|\$\w+="[a-f0-9\\\\x]+"\^"[a-f0-9\\\\x]+");)+\$\w+=(?:\$\w+\.?)+;\s*(\$\w+)\("/(\w+)/e",(\$\w+),"\2"\);\s*\1\("/\2/e",(\$\w+),"\2"\);~msi', "i\x64" => "p\x72\x65g\x52\x65p\x6c\x61c\x65\x58o\x72\x65d", ], [ "f\x75\x6cl" => '~\$\w{1,5}=\'([a-z0-9+/=]{1,100}\s[a-z0-9+/=\s]+)\';(\$\w)=["\']_COOK[\\\\x0-9]{1,10}";\s*if\(!empty\(\${\2}\[["\']key["\']\]\)\){(?:\$\w=[^;]{1,30};\s*){1,5}for\([^)]{1,40}\)(?:\$\w\[?\]?=[^;]{1,30};\s*){1,5}for\([^)]{1,40}\){[^}]{1,150}}if[^;]{1,50};\s*if\(\(\$\w=@?gzinflate\(\$\w\)\)&&\(md5\(substr\(\$\w,\d,\$\w\)\)===\'([a-f0-9]{32})\'\)\){\$\w{1,5}=[^;]{1,100};if\(PHP_VERSION<\'5\'\){[^}]{1,1000}}@create_function\(\'\',"[^"]{1,100}"\.\$\w{1,5}\.\'{\'\);}}\s*DIE\(.{1,500}>"\);~mis', "i\x64" => "b\x61\x73e\x36\x34E\x6e\x63r\x79\x70t\x65\x64G\x7a", ], [ "f\x75\x6cl" => '~(eval\()?String\.fromCharCode\(([\d,\s]+)\)+;~msi', "f\x61\x73t" => '~String\.fromCharCode\([\d,\s]+\)+;~msi', "i\x64" => "J\x53\x5ff\x72\x6fm\x43\x68a\x72\x43o\x64\x65", ], [ "f\x75\x6cl" => '~(?:eval\()?unescape\(\'([^\']+)\'\)\);\s{0,50}eval\(unescape\(\'([^\']+)\'\)\s{0,50}\+\s{0,50}\'([^\']+)\'\s{0,50}\+\s{0,50}unescape\(\'[^\']+\'\)\);~msi', "f\x61\x73t" => '~unescape\(\'([^\']+)\'\)\);\s{0,50}eval\(unescape\(\'([^\']+)\'\)\s{0,50}\+\s{0,50}\'([^\']+)\'\s{0,50}\+\s{0,50}unescape\(\'[^\']+\'\)\);~msi', "i\x64" => "J\x53\x5fu\x6e\x65s\x63\x61p\x65\x43o\x6e\x74e\x6e\x74F\x75\x6ec\x57\x72a\x70\x70e\x64", ], [ "f\x75\x6cl" => '~var\s*(\w+)=\s*\[((?:\'[^\']+\',?)+)\];\(function\(\w+,\w+\)\{var\s*\w+=function\(\w+\)\{while\(--\w+\)\{\w+\[\'push\'\]\(\w+\[\'shift\'\]\(\)\);\}\};.*?\(\1,(0x\w+)\)\);var\s*(\w+)=function\s*\((\w+),(\w+)\)\s*\{\5=\5-0x\d+;var\s*\w+=\w+\[\5\];if\(\4\[\'\w+\']===undefined\)\{\(function\(\)\{var\s*(\w+);try\{var\s*(\w+)=Function\(\'[^;]++;\'\);\7=\8\(\);\}catch\(\w+\)\{\7=window;\}var\s*\w+=\'[^\']+\';\7\[\'atob\'\]\|\|\(\7\[\'atob\'\]=function\(\w+\)\{[^}]+\}return\s*\w+;\}\);\}\(\)\);var\s*\w+=function\(\w+,\w+\)\{var\s*\w+=.+?String\[\'fromCharCode\'\].+?return\s*\w+;\};\4\[\'\w+\'\]=\w+;\4\[\'\w+\'\]=\{\};\4\[\'\w+\'\]=!!\[\];\}var\s*\w+=\4\[\'\w+\'\]\[\w+\];.+?((.+?\4\(\'0x\d+\',\'[^\']+\'\)).+?)+[^\s]+~msi', "f\x61\x73t" => '~var\s*(\w+)=\s*\[((?:\'[^\']+\',?)+)\];\(function\(\w+,\w+\)\{var\s*\w+=function\(\w+\)\{while\(--\w+\)\{\w+\[\'push\'\]\(\w+\[\'shift\'\]\(\)\);\}\};.*?var\s*(\w+)=function\s*\((\w+),(\w+)\)\s*\{\4=\4-0x\d+;var\s*\w+=\w+\[\4\];if\(\3\[\'\w+\']===undefined\)\{\(function\(\)\{var\s*(\w+);try\{var\s*(\w+)=Function\(\'[^;]++;\'\);\6=\7\(\);\}catch\(\w+\)\{\6=window;\}var\s*\w+=\'[^\']+\';\6\[\'atob\'\]\|\|\(\6\[\'atob\'\]=function\(\w+\)\{[^}]+\}return\s*\w+;\}\);\}\(\)\);var\s*\w+=function\(\w+,\w+\)\{var\s*\w+=.+?String\[\'fromCharCode\'\].+?return\s*\w+;\};\3\[\'\w+\'\]=\w+;\3\[\'\w+\'\]=\{\};\3\[\'\w+\'\]=!!\[\];\}var\s*\w+=\3\[\'\w+\'\]\[\w+\];.+?((.+?\3\(\'0x\d+\',\'[^\']+\'\)).+?)+[^\s]+~msi', "i\x64" => "J\x53\x5fO\x62\x66u\x73\x63a\x74\x6fr\x49\x4f", ], [ "f\x75\x6cl" => '~<script\s(?:language|type)=[\'"](?:text/)?javascript[\'"]>\s*(?:(?:<!--.*?-->)?\s?<!--\s*)?document\.write\((?:unescape\()?[\'"]([^\'"]+)[\'"]\)\)?;(?:\s?//-->)?\s*</script>~msi', "i\x64" => "J\x53\x5fd\x6f\x63u\x6d\x65n\x74\x57r\x69\x74e\x55\x6ee\x73\x63a\x70\x65d\x53\x74r", ], [ "f\x75\x6cl" => '~eval\(function\(p,a,c,k,e,(?:d|r)\)\{.*?}\(\'(.*)\', *(\d+), *(\d+), *\'(.*?)\'\.split\(\'\|\'\),\d,\{\}\)\);~msi', "i\x64" => "J\x53\x5fd\x65\x61n\x50\x61c\x6b\x65r", ], [ "f\x75\x6cl" => '~\(function\s*\(\$,\s*document\)\s*({([^{}]*+(?:(?1)[^{}]*)*+)})\)\(\(function\s*\((\w),\s*(\w)\)\s*\{\s*function\s*(\w)\((\w+)\)\s*\{\s*return\s*Number\(\6\)\.toString\(36\)\.replace\(/\[0\-9\]/g,\s*function\s*\((\w)\)\s*\{\s*return\s*String\.fromCharCode\(parseInt\(\7,\s*10\)\s*\+\s*65\);\s*\}\s*\);\s*\}\s*var\s*\w+\s*=\s*\{\s*\$:\s*function\s*\(\)\s*\{\s*var\s*\w+\s*=\s*\{\};\s*[^}]+\}\s*return\s*\w;\s*\}\s*\};\s*\3\s*=\s*\3\.split\(\'\+\'\);\s*for\s*\(var\s*\w\s*=\s*0;\s*\w\s*<\s*(\d+);\s*\w\+\+\)\s*\{\s*\(function\s*\(\w\)\s*\{\s*Object\.defineProperty\(\w,\s*\5\(\w\),\s*\{\s*get:\s*function\s*\(\)\s*\{\s*return\s*\w\[\w\]\[0\]\s*\!==\s*\';\'\s*\?\s*\4\(\w\[\w\]\)\s*:\s*parseFloat\(\w\[\w\]\.slice\(1\),\s*10\);\s*\}\s*\}\);\s*\}\(\w\)\);\s*\}\s*return\s*\w;\s*\}\(\'([^\']+)\',\s*function\s*\(\w\)\s*\{\s*for\s*\(var\s*(\w)\s*=\s*\'([^\']+)\',\s*(\w)\s*=\s*\[([^\]]+)\],\s*\w\s*=\s*\'\'[^{]+\{\s*var\s*(\w)\s*=\s*\10\.indexOf\(\w\[\w\]\);\s*\12\.indexOf\(\w\[\w\]\)\s*>\s*\-1\s*&&\s*0\s*===\s*\12\.indexOf\(\w\[\w\]\)\s*&&\s*\(\w\s*=\s*0\),\s*\14\s*>\s*-1\s*&&\s*\(\w\s*\+=\s*String\.fromCharCode\(\w\s*\*\s*\10\.length\s*\+\s*\14\),\s*\w\s*=\s*1\);\s*\}\s*return\s*\w;\s*\}\)\),\s*\(function\s*\(\w\)\s*\{\s*var\s*_\s*=\s*{};\s*for\s*\(\w\s*in\s*\w\)\s*\{\s*try\s*\{\s*_\[\w\]\s*=\s*\w\[\w\]\.bind\(\w\);\s*\}\s*catch\s*\(\w\)\s*\{\s*_\[\w\]\s*=\s*\w\[\w\];\s*\}\s*\}\s*return\s*_;\s*\}\)\(document\)\)~msi', "i\x64" => "J\x53\x5fo\x62\x6ae\x63\x74D\x65\x63o\x64\x65", ], [ "f\x75\x6cl" => '~eval\(compile\(zlib\.decompress\(base64\.b64decode\([\'"]([^\'"]+)[\'"]\)\),[\'"]<string>[\'"],[\'"]exec[\'"]\)\)~msi', "i\x64" => "P\x59\x5fe\x76\x61l\x43\x6fm\x70\x69l\x65\x53t\x72", ], ]; private $full_source; private $prev_step; private $cur; private $obfuscated; private $max_level; private $max_time; private $run_time; private $fragments; private $grabed_signature_ids; private $active_fragment; private $excludes; public function __construct($text, $origin_text = '', $max_level = 30, $max_time = 5) { $this->text = $text; $this->full_source = $text; if ($this->defineSpecificObfuscator($text, $origin_text)) { $this->text = $origin_text; $this->full_source = $origin_text; } $this->max_level = $max_level; $this->max_time = $max_time; $this->fragments = []; $this->grabed_signature_ids = []; $this->excludes = []; } private function getPreviouslyDeclaredVars($string) { $foundVar = false; foreach ($this->fragments as $frag => $fragment) { if ($foundVar || strpos($frag, '$codelock_lock') !== false) { break; } $subject = ''; $pos = strpos($fragment, $string . '=') ?: strpos($fragment, $string . ' '); if ($pos !== false && strpos(substr($fragment, $pos + strlen($string)), '$') !== 1) { $subject = substr($fragment, $pos); } else { $pos = strpos($frag, $string . '=') ?: strpos($frag, $string . ' '); if ($pos !== false) { $subject = substr($frag, $pos); } else { $pos = strpos($this->full_source, $string . '=') ?: strpos($this->full_source, $string . ' '); if ($pos !== false) { $subject = substr($this->full_source, $pos); } else { continue; } } } if (@preg_match_all('~(\$\w{1,40})\s*=\s*((\(*(base64_decode\s*\(|pack\s*\(\'H\*\',|convert_uudecode\s*\(|htmlspecialchars_decode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+((?:(["\'])((.*?[^\\\\])??((\\\\\\\\)+)?+)\6[^;]+)|(?:\$\w+)\)*;*))|((["\'])((.*?[^\\\\])??((\\\\\\\\)+)?+)\12));~msi', $subject, $i0l1i10001010000010, PREG_SET_ORDER) > 0) { foreach ($i0l1i10001010000010 as $m) { if ($m[1] !== $string) { continue; } if (isset($m[12]) && $m[12] !== '') { $str = substr(@$m[2], 1, -1); $foundVar = true; } if (isset($m[5]) && $m[5] !== '') { $str = $this->unwrapFuncs($m[2]); $foundVar = true; } $this->fragments[$this->active_fragment] = str_replace($m[0], '', $this->fragments[$this->active_fragment]); break; } } } return $str; } private function defineSpecificObfuscator($text, $origin_text) { if (strpos($origin_text, '#!/') === 0 || strpos($origin_text, '0=__FILE__;') && (strpos($origin_text, ';return;?>') || strpos($origin_text, 'This file is protected by copyright law and provided under')) || strpos($origin_text, 'The latest version of Encipher can be obtained from') && strpos($origin_text, '\'@ev\'));') || strpos($origin_text, 'substr(file_get_contents(__FILE__),') && strpos($origin_text, '__halt_compiler();') || strpos($text, 'create_function(\'\', base64_decode(@stream_get_contents(') && strpos($text, '@fopen(__FILE__,') || strpos($origin_text, '//base64 - gzinflate - str_rot13 - convert_uu - gzinflate - base64') ) { return true; } $text_wo_ws = str_replace(' ', '', $text); if (strpos($text_wo_ws, '=file(__FILE__);eval(base64_decode(') && strpos($text_wo_ws, '));__halt_compiler();') || strpos($text_wo_ws, 'define(\'__LOCALFILE__\',__FILE__);') && strpos($text_wo_ws, '__halt_compiler();') || strpos($text_wo_ws, '");$cvsu=$gg') || strpos($text_wo_ws, '$cyk=$cyd[') ) { return true; } return false; } private function checkObfuscatorExcludes($str, $type = false, $i0l1i10001010000010 = []) { switch ($type) { case '': if(strpos($str, '# Malware list detected by AI-Bolit (http') !== false) { return ''; } if(strpos($str, '#Malware list detected by AI-Bolit(http') !== false) { return ''; } if(strpos($str, '<div class="h\x65\x61d\x65\x72">Отчет сканера ') !== false) { return ''; } if (strpos($str, '$default_action="F\x69\x6ce\x73\x4da\x6e"') !== false) { return ''; } break; case "e\x63\x68o": if (preg_match('~\$_[GPRC](?:OST|ET|EQUEST|OOKIE)~ms', $i0l1i10001010000010[0])) { return ''; } if (!isset($i0l1i10001010000010[5]) || $i0l1i10001010000010[5] === '') { return ''; } break; case "e\x76\x61l": if (strpos($i0l1i10001010000010[0], "f\x69\x6ce\x5f\x67e\x74\x5fc\x6f\x6et\x65\x6et\x73") !== false) { return ''; } if (preg_match('~\$_[GPRC](?:OST|ET|EQUEST|OOKIE)~ms', $i0l1i10001010000010[0])) { return ''; } if (strpos($i0l1i10001010000010[0], '=> array(\'eval(base64_decode(\')') !== false) { return ''; } if (@$i0l1i10001010000010[6] === '\'";') { return ''; } break; } return $type; } public function getObfuscateType($str) { $str = preg_replace('~\s+~', ' ', $str); $l_UnicodeContent = Helpers::detect_utf_encoding($str); if ($l_UnicodeContent !== false) { if (function_exists("i\x63\x6fn\x76")) { $str = iconv($l_UnicodeContent, "C\x50\x312\x35\x31/\x2f\x49G\x4e\x4fR\x45", $str); } } if ($this->checkObfuscatorExcludes($str) === '') { return ''; } foreach (self::$signatures as $signature) { $fast_regexp = isset($signature["f\x61\x73t"]) ? $signature["f\x61\x73t"] : $signature["f\x75\x6cl"]; if (isset($this->excludes[$str]) && in_array($signature["i\x64"], $this->excludes[$str])) { continue; } if (preg_match($fast_regexp, $str, $i0l1i10001010000010)) { return $this->checkObfuscatorExcludes($str, $signature["i\x64"], $i0l1i10001010000010); } } return ''; } private function getObfuscateFragment($str, $type) { foreach (self::$signatures as $signature) { if ($signature["i\x64"] == $type && preg_match($signature["f\x75\x6cl"], $str, $i0l1i10001010000010)) { return $i0l1i10001010000010; } } return ''; } public function getFragments() { if (count($this->fragments) > 0) { return $this->fragments; } return false; } public function getGrabedSignatureIDs() { return array_keys($this->grabed_signature_ids); } private function grabFragments() { if ($this->cur === null) { $this->cur = $this->text; } $str = $this->cur; reset(self::$signatures); while ($sign = current(self::$signatures)) { $regex = $sign["f\x75\x6cl"]; if (preg_match($regex, $str, $i0l1i10001010000010)) { $this->grabed_signature_ids[$sign["i\x64"]] = 1; $this->fragments[$i0l1i10001010000010[0]] = $i0l1i10001010000010[0]; $str = str_replace($i0l1i10001010000010[0], '', $str); } else { next(self::$signatures); } } } private function deobfuscateFragments() { $prev_step = ''; if (!count($this->fragments)) { return; } $i = 0; foreach ($this->fragments as $frag => $value) { if ($frag !== $value) { continue; } $this->active_fragment = $frag; $type = $this->getObfuscateType($value); while ($type !== '' && $i < 50) { $match = $this->getObfuscateFragment($value, $type); if (!is_array($match)) { break; } $find = $match[0] ?? ''; $func = "d\x65\x6fb\x66\x75s\x63\x61t\x65" . ucfirst($type); try { $temp = @$this->$func($find, $match); } catch (Exception $e) { $temp = ''; } if ($temp !== '' && $temp !== $find) { $value = str_replace($find, $temp, $value); } else { $this->excludes[preg_replace('~\s+~', ' ', $value)][] = $type; $this->fragments[$frag] = $value; $type = $this->getObfuscateType($value); continue; } $this->fragments[$frag] = $value; $type = $this->getObfuscateType($value); $value_hash = hash("s\x68\x612\x35\x36", $value); if ($prev_step === $value_hash) { break; } $prev_step = $value_hash; $i++; } $this->fragments[$frag] = Helpers::postProcess($this->fragments[$frag]); } } public function deobfuscate($hangs = 0, $prev_step = '') { $deobfuscated = ''; $this->run_time = microtime(true); $this->cur = $this->text; $this->grabFragments(); $this->deobfuscateFragments(); $deobfuscated = $this->cur; if (count($this->fragments) > 0 ) { foreach ($this->fragments as $fragment => $text) { $deobfuscated = str_replace($fragment, $text, $deobfuscated); } } $deobfuscated = Helpers::postProcess($deobfuscated); if (substr_count(substr($deobfuscated, 0, 400), 'base64_decode(\'') > 3) { $deobfuscated = preg_replace_callback('~base64_decode\(\'([^\']+)\'\)~msi', static function ($i0l1i10001010000010) { return "'" . base64_decode($i0l1i10001010000010[1]) . "'"; }, $deobfuscated); } if ($this->getObfuscateType($deobfuscated) !== '' && $hangs < 6) { $this->text = $deobfuscated; if ($prev_step === hash("s\x68\x612\x35\x36", $deobfuscated)) { return $deobfuscated; } $deobfuscated = $this->deobfuscate(++$hangs, hash("s\x68\x612\x35\x36", $deobfuscated)); } return $deobfuscated; } public static function getSignatures() { return self::$signatures; } private function deobfuscateStrrotPregReplaceEval($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = str_rot13($i0l1i10001010000010[2]); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateObf_20200618_1($str) { preg_match('~(\$\{"[\\\\x47c2153fGLOBALS]+"\}\["[\w\\\\]+"\]="[\w\\\\]+";(\$\w+="\w+";)?)+.+\$\{"[\\\\x47c2153fGLOBALS]+"\}\["[\w\\\\]+"\].+}+~msi', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $res = stripcslashes($str); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateBypass($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $bypass = stripcslashes($i0l1i10001010000010[2]); $eval = $i0l1i10001010000010[3] . $bypass . $i0l1i10001010000010[4]; $res = str_replace($find, $eval, $str); return $res; } private function deobfuscateObf_20200720_1($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = base64_decode($i0l1i10001010000010[2]); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateGoto($str) { return Helpers::unwrapGoto($str); } private function deobfuscateObf_20200527_1($str) { preg_match('~error_reporting\(0\);define\(\'\w+\',\s*__FILE__\);define\(\'\w+\',\s*fopen\(__FILE__,\s*\'r\'\)\);fseek\(\w+,\s*__COMPILER_HALT_OFFSET__\);((\$\w+="\\\\x[0-9a-f]+";)+(\$\w+="[^"]+";)+eval\("\?>"\.(\$\w+\()+"([^"]+)"\)+;)+(?:/\*\w+\*/)?__halt_compiler\(\);([\w#|>^%\[\.\]\\\\/=]+)~msi', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $res = $str; $encoded = $i0l1i10001010000010[6]; $res = preg_replace_callback('~(\$\w+="\\\\x[0-9a-f]+";)+(\$\w+="[^"]+";)+eval\("\?>"\.(\$\w+\()+"([^"]+)"\)+;~msi', static function ($m) use ($str) { $layer1 = hex2bin(str_rot13(gzinflate(str_rot13(base64_decode($m[4]))))); if (preg_match('~(\$\w+="[^"]+";)+eval\(\$\w\.(\$\w+\()+"([^"]+)"\)+;~msi', $layer1, $i0l1i10001010000010)) { $temp = "?>" . hex2bin(str_rot13(gzinflate(str_rot13(base64_decode($i0l1i10001010000010[3]))))); while (preg_match('~(\$\w+)=strrev\(\1\);(\1=\s*str_replace\([\'"]([^"\']+)[\'"],"[^"]+",\1\);)+@?eval\("\?\>"\.\$\w+\(\1\)+;~msi', $temp, $i0l1i10001010000010)) { if (preg_match_all('~(\$\w+)="([^"]+)";~msi', $layer1, $i0l1i100010100000101)) { foreach($i0l1i100010100000101[1] as $k => $v) { if ($v !== $i0l1i10001010000010[1]) { continue; } $code = $i0l1i100010100000101[2][$k]; $code = strrev($code); if (preg_match_all('~str_replace\([\'"]([^"\']+)[\'"],"([^"]+)"~msi', $temp, $m, PREG_SET_ORDER)) { foreach($m as $item) { $code = str_replace($item[1], $item[2], $code); } $temp = base64_decode($code); } break; } } } return $temp; } }, $res); if (preg_match_all('~str_replace\([\'"]([^"\']+)[\'"],[\'"]([^"\']+)[\'"]~msi', $res, $m, PREG_SET_ORDER)) { foreach($m as $item) { $encoded = str_replace($item[1], $item[2], $encoded); } $res = base64_decode($encoded); } $res = str_replace($find, $res, $str); return $res; } private function deobfuscateObf_20200602_1($str) { preg_match('~(\$\w+)=strrev\("[base64_decode]+"\)\.str_replace\(\'(\w+)\',\'\',\'\w+\'\);\s*eval\(\1\((\$\w+)\)\);~msi', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $res = 'eval(base64_decode(' . $i0l1i10001010000010[3] . '));'; $res = str_replace($find, $res, $str); return $res; } private function deobfuscateObf_20200526_1($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = base64_decode($i0l1i10001010000010[2]); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateObf_20200522_1($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = strrev(gzinflate(base64_decode(substr($i0l1i10001010000010[14], (int)hex2bin($i0l1i10001010000010[4]) + (int)hex2bin($i0l1i10001010000010[6]), (int)hex2bin($i0l1i10001010000010[8]))))); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateObf_20200507_5($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = base64_decode($i0l1i10001010000010[1]); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateObf_20200507_4($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $ar = $i0l1i10001010000010[2]; $ar = explode(",\n", $ar); $array = []; foreach ($ar as $v) { $array[substr(trim($v),1,1)] = substr(trim($v), -2, 1); } unset($ar); $res = ''; $split = str_split($i0l1i10001010000010[5]); foreach ($split as $x) { foreach ($array as $main => $val) { if ($x == (string)$val) { $res .= $main; break; } } } $res = gzinflate(base64_decode($res)); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateObf_20200513_1($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = gzuncompress(base64_decode(strrev($i0l1i10001010000010[5]))); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateObf_20200507_2($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = base64_decode($i0l1i10001010000010[4]); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateObf_20200507_1($str) { preg_match('~(\$\w+)=base64_decode\(\'([^\']+)\'\);\s*eval\(\1\);~mis', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $res = base64_decode($i0l1i10001010000010[2]); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateObf_20200504_1($str) { preg_match('~(\$\w+)\s*=\s*\("\?>"\.gzuncompress\(base64_decode\("([^"]+)"\)\)\);\s*@?eval\(\1\);~msi', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $res = ' ?>' . gzuncompress(base64_decode($i0l1i10001010000010[2])); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateSmartToolsShop($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = str_rot13(gzinflate(str_rot13(base64_decode($i0l1i10001010000010[2])))); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateObf_20200421_1($str) { preg_match('~(?:\$\w+\s*=\s*\'\w+\';)?\s*(\$\w+)\s*=\s*urldecode\(\'[%0-9a-f]+\'\);(\s*(\$\w+)\s*=(\s*\1\{\d+\}\.?)+;)+\s*(\$\w+)\s*=\s*"[^"]+"\.\3\("([^"]+)"\);\s*eval\(\5\);~msi', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $res = ' ?>' . base64_decode($i0l1i10001010000010[6]); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateObf_20200414_1($str, $i0l1i10001010000010) { $data = $i0l1i10001010000010[1]; $i0l1i10000100010000 = $i0l1i10001010000010[2]; $res = Helpers::obf20200414_1_decrypt($data, $i0l1i10000100010000); return $res; } private function deobfuscateObf_20200402_2($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $code = $i0l1i10001010000010[17]; if (isset($i0l1i10001010000010[1]) && !empty($i0l1i10001010000010[1])) { $vars = Helpers::collectVars($i0l1i10001010000010[1], '\''); $code = Helpers::replaceVarsFromArray($vars, $i0l1i10001010000010[2], false, true); $code = Helpers::collectStr($code, '\''); $code = substr($code, strpos($code,'\'') + 1); } $code = preg_replace_callback('~\s*"\s*\.((?:min|max|round)?\(\s*\d+[\.\,\|\s\|+\|\-\|\*\|\/]([\d\s\.\,\+\-\*\/]+)?\))\s*\.\s*"~msi', static function($m) { return substr(Helpers::calc($m[1]), 1, -1); }, $code); $res = gzinflate(base64_decode($code)) ?:base64_decode($code); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateTwoHashFunc($str, $i0l1i10001010000010) { $funcs = [ $i0l1i10001010000010[1].'::'.$i0l1i10001010000010[2] => [ "d\x61\x74a" => Helpers::prepareArray($i0l1i10001010000010[3]), "f\x75\x6ec" => null, ], $i0l1i10001010000010[4].'::'.$i0l1i10001010000010[5] => [ "d\x61\x74a" => Helpers::prepareArray($i0l1i10001010000010[6]), "f\x75\x6ec" => null, ], ]; $code = Helpers::normalize($i0l1i10001010000010[7]); foreach ($funcs as $name => &$params){ $data = $params["d\x61\x74a"]; if (isset($data[0]) && intval($data[0])) { $params["f\x75\x6ec"] = function ($n, $k) use ($data) { if (!isset($data[$n])) { return false; } return $data[$n]; }; } else { $params["f\x75\x6ec"] = function ($n, $k) use ($data){ $l = strlen($k); if (!isset($data[$n])) { return false; } $r = base64_decode($data[$n]); for ($i = 0, $c = strlen($r); $i !== $c; ++$i) { $r[$i] = chr(ord($r[$i]) ^ ord($k[$i % $l])); } return '\'' . $r . '\''; }; } } unset($params); $new_code = preg_replace_callback('~(_\w{1,5})::(\w{1,5})\s*\(([^)]+)\)~mis', function ($m) use ($funcs) { $original = $m[0]; $class_name = $m[1]; $method_name = $m[2]; $vars = str_replace(['"', "'"], '', $m[3]); list($var1, $var2) = explode(',', $vars); $func_name = $class_name . '::' . $method_name; if (!isset($funcs[$func_name]["f\x75\x6ec"])) { return $original; } return $funcs[$func_name]["f\x75\x6ec"]($var1, $var2); }, $code); return MathCalc::calcRawString($new_code); } private function deobfuscateObf_20200402_1($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = gzinflate(hex2bin(pack('H*',$i0l1i10001010000010[6]))); $res = preg_replace('~//.+$~m', '', $res); preg_match('~\$\w+\(\$\w+,\$\w+\("",\s*\$\w+\(\$\w+\(\$\w+\(\$\w+\(\$\w+,\s*"(\d+)"\)+,\$\w+\);.+function \w+\((\$\w+),\s*\$\w+,\s(\$\w+)\)\s{\3\s=\s\3\s\.\s\3;.+return \2;}~msi', $res, $i0l1i10001010000010); $res = gzinflate(hex2bin(pack('H*',$i0l1i10001010000010[1]))); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateOELove($str) { preg_match('~<\?php\s*defined\(\'[^\']+\'\)\s*\|\|\s*define\(\'[^\']+\',__FILE__\);(global\s*\$[^;]+;)+\s*(if\(!function_exists\(\'([^\']+)\'\)\){\s*function\s*[^\)]+\(\$[^,]+,\$[^=]+=\'\'\){\s*if\(empty\(\$[^\)]+\)\)\s*return\s*\'\';\s*\$[^=]+=base64_decode\(\$[^\)]+\);\s*if\(\$[^=]+==\'\'\)\s*return\s*\~\$[^;]+;\s*if\(\$[^=]+==\'-1\'\)\s*@[^\(]+\(\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^\)]+\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^,]+,\$[^,]+,\$[^\)]+\);\s*return\s*\$[^^]+\^\$[^;]+;\s*}}\s*)+(\$[^\[]+\["[^"]+"]=[^\(]+\(\'[^\']+\',\'[^\']*\'\);\s*)+(\$[^\[]+\[\'[^\']+\'\]=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\([^\)]*\)+;\s*)+return\(eval\(\$[^\[]+\[\'[^\']+\'\]\)+;\s*\?>\s*#!/usr/bin/php\s*-q\s*((\s*[^\s]+)+)~msi', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $res = $str; $code = $i0l1i10001010000010[6]; $res = iconv('UTF-8', "A\x53\x43I\x49\x2f/\x49\x47N\x4f\x52E", $res); preg_match('~\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\'([\da-f]{32})\'\);~msi', $res, $hash); $hash = strrev($hash[1]); preg_match_all('~\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\'([\d]{10})\'\)~msi', $res, $substr_offsets); $substr_offsets = $substr_offsets[1]; $substr_offsets = array_map("s\x74\x72r\x65\x76", $substr_offsets); $substr_offsets = array_map("i\x6e\x74v\x61\x6c", $substr_offsets); preg_match_all('~if\s*\(\!function_exists\(\'([^\']+)\'\)~msi', $res, $decoders); $decoders = $decoders[1]; $var_array = []; preg_match_all('~\$([^\[]{3,20})\["([^"]+)"\]=(\w+)\(\'([^\']*)\',\'([^\']*)\'\);~msi', $res, $vars, PREG_SET_ORDER); $var_name = $vars[0][1]; foreach ($vars as $var) { if ($var[3] === $decoders[0] || $var[3] === $decoders[1]) { $var_array[$var[2]] = Helpers::OELoveDecoder($var[4], $var[5]); $res = str_replace($var[0], '', $res); } } $layer1 = substr($code, 0, $substr_offsets[3] + 96); $layer1_dec = iconv('UTF-8', "A\x53\x43I\x49\x2f/\x49\x47N\x4f\x52E", gzuncompress(base64_decode($layer1))); $code = str_replace($layer1, $layer1_dec, $code); preg_match_all('~\$([^\[]{3,20})\["([^"]+)"\]=(\w+)\(\'([^\']*)\',\'([^\']*)\'\);~msi', $code, $vars, PREG_SET_ORDER); foreach ($vars as $var) { if ($var[3] === $decoders[0] || $var[3] === $decoders[1]) { $var_array[$var[2]] = Helpers::OELoveDecoder($var[4], $var[5]); $code = str_replace($var[0], '', $code); } } $layer2_start = strpos($code, '?>') + 2; $layer2 = substr($code, $layer2_start + $substr_offsets[2]); $layer2_dec = iconv('UTF-8', "A\x53\x43I\x49\x2f/\x49\x47N\x4f\x52E", gzuncompress(base64_decode(str_rot13($layer2)))); $res = $layer2_dec; foreach($var_array as $k => $v) { $res = str_replace('$GLOBALS[\'' . $var_name . '\'][\'' . $k . '\'](', $v . '(', $res); $res = str_replace('$GLOBALS[\'' . $var_name . '\'][\'' . $k . '\']', '\'' . $v . '\'', $res); } $res = preg_replace_callback('~(\w+)\(\'([^\']*)\',\'([^\']*)\'\)~msi', static function ($m) use ($decoders) { if ($m[1] !== $decoders[0] && $m[1] !== $decoders[1]) { return $m[0]; } return '\'' . Helpers::OELoveDecoder($m[2], $m[3]) . '\''; }, $res); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateEvalConcatVars($str) { preg_match('~((\$\w+="";\$\w+\s*\.=\s*"[^;]+;\s*)+)(?:="";)?(eval\((\s*(\$\w+)\s*\.)+\s*"([^"]+)(?:"\);)+)~msi', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $res = $str; $parts = []; preg_match_all('~(\$\w+)="";\1\s*\.=\s*"([^"]+)"~msi', $i0l1i10001010000010[1], $i0l1i100010100000101, PREG_SET_ORDER); foreach($i0l1i100010100000101 as $match) { $parts[$match[1]] = stripcslashes(stripcslashes($match[2])); } $res = stripcslashes(stripcslashes($i0l1i10001010000010[3])); foreach($parts as $k => $v) { $res = str_replace($k, "'" . $v . "'", $res); } $res = preg_replace_callback('/[\'"]\s*?\.+\s*?[\'"]/smi', static function($m) { return ''; }, $res); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateEvalAssignedVars($str, $i0l1i10001010000010) { $res = $str; $vars = [$i0l1i10001010000010[1] => $i0l1i10001010000010[2]]; $res = preg_replace_callback('~(\$\w{1,3000})=(base64_decode|gzinflate|convert_uudecode|str_rot13)\((\$\w{1,3000})\);~msi', function ($match) use (&$vars) { $func = $match[2]; if (Helpers::isSafeFunc($func) && isset($vars[$match[3]])) { $vars[$match[1]] = @$func($vars[$match[3]]); return ''; } return $match[1] . '=' . $match[2] . '(\'' . $match[3] . '\';'; }, $res); $res = $vars[$i0l1i10001010000010[4]] ?? Helpers::replaceVarsFromArray($vars, $res); return $res; } private function deobfuscateVarFuncsEval($str) { preg_match('~((\$\w+)\s*=\s*)(base64_decode\s*\(+|gzinflate\s*\(+|strrev\s*\(+|str_rot13\s*\(+|gzuncompress\s*\(+|convert_uudecode\s*\(+|urldecode\s*\(+|rawurldecode\s*\(+|htmlspecialchars_decode\s*\(+)+"([^"]+)"\)+(;\s*@?eval\(([\'"?>.\s]+)?\2\);)~', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $res = $str; $res = str_replace([$i0l1i10001010000010[5], $i0l1i10001010000010[1]], [');', 'eval('], $res); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateComments($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = preg_replace('~/\*\w+\*/~msi', '', $str); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateStrrevVarEval($str) { preg_match('~(\$\w+=strrev\("[^"]+"\);)+eval\((\$\w+\()+"([^"]+)"\)+;~mis', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $res = gzinflate(base64_decode($i0l1i10001010000010[3])); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateAanKFM($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = $str; $i0l1i10000100010000 = Helpers::aanKFMDigitsDecode($i0l1i10001010000010[3]); $res = Helpers::Xtea_decrypt($i0l1i10001010000010[4], $i0l1i10000100010000); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateEvalChars($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = $str; while(preg_match_all('~(?:@eval((?:\(\$[0O]+\[[\'"]\w+[\'"]\])+)\("([^"]+)"\)+;)|("\)\?\$[O0]+)~msi', $res, $i0l1i10001010000010, PREG_SET_ORDER)) { $match = $i0l1i10001010000010[0]; if (isset($i0l1i10001010000010[1])) $match = $i0l1i10001010000010[1]; $count = ($match[1] !== '') ? substr_count($match[1], '(') : 0; if ($count == 2) { $res = gzinflate(base64_decode($match[2])); } else if ($count == 3) { $res = gzinflate(base64_decode(str_rot13($match[2]))); } if (isset($match[3]) && ($match[3] !== '')) { $res = preg_replace_callback('~(\$[0O]+\["\w+"\]\()+"([^"]+)"\)+;?~msi', static function($m) { return gzinflate(base64_decode(str_rot13($m[2]))); }, $res); } } $res = str_replace($find, $res, $str); return $res; } private function deobfuscateGlobalsBase64($str) { preg_match('~<\?php\s+((\$GLOBALS\[\s*[\'"]\w+[\'"]\s*\])\s*=\s*base64_decode\("([^"]*)"\);)+\s*\?>(<\?php\s.+\2.+exit;\s}\sfunction\s\w+\(\)\s{\sreturn\sarray\(\s\'favicon\'\s=>\s\'[^\']+\',\s+\'sprites\'\s=>\s\'[^\']+\',\s\);\s})~msi', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $vars = []; preg_match_all('~(\$GLOBALS\[\s*[\'"]\w+[\'"]\s*\])\s*=\s*base64_decode\("([^"]*)"\);~msi', $i0l1i10001010000010[0], $i0l1i100010100000101, PREG_SET_ORDER); foreach($i0l1i100010100000101 as $match) { $vars[$match[1]] = base64_decode($match[2]); } $code = $i0l1i10001010000010[4]; foreach ($vars as $var => $value) { $code = str_replace($var . '(', $value . '(', $code); $code = str_replace($var, "'" . $value . "'", $code); } $res = $code; $res = str_replace($find, $res, $str); return $res; } private function deobfuscateEvalReturn($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = stripcslashes(base64_decode($i0l1i10001010000010[2])); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateQibosoft($str) { preg_match('~\$\w+=__FILE__;\$\w+=fopen\(\$\w+,\'rb\'\);fread\(\$\w+,(\d+)\);\$\w+=explode\("\\\\t",base64_decode\(fread\(\$\w+,(\d+)\)+;\$\w+=\$\w+\[[\d+]\];[\$l1=\d{}\.;\(\)\[\]]+eval\(\$\w+\(\'([^\']+)\'\)+;\s*return\s*;\?>[\w=\+]+~msi', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $res = $str; $hangs = 15; $obfPHP = explode('?>', $str); $obfPHP = $obfPHP[1]; preg_match('~eval\(\$\w+\(\'([^\']+)\'\)+;~msi', $res, $temp); $res = str_replace($temp[0], base64_decode($temp[1]), $res); $offset = $i0l1i10001010000010[2]; while (preg_match('~\$\w+\(\$\w+,(\d+)\);\s*eval\(\$\w+\(\$\w+\(\$\w+,(\d+)\)+;~msi', $res, $temp2) && $hangs--) { $offset += $temp2[1]; $decode_loop = base64_decode(substr($obfPHP, $offset, $temp2[2])); $offset += $temp2[2]; if (preg_match('~eval\(\$\w+\(\'([^\']+)\'\)+;~msi', $decode_loop, $temp)) { $res = str_replace($temp2[0], base64_decode($temp[1]), $res); } else { $res = $decode_loop; } } $res = str_replace($find, $res, $str); return $res; } private function deobfuscateUd64($str) { preg_match('~(\$ud64_c[o0]m="[\\\\0-9a-z\."]+;)+\$\w+=(\$ud64_c[o0]m\()+"([^"]+)"\)+;@eval\(\$ud64_c[o0]m\(\'[^\']+\'\)+;~msi', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $res = gzinflate(convert_uudecode(base64_decode(gzinflate(base64_decode(str_rot13($i0l1i10001010000010[3])))))); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateCustom1($str) { preg_match('~\$\w+="([^"]+)";\$l+=0;\$l+=\'base64_decode\';\$l+=0;eval\(.+?;eval\(\$l+\);return;~msi', $str, $i0l1i10001010000010); return Helpers::someDecoder3($i0l1i10001010000010[1]); } private function deobfuscateCustom2($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $i0l1i10000100010000 = $i0l1i10001010000010[2]; $var = $i0l1i10001010000010[3]; preg_match_all('~(\$\w+)\[\d+\]\s*=\s*"([^"]+)";~msi', $str, $i0l1i10001010000010); foreach ($i0l1i10001010000010[1] as $k => &$m) { if ($m !== $var) { unset($i0l1i10001010000010[2][$k]); } } $res = base64_decode(Helpers::someDecoder4($i0l1i10001010000010[2], $i0l1i10000100010000)); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateLockIt2($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = $i0l1i10001010000010[1]; if(strpos($str, '$_X="') !== false && strpos($res, '\\x') !== false) { $res = stripcslashes($res); } if (preg_match_all('~\$[_\w]+\.=[\'"]([\w\+\/=]+)[\'"];~', $i0l1i10001010000010[0], $concatVars)) { foreach ($concatVars[1] as $concatVar) { $res .= $concatVar; } } $res = base64_decode($res); $res = strtr($res, $i0l1i10001010000010[2], $i0l1i10001010000010[3]); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateAnaski($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = gzinflate(str_rot13(base64_decode($i0l1i10001010000010[2]))); $res = strtr($res, $i0l1i10001010000010[5], $i0l1i10001010000010[6]); return $res; } private function deobfuscateFuncs($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $funcs = []; $payload = $i0l1i10001010000010[7]; $var = $i0l1i10001010000010[6]; $res = $str; $res = preg_replace_callback('~function\s*(\w+)\((\$\w+)\){\s*return\s*(\w+)\(\2(,\d+)?\);}\s*~msi', static function($i0l1i100010100000102) use (&$funcs){ $funcs[$i0l1i100010100000102[1]] = $i0l1i100010100000102[3]; return ''; }, $res); foreach ($funcs as $k => $v) { $res = str_replace($k . '(', $v . '(', $res); } $res = str_replace([$var . '="' . $payload . '";', $var], ['', '"' . $payload . '"'], $res); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateSubstr($str) { preg_match('~\$\w+=0;(\$GLOBALS\[\'\w+\'\])\s*=\s*\'([^\']+)\';\s*(\$\w+)=pack\(\'H\*\',substr\(\1,\s*([-\d]+)\)\);if\s*\(!function_exists\(\'(\w+)\'\)\){function\s*\5\(\$\w+,\s*\$\w+\){\$\w+=\1;\s*\$d=pack\(\'H\*\',substr\(\1,\s*\4\)\);\s*return\s*\$\w+\(substr\(\$\w+,\s*\$\w+,\s*\$\w+\)\);}};eval\(\3\(\'([^\']+)\'\)\);~msi', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $substr_array = $i0l1i10001010000010[2]; $offset = intval($i0l1i10001010000010[4]); $func = $i0l1i10001010000010[5]; $eval = pack('H*',substr($substr_array, $offset)); $res = Helpers::isSafeFunc($eval) ? @$eval($i0l1i10001010000010[6]) : $i0l1i10001010000010[6]; $res = preg_replace_callback('~(\w+)\(([-\d]+),\s*([-\d]+)\)~mis', static function ($i0l1i10001010000010) use ($eval, $substr_array, $func) { if ($i0l1i10001010000010[1] !== $func) { return $i0l1i10001010000010[0]; } $res = Helpers::isSafeFunc($eval) ? @$eval(substr($substr_array, $i0l1i10001010000010[2], $i0l1i10001010000010[3])) : $i0l1i10001010000010[0]; return '\'' . $res . '\''; }, $res); $res = str_replace($find, $res, $str); return $res; } private function deobfuscatePHPJiaMi($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $bin = bin2hex($str); preg_match('~6257513127293b24[a-z0-9]{2,30}3d24[a-z0-9]{2,30}2827([a-z0-9]{2,30})27293b~', $bin, $hash); preg_match('~2827([a-z0-9]{2})27293a24~', $bin, $rand); $hash = hex2bin($hash[1]); $rand = hex2bin($rand[1]); $res = Helpers::PHPJiaMi_decoder(substr($i0l1i10001010000010[3], 0, -45), $hash, $rand); $res = str_rot13(@gzuncompress($res) ?: $res); if (preg_match('~global\s*(\$[^,;]+);((?:\1\[\'[^\']+\'\]=[^(]+\(\'[^\']+\'\);)+)~msi', $str, $tmp)) { $tmp = explode(';', $tmp[2]); foreach ($tmp as $entry) { if ($entry === '') { continue; } preg_match('~\$([^\[]+)(\[\'[^\']+\'\])=([^\(]+)\(\'([^\']+)\'\)~', $entry, $parts); $res = str_replace('$GLOBALS[\'' . $parts[1] . '\']' . $parts[2], Helpers::PHPJiaMi_decoder($parts[4], $hash, $rand), $res); } $func_decrypt = $parts[3]; $hangs = 20; while (($start = strpos($res, $func_decrypt . '(\'')) && $start !== false && $hangs--) { $end = strpos($res,'\'', $start + strlen($func_decrypt) + 2) + 1; $data = substr($res, $start + strlen($func_decrypt) + 2, $end - ($start + strlen($func_decrypt) + 2 + 1)); $res = substr_replace($res, '\'' . Helpers::PHPJiaMi_decoder($data, $hash, $rand) . '\'', $start, ($end - $start) + 1); } } $res = str_replace($find, $res, $str); return $res; } private function deobfuscateEvalIReplace($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = base64_decode($i0l1i10001010000010[3]); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateErrorHandler($str) { preg_match('~(\$\w+)="[^"]+";\s*(\$\w+)=str_ireplace\("[^"]+","",\1\);(\$\w+)\s*=\s*"([^"]+)";\s*function\s*(\w+)\((\$\w+,?)+\){\s*(\$\w+)=\s*create_function\(\'\',\$\w+\);\s*array_map\(\7,array\(\'\'\)+;\s*}\s*set_error_handler\(\'\5\'\);(\$\w+)=\2\(\3\);user_error\(\8,E_USER_ERROR\);\s*if\s*.+?}~msi', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $res = base64_decode($i0l1i10001010000010[4]); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateStrtoupper($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = $str; $alph = $i0l1i10001010000010[2]; $var = $i0l1i10001010000010[1]; $res = str_replace("{$var}=\"{$alph}\";", '', $res); for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) { $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res); $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res); } $res = str_replace("''", '', $res); $res = str_replace("' . '", '', $res); $res = str_replace("' '", '', $res); preg_match('~(\$\w+)\s*=\s*strtoupper\s*\(\s*\'(\w+)\'\s*\)\s*;~msi', $res, $i0l1i10001010000010); $i0l1i10001010000010[2] = strtoupper($i0l1i10001010000010[2]); $res = str_replace($i0l1i10001010000010[0], '', $res); $res = preg_replace_callback('~\${\s*(\$\w+)\s*}~msi', static function ($m) use ($i0l1i10001010000010) { if ($m[1] !== $i0l1i10001010000010[1]) { return $m[0]; } return '$' . $i0l1i10001010000010[2]; }, $res); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateEval2($str) { preg_match('~(\$\w+)\s*=\s*"((?:[^"]|(?<=\\\\)")*)";(\$\w+)\s*=\s*(\1\[\d+\]\.?)+;(\$\w+)\s*=\s*[^;]+;(\$\w+)\s*=\s*"[^"]+";\$\w+\s*=\s*\5\."([^"]+)"\.\6;\3\((\1\[\d+\]\.?)+,\s*\$\w+\s*,"\d+"\);~smi', $str, $i0l1i10001010000010); $res = $str; list($find, $var, $alph) = $i0l1i10001010000010; for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) { $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res); $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res); } $res = gzinflate(base64_decode(substr($i0l1i10001010000010[7], 1, -1))); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateEvalEregReplace($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = base64_decode($i0l1i10001010000010[2]); preg_match_all('~(\$\w+)\s*=\s*ereg_replace\("([^"]+)","([^"]+)",\1\);~smi', $str, $i0l1i10001010000010); foreach ($i0l1i10001010000010[2] as &$pat) { if ($pat[0] === '[') { $pat = substr($pat, 1, -1); } } unset($pat); $res = str_replace($i0l1i10001010000010[2], $i0l1i10001010000010[3], $res); $res = base64_decode($res); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateStrreplace($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = $str; $str_replace = ''; $base64_decode = ''; $layer = ''; if (!preg_match_all('~(?:(\$\w{1,50})\s?=\s?((?:\'[^\']{1,500}\'|"[^\n]{1,500}?"));[\n\s])~msi', $str, $i0l1i10001010000010, PREG_SET_ORDER)) { preg_match_all('~(\$\w+)\s*=\s*([\'"](?|[^\']+\'|[^"]+"));~msi', $str, $i0l1i10001010000010, PREG_SET_ORDER); } foreach ($i0l1i10001010000010 as $i => $match) { $vars[$match[1]] = substr($match[2], 1, -1); } $res = preg_replace_callback('~(\$\w+)\s*=\s*str_replace\([\'"](\w+)[\'"],\s*[\'"]{2},\s*[\'"](\w+)[\'"]\)~msi', static function ($i0l1i10001010000010) use (&$vars, &$str_replace) { $vars[$i0l1i10001010000010[1]] = str_replace($i0l1i10001010000010[2], "", $i0l1i10001010000010[3]); if ($vars[$i0l1i10001010000010[1]] === "s\x74\x72_\x72\x65p\x6c\x61c\x65") { $str_replace = $i0l1i10001010000010[1]; } return $i0l1i10001010000010[1] . ' = "' . $vars[$i0l1i10001010000010[1]] . '"'; }, $res); if ($str_replace !== '') { $res = preg_replace_callback('~(\$\w+)\s*=\s*(\$\w+)\("(\w+)",\s*"",\s*"(\w+)"\)~msi', static function ($i0l1i10001010000010) use (&$vars, &$base64_decode, $str_replace) { if ($i0l1i10001010000010[2] !== $str_replace) { return $i0l1i10001010000010[0]; } $vars[$i0l1i10001010000010[1]] = str_replace($i0l1i10001010000010[3], "", $i0l1i10001010000010[4]); if ($vars[$i0l1i10001010000010[1]] === "b\x61\x73e\x36\x34_\x64\x65c\x6f\x64e") { $base64_decode = $i0l1i10001010000010[1]; } return $i0l1i10001010000010[1] . ' = "' . $vars[$i0l1i10001010000010[1]] . '"'; }, $res); $res = preg_replace_callback('~(\$\w+)\((\$\w+)\("(\w+)",\s*"",\s*([\$\w\.]+)\)~msi', static function ($i0l1i10001010000010) use (&$vars, &$layer, $base64_decode, $str_replace) { if ($i0l1i10001010000010[1] !== $base64_decode && $i0l1i10001010000010[2] !== $str_replace) { return $i0l1i10001010000010[0]; } $tmp = explode(".", $i0l1i10001010000010[4]); foreach ($tmp as &$item) { $item = $vars[$item]; } unset($item); $tmp = implode('', $tmp); $layer = base64_decode(str_replace($i0l1i10001010000010[1], "", $tmp)); return $i0l1i10001010000010[0]; }, $res); } if ($base64_decode !== '') { $regex = '~(\$\w+)\((\$\w+)\("(\w+)",\s*"",\s*([\$\w\.]+)\)~msi'; } else { $regex = '~(str_replace)\(([\'"])([^\'"]+)[\'"],\s*[\'"]{2},\s*([\$\w\. ]+)\);\s?(\$\w+)\s*=\s*\$\w+\([\'"]{2},\s*\$\w+\);\s*\5\(\);~msi'; } preg_replace_callback($regex, static function ($i0l1i10001010000010) use (&$vars, &$layer, $base64_decode, $str_replace) { if ($base64_decode !== '' && $i0l1i10001010000010[1] !== $base64_decode && $i0l1i10001010000010[2] !== $str_replace) { return $i0l1i10001010000010[0]; } $tmp = preg_split('~\s*\.\s*~msi', $i0l1i10001010000010[4]); foreach ($tmp as &$item) { $item = $vars[$item]; } unset($item); $tmp = implode('', $tmp); $layer = str_replace($i0l1i10001010000010[3], "", $tmp); if ($base64_decode !== '') { $layer = base64_decode($layer); } return $i0l1i10001010000010[0]; }, $res); $res = str_replace($find, $layer, $str); return $res; } private function deobfuscateSeolyzer($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = $str; $vars = []; $base64_decode = ''; $layer = ''; $gzuncompress = ''; preg_match_all('~(\$\w+)\s*=\s*([^$][^;]+)\s*;~msi', $str, $i0l1i10001010000010, PREG_SET_ORDER); foreach ($i0l1i10001010000010 as $i => $match) { $var_name = $match[1]; $var_val = trim($match[2]); if (preg_match('~"[^"]{0,20}"\s*\.chr\s*\(~i', $var_val)) { $var_val = Helpers::normalize($var_val); } $var_val = preg_replace('~^["\'](.*)["\']$~i', '\1', $var_val); $vars[$var_name] = trim($var_val); if ($var_val === "b\x61\x73e\x36\x34_\x64\x65c\x6f\x64e") { $base64_decode = $var_name; } } $res = preg_replace_callback('~\s*=\s*(\$\w+)\((\$\w+)\)~msi', static function ($i0l1i10001010000010) use (&$vars, &$gzuncompress, &$layer, $base64_decode) { if ($i0l1i10001010000010[1] !== $base64_decode) { return $i0l1i10001010000010[0]; } if (!isset($vars[$i0l1i10001010000010[2]])) { return $i0l1i10001010000010[2]; } $tmp = base64_decode($vars[$i0l1i10001010000010[2]]); if ($tmp === "g\x7a\x75n\x63\x6fm\x70\x72e\x73\x73") { $gzuncompress = $i0l1i10001010000010[2]; } $vars[$i0l1i10001010000010[2]] = $tmp; return " = '{$tmp}'"; }, $res); if ($gzuncompress !== '') { $res = preg_replace_callback('~(\$\w+)\(\s*(\$\w+)\((\$\w+)\)~msi', function ($i0l1i10001010000010) use (&$vars, $gzuncompress, &$layer, $base64_decode) { if ($i0l1i10001010000010[1] !== $gzuncompress && $i0l1i10001010000010[2] !== $base64_decode) { return $i0l1i10001010000010[0]; } if (!isset($vars[$i0l1i10001010000010[3]])) { return $i0l1i10001010000010[3]; } $tmp = gzuncompress(base64_decode($vars[$i0l1i10001010000010[3]])); $layer = $i0l1i10001010000010[3]; $vars[$i0l1i10001010000010[3]] = $tmp; return "'{$tmp}'"; }, $res); $res = $vars[$layer]; } else if (preg_match('~\$\w+\(\s*(\$\w+)\((\$\w+)\)~msi', $res)) { $res = preg_replace_callback('~\$\w+\(\s*(\$\w+)\((\$\w+)\)~msi', function ($i0l1i10001010000010) use (&$vars, &$layer, $base64_decode) { if ($i0l1i10001010000010[1] !== $base64_decode) { return $i0l1i10001010000010[0]; } if (!isset($vars[$i0l1i10001010000010[2]])) { return $i0l1i10001010000010[2]; } $tmp = base64_decode($vars[$i0l1i10001010000010[2]]); $layer = $i0l1i10001010000010[2]; $vars[$i0l1i10001010000010[2]] = $tmp; return "'{$tmp}'"; }, $res); $res = $vars[$layer]; } return str_replace($find, $res, $str); } private function deobfuscateCreateFunc($str, $i0l1i10001010000010) { $result = $str; $funcs = str_replace($i0l1i10001010000010[4], '', $i0l1i10001010000010[3]); if (Helpers::concatStr($i0l1i10001010000010[1]) === "c\x72\x65a\x74\x65_\x66\x75n\x63\x74i\x6f\x6e" && Helpers::concatStr($i0l1i10001010000010[2]) === "e\x76\x61l") { $funcs = explode('(', $funcs); $iMax = count($funcs) - 2; $final_code = $i0l1i10001010000010[5]; for ($i = $iMax; $i >= 0; $i--) { if ($funcs[$i][0] !== '\'' && $funcs[$i][0] !== '"') { $funcs[$i] = '\'' . $funcs[$i]; } $func = Helpers::concatStr($funcs[$i] . '"'); if (Helpers::isSafeFunc($func)) { $final_code = @$func($final_code); } } $result = $final_code; } $result = ' ?>' . $result; return $result; } private function deobfuscateGotoShell($str, $i0l1i10001010000010) { $str = Helpers::normalize($str); $str = preg_replace('~\${\'GLOBALS\'}\[\'(\w+)\'\]~msi', '$\1', $str); $vars = Helpers::collectVars($str, '\''); $need_remove_vars = []; foreach ($vars as $name => $value) { $last_str = $str; $str = str_replace('${' . $name . '}', '$' . $value, $str); if ($last_str != $str) { $need_remove_vars[$name] = $value; } } foreach ($need_remove_vars as $name => $value) { if (substr_count($str, $name) != 1) { continue; } $str = str_replace($name.'=\'' . $value . '\';', '', $str); } return $str; } private function deobfuscateCreateFuncConcat($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = $str; $vars = []; $res = preg_replace_callback('~(?|(\$\w+)\s*=\s*(([base64_decode\'\.\s]+)|([eval\'\.\s]+)|([create_function\'\.\s]+)|([stripslashes\'\.\s]+)|([gzinflate\'\.\s]+)|([strrev\'\.\s]+)|([str_rot13\'\.\s]+)|([gzuncompress\'\.\s]+)|([urldecode\'\.\s]+)([rawurldecode\'\.\s]+));)~', static function($i0l1i10001010000010) use (&$vars) { $tmp = str_replace("' . '", '', $i0l1i10001010000010[0]); $tmp = str_replace(""."", '', $tmp); $value = str_replace("' . '", '', $i0l1i10001010000010[2]); $value = str_replace(""."", '', $value); $vars[$i0l1i10001010000010[1]] = substr($value, 1, -1); return $tmp; }, $res); foreach($vars as $i0l1i10000100010000 => $var) { $res = str_replace($i0l1i10000100010000, $var, $res); $res = str_replace($var . " = '" . $var . "';", '', $res); $res = str_replace($var . ' = "";', '', $res); } $res = str_replace($find, $res, $str); return $res; } private function deobfuscateEvalWrapVar($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = $str; $vars = []; $res = preg_replace_callback('~(?|(\$\w+)\s*=\s*(([base64_decode"\'\.\s]+)|([eval"\'\.\s]+)|([create_function"\'\.\s]+)|([stripslashes"\'\.\s]+)|([gzinflate"\'\.\s]+)|([strrev"\'\.\s]+)|([str_rot13"\'\.\s]+)|([gzuncompress"\'\.\s]+)|([urldecode"\'\.\s]+)([rawurldecode"\'\.\s]+));)~msi', static function($i0l1i10001010000010) use (&$vars) { $tmp = str_replace(["' . '", "\" . \""], '', $i0l1i10001010000010[0]); $tmp = str_replace([""."", "\".\""], '', $tmp); $value = str_replace(["' . '", "\" . \""], '', $i0l1i10001010000010[2]); $value = str_replace([""."", "\".\""], '', $value); $vars[$i0l1i10001010000010[1]] = substr($value, 1, -1); return $tmp; }, $res); $temp = substr($res, strpos($res, '@eval')); $temp1 = $temp; foreach($vars as $i0l1i10000100010000 => $var) { $temp = str_replace($i0l1i10000100010000, $var, $temp); } $res = str_replace($temp1, $temp, $res); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateForEach($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $alph = $i0l1i10001010000010[3]; $vars = []; $res = $str; preg_replace('~\s*/\*\w+\*/\s*~msi', '', $res); $res = preg_replace_callback('~foreach\(\[([\d,]+)\]\s*as\s*\$\w+\)\s*\{\s*(\$\w+)\s*\.=\s*\$\w+\[\$\w+\];\s*\}~mis', static function($i0l1i10001010000010) use ($alph, &$vars) { $chars = explode(',', $i0l1i10001010000010[1]); $value = ''; foreach ($chars as $char) { $value .= $alph[$char]; } $vars[$i0l1i10001010000010[2]] = $value; return "{$i0l1i10001010000010[2]} = '{$value}';"; }, $res); foreach($vars as $i0l1i10000100010000 => $var) { $res = str_replace($i0l1i10000100010000, $var, $res); $res = str_replace($var . " = '" . $var . "';", '', $res); $res = str_replace($var . ' = "";', '', $res); } preg_match('~(\$\w+)\s*=\s*strrev\([create_function\.\']+\);~ms', $res, $i0l1i10001010000010); $res = str_replace($i0l1i10001010000010[0], '', $res); $res = str_replace($i0l1i10001010000010[1], "c\x72\x65a\x74\x65_\x66\x75n\x63\x74i\x6f\x6e", $res); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateSubst2($str) { preg_match('~(\$\w+)="([^"])+(.{0,70}\1.{0,400})+;\s*}~msi', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $res = $str; preg_match('~(\$\w+)="(.+?)";~msi', $str, $i0l1i10001010000010); $alph = stripcslashes($i0l1i10001010000010[2]); $var = $i0l1i10001010000010[1]; for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) { $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res); $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res); } $res = str_replace("''", '', $res); preg_match_all('~(\$GLOBALS\[\'\w{1,40}\'\])\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $i0l1i10001010000010, PREG_SET_ORDER); foreach ($i0l1i10001010000010 as $index => $var) { $res = str_replace($var[1], $var[2], $res); $res = str_replace($var[2] . " = '" . $var[2] . "';", '', $res); } $res = str_replace($find, $res, $str); return $res; } private function deobfuscateAssert($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = base64_decode($i0l1i10001010000010[3]); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateUrlDecode2($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = $str; if (isset($i0l1i10001010000010[10])) { $res = base64_decode($i0l1i10001010000010[10]); } if (preg_match('~\$\w+=["\']([^\'"]+)[\'"];\s*eval\(\'\?>\'\.[\$\w\(\)\*,\s]+;~msi', $res, $match)) { $res = base64_decode(strtr(substr($match[1], 52*2), substr($match[1], 52, 52), substr($match[1], 0, 52))); } if (preg_match('~function\s*(\w+)\(\$\w+\)[\w{\$=\s*();<+\[\]\-]+\}\s+return[\$\s\w;]+}eval\(\1\("([\w\/+=]+)?"\)\);~', $res, $matchEval)) { $res = gzinflate(base64_decode($matchEval[2])); for ($i=0, $iMax = strlen($res); $i < $iMax; $i++) { $res[$i] = chr(ord($res[$i])-1); } $res = str_replace($find, $res, $str); return $res; } if (preg_match('~header\(\'[^\']+\'\);(?:\$\w+=\${[^}]+}\[[^\]]+\]\(\'.*?\'?;}?\'\);)+\${[^}]+}\[[^\]]+\]\(\);~msi', $i0l1i10001010000010[6], $match)) { $res = stripcslashes($match[0]); $dictionaryValue = urldecode($i0l1i10001010000010[3]); $vars = Helpers::getVarsFromDictionary($dictionaryValue, $str); $res = Helpers::replaceVarsFromArray($vars, $res); $res = Helpers::replaceCreateFunction($res); preg_match('~\$([0_O]+)\s*=\s*function\s*\((\$\w+)\)\s*\{\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),(\d+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,([\d-]+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),strlen\s*\(\2\)-(\d+)\);\s*return\s*gzinflate\s*\(base64_decode\s*\(\$[O_0]+\s*\.\s*\$[O_0]+\s*\.\s*\$[O_0]+\)+;~msi', $res, $m); $res = preg_replace_callback('~\$\{"G\x4c\x4fB\x41\x4cS"}\["([0_O]+)"\]\s*\(\'([^\']+)\'\)~msi', static function ($calls) use ($m) { if ($calls[1] !== $m[1]) { return $calls[0]; } $temp1 = substr($calls[2], $m[3], $m[4]); $temp2 = substr($calls[2], $m[5]); $temp3 = substr($calls[2], $m[6],strlen($calls[2]) - $m[7]); return "'" . gzinflate(base64_decode($temp1 . $temp3 . $temp2)) . "'"; }, $res); return $res; } $res = str_replace($find, ' ?>' . $res, $str); return $res; } private function deobfuscatePHPMyLicense($str) { preg_match('~\$\w+\s*=\s*base64_decode\s*\([\'"][^\'"]+[\'"]\);\s*if\s*\(!function_exists\s*\("r\x6f\x74e\x6e\x63o\x64\x65"\)\).{0,1000}eval\s*\(\$\w+\s*\(base64_decode\s*\([\'"]([^"\']+)[\'"]\)+;~msi', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $res = $str; $hang = 10; while(preg_match('~eval\s*\(\$\w+\s*\(base64_decode\s*\([\'"]([^"\']+)[\'"]\)+;~msi', $res, $i0l1i10001010000010) && $hang--) { $res = gzinflate(base64_decode($i0l1i10001010000010[1])); } $res = str_replace($find, $res, $str); return $res; } private function deobfuscateEdoced_46esab($str) { preg_match('~(\$\w+)=[\'"]([^"\']+)[\'"];(\$\w+)=strrev\(\'edoced_46esab\'\);eval\(\3\([\'"]([^\'"]+)[\'"]\)+;~msi', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $res = ''; $decoder = base64_decode($i0l1i10001010000010[4]); preg_match('~(\$\w+)=base64_decode\(\$\w+\);\1=strtr\(\1,[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]\);~msi', $decoder, $i0l1i100010100000102); $res = base64_decode($i0l1i10001010000010[2]); $res = strtr($res, $i0l1i100010100000102[2], $i0l1i100010100000102[3]); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateEdoced_46esab_etalfnizg($str, $i0l1i10001010000010) { return gzinflate(base64_decode($i0l1i10001010000010[3])); } private function deobfuscateEvalVarVar($str) { preg_match('~\$\{"G\x4c\x4fB\x41\x4cS"\}\[[\'"](\w+)[\'"]\]=["\'](\w+)[\'"];\$\{"G\x4c\x4fB\x41\x4cS"\}\[[\'"](\w+)[\'"]\]=["\']\2[\'"];(\${\$\{"G\x4c\x4fB\x41\x4cS"\}\[[\'"]\3[\'"]\]})=[\'"]([^\'"]+)[\'"];eval.{10,50}?(\$\{\$\{"G\x4c\x4fB\x41\x4cS"\}\[[\'"]\1[\'"]\]\})\)+;~msi', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $res = str_replace($i0l1i10001010000010[4], '$' . $i0l1i10001010000010[2], $str); $res = str_replace($i0l1i10001010000010[6], '$' . $i0l1i10001010000010[2], $res); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateEscapes($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = stripcslashes($str); $res = str_replace($find, $res, $str); preg_match_all('~(\$\{"G\x4c\x4fB\x41\x4cS"\}\[[\'"](\w+)[\'"]\])=["\'](\w+)[\'"];~msi', $res, $i0l1i10001010000010, PREG_SET_ORDER); foreach ($i0l1i10001010000010 as $match) { $res = str_replace([$match[0], '${' . $match[1] . '}'], ['', '$' . $match[3]], $res); } return $res; } private function deobfuscateparenthesesString($str) { $hangs = 5; $res = $str; $find = ''; while (preg_match('~for\((\$\w+)=\d+,(\$\w+)=\'([^\$]+)\',(\$\w+)=\'\';@?ord\(\2\[\1\]\);\1\+\+\)\{if\(\1<\d+\)\{(\$\w+)\[\2\[\1\]\]=\1;\}else\{\$\w+\.\=@?chr\(\(\5\[\2\[\1\]\]<<\d+\)\+\(\5\[\2\[\+\+\1\]\]\)\);\}\}\s*.{0,500}eval\(\4\);(if\(isset\(\$_(GET|REQUEST|POST|COOKIE)\[[\'"][^\'"]+[\'"]\]\)\)\{[^}]+;\})?~msi', $res, $i0l1i10001010000010) && $hangs--) { if($hangs == 4) { $find = $i0l1i10001010000010[0]; } $res = ''; $temp = []; $i0l1i10001010000010[3] = stripcslashes($i0l1i10001010000010[3]); for($i=0, $iMax = strlen($i0l1i10001010000010[3]); $i < $iMax; $i++) { if($i < 16) $temp[$i0l1i10001010000010[3][$i]] = $i; else $res .= @chr(($temp[$i0l1i10001010000010[3][$i]]<<4) + ($temp[$i0l1i10001010000010[3][++$i]])); } } if(!isset($i0l1i10001010000010[6])) { $xor_key = $res^"\n//adjust sy"; $res = $res ^ substr(str_repeat($xor_key, (strlen($res) / strlen($xor_key)) + 1), 0, strlen($res)); } if(substr($res,0,12)=="\n//adjust sy") { $res = str_replace($find, $res, $str); return $res; } else return $str; } private function deobfuscateEvalInject($str, $i0l1i10001010000010) { $res = $str; $find = $i0l1i10001010000010[0]; $alph = $i0l1i10001010000010[2]; for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) { $res = str_replace($i0l1i10001010000010[1] . '[' . $i . '].', "'" . $alph[$i] . "'", $res); $res = str_replace($i0l1i10001010000010[1] . '[' . $i . ']', "'" . $alph[$i] . "'", $res); } $res = str_replace("''", '', $res); $res = str_replace("' '", '', $res); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateWebshellObf($str) { $res = $str; preg_match('~function\s*(\w{1,40})\s*\(\s*(\$\w{1,40})\s*,\s*(\$\w{1,40})\s*\)\s*\{\s*(\$\w{1,40})\s*=\s*str_rot13\s*\(\s*gzinflate\s*\(\s*str_rot13\s*\(\s*base64_decode\s*\(\s*[\'"]([^\'"]*)[\'"]\s*\)\s*\)\s*\)\s*\)\s*;\s*(if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*(\$\w{1,40})\s*=(\$\w+[\{\[]\d+[\}\]]\.?)+;return\s*(\$\w+)\(\3\);\s*\}\s*else\s*)+\s*if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*return\s*eval\(\3\);\s*\}\s*\};\s*(\$\w{1,40})\s*=\s*[\'"][^\'"]*[\'"];(\s*\10\([\'"][^\'"]*[\'"],)+\s*[\'"]([^\'"]*)[\'"]\s*\)+;~msi',$str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $alph = str_rot13(gzinflate(str_rot13(base64_decode($i0l1i10001010000010[5])))); for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) { $res = str_replace($i0l1i10001010000010[4] . '{' . $i . '}.', "'" . $alph[$i] . "'", $res); $res = str_replace($i0l1i10001010000010[4] . '{' . $i . '}', "'" . $alph[$i] . "'", $res); } $res = base64_decode(gzinflate(str_rot13(convert_uudecode(gzinflate(base64_decode(strrev($i0l1i10001010000010[12]))))))); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateXorFName($str, $i0l1i10001010000010, $xor_key = null) { if (!isset($i0l1i10001010000010)) { preg_match('~(?(DEFINE)(?\'c\'(?:/\*\w+\*/)*))(\$\w+)\s*=\s*basename(?&c)\((?&c)trim(?&c)\((?&c)preg_replace(?&c)\((?&c)rawurldecode(?&c)\((?&c)"[%0-9A-F\.]+"(?&c)\)(?&c),\s*\'\',\s*__FILE__(?&c)\)(?&c)\)(?&c)\)(?&c);(\$\w+)\s*=\s*"([%\w\.\-\~]+)";(?:(\$\w+)=[^;]+;\5(?&c)\((?&c)\'\',\s*\'};\'\s*\.\s*(?&c)\()?(?:eval(?&c)\()?(?&c)rawurldecode(?&c)\((?&c)\3(?&c)\)(?&c)\s*\^\s*substr(?&c)\((?&c)str_repeat(?&c)\((?&c)\2,\s*(?&c)\((?&c)strlen(?&c)\((?&c)\3(?&c)\)(?&c)/strlen(?&c)\((?&c)\2(?&c)\)(?&c)\)(?&c)\s*\+\s*1(?&c)\)(?&c),\s*0,(?&c)\s*strlen(?&c)\((?&c)\3(?&c)\)(?&c)\)(?&c)\)(?:(?&c)\s*\.\s*\'{\'(?&c)\))?(?&c);~msi', $str, $i0l1i10001010000010); } $i0l1i10000110001000ypted = rawurldecode($i0l1i10001010000010[4]); if (!isset($xor_key)) { $plain_text = '@ini_set(\'error_log\', NULL);'; $plain_text2 = 'if (!defined('; $xor_key = substr($i0l1i10000110001000ypted, 0, strlen($plain_text)) ^ $plain_text; if (preg_match('~\.?[a-z0-9-_]{8,}\.\w{3}~', $xor_key, $m)) { $xor_key = $m[0]; } else { $xor_key = substr($i0l1i10000110001000ypted, 0, strlen($plain_text2)) ^ $plain_text2; if (preg_match('~\.?[a-z0-9-_]{8,}\.\w{3}~', $xor_key, $m)) { $xor_key = $m[0]; } } } $result = $i0l1i10000110001000ypted ^ substr(str_repeat($xor_key, (strlen($i0l1i10000110001000ypted) / strlen($xor_key)) + 1), 0, strlen($i0l1i10000110001000ypted)); return $result; } private function deobfuscateSubstCreateFunc($str) { preg_match('~(\$\w{1,40})=\'(([^\'\\\\]|\\\\.)*)\';\s*((\$\w{1,40})=(\1\[\d+].?)+;\s*)+(\$\w{1,40})=\'\';\s*(\$\w{1,40})\(\7,\$\w{1,40}\.\"([^\"]+)\"\.\$\w{1,40}\.\5\);~msi', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $php = base64_decode($i0l1i10001010000010[9]); preg_match('~(\$\w{1,40})=(\$\w{1,40})\("([^\']+)"\)~msi', $php, $i0l1i10001010000010); $i0l1i10001010000010[3] = base64_decode($i0l1i10001010000010[3]); $php = ''; for ($i = 1, $iMax = strlen($i0l1i10001010000010[3]); $i < $iMax; $i++) { if ($i % 2) { $php .= substr($i0l1i10001010000010[3], $i, 1); } } $php = str_replace($find, $php, $str); return $php; } private function deobfuscateZeura($str, $i0l1i10001010000010) { $offset = (int)$i0l1i10001010000010[8] + (int)$i0l1i10001010000010[9]; $obfPHP = explode('__halt_compiler();', $str); $obfPHP = end($obfPHP); $php = gzinflate(base64_decode(substr(trim($obfPHP), $offset))); $php = stripcslashes($php); $php = str_replace($i0l1i10001010000010[0], $php, $str); return $php; } private function deobfuscateZeuraFourArgs($str, $i0l1i10001010000010) { $offset = $i0l1i10001010000010[6] * -1; $res = gzinflate(base64_decode(substr(trim($str), $offset))); return $res; } private function deobfuscateSourceCop($str, $i0l1i10001010000010) { $i0l1i10000100010000 = $i0l1i10001010000010[2]; $obfPHP = $i0l1i10001010000010[1]; $res = ''; $index = 0; $len = strlen($i0l1i10000100010000); $temp = hexdec('&H' . substr($obfPHP, 0, 2)); for ($i = 2, $iMax = strlen($obfPHP); $i < $iMax; $i += 2) { $bytes = hexdec(trim(substr($obfPHP, $i, 2))); $index = (($index < $len) ? $index + 1 : 1); $decoded = $bytes ^ ord(substr($i0l1i10000100010000, $index - 1, 1)); if ($decoded <= $temp) { $decoded = 255 + $decoded - $temp; } else { $decoded -= $temp; } $res .= chr($decoded); $temp = $bytes; } $res = str_replace($i0l1i10001010000010[0], $res, $str); return $res; } private function deobfuscateGlobalsArray($str, $i0l1i10001010000010) { $res = $str; $alph = stripcslashes($i0l1i10001010000010[3]); $res = preg_replace('~\${"[\\\\x0-9a-f]+"}\[\'\w+\'\]\s*=\s*"[\\\\x0-9a-f]+";~msi', '', $res); for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) { $res = str_replace([ $i0l1i10001010000010[1] . '[' . $i0l1i10001010000010[2] . ']' . '[' . $i . '].', $i0l1i10001010000010[1] . '[' . $i0l1i10001010000010[2] . ']' . '[' . $i . ']' ], array("'" . $alph[$i] . "'", "'" . $alph[$i] . "'"), $res); } $res = str_replace("''", '', $res); preg_match_all('~(\$\w+)\[(\'\w+\')]\s*=\s*\'(\w+)\';~msi', $res, $funcs); foreach ($funcs[1] as $k => $var) { if ($var !== $i0l1i10001010000010[1]) { continue; } $vars[] = $funcs[2][$k]; $func[] = $funcs[3][$k]; } foreach ($vars as $index => $var) { $res = str_replace($i0l1i10001010000010[1] . '[' . $var . ']', $func[$index], $res); } foreach ($func as $remove) { $res = str_replace($remove . " = '" . $remove . "';", '', $res); $res = str_replace($remove . "='" . $remove . "';", '', $res); } $res = str_replace($i0l1i10001010000010[0], $res, $str); return $res; } private function deobfuscateXbrangwolf($str, $match) { return $match[0]; } private function deobfuscateObfB64($str, $i0l1i10001010000010) { $res = base64_decode($i0l1i10001010000010[3]); $res = str_replace($i0l1i10001010000010[0], $res, $str); return $res; } private function deobfuscateArrayOffsets($str) { $vars = []; preg_match('~(\$\w{1,40})\s*=\s*\'([^\']*)\';\s*(\$\w{1,40})\s*=\s*explode\s*\((chr\s*\(\s*\(\d+\-\d+\)\)),substr\s*\(\1,\s*\((\d+\-\d+)\),\s*\(\s*(\d+\-\d+)\)\)\);.+\1\s*=\s*\$\w+[+\-\*]\d+;~msi', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $obfPHP = $i0l1i10001010000010[2]; $i0l1i10001010000010[4] = Helpers::calc($i0l1i10001010000010[4]); $i0l1i10001010000010[5] = (int)Helpers::calc($i0l1i10001010000010[5]); $i0l1i10001010000010[6] = (int)Helpers::calc($i0l1i10001010000010[6]); $func = explode($i0l1i10001010000010[4], strtolower(substr($obfPHP, $i0l1i10001010000010[5], $i0l1i10001010000010[6]))); $func[1] = strrev($func[1]); $func[2] = strrev($func[2]); preg_match('~\$\w{1,40}\s=\sexplode\((chr\(\(\d+\-\d+\)\)),\'([^\']+)\'\);~msi', $str, $i0l1i10001010000010); $i0l1i10001010000010[1] = Helpers::calc($i0l1i10001010000010[1]); $offsets = explode($i0l1i10001010000010[1], $i0l1i10001010000010[2]); $res = ''; for ($i = 0; $i < (sizeof($offsets) / 2); $i++) { $res .= substr($obfPHP, $offsets[$i * 2], $offsets[($i * 2) + 1]); } preg_match('~return\s*\$\w{1,40}\((chr\(\(\d+\-\d+\)\)),(chr\(\(\d+\-\d+\)\)),\$\w{1,40}\);~msi', $str, $i0l1i10001010000010); $i0l1i10001010000010[1] = Helpers::calc($i0l1i10001010000010[1]); $i0l1i10001010000010[2] = Helpers::calc($i0l1i10001010000010[2]); $res = Helpers::stripsquoteslashes(str_replace($i0l1i10001010000010[1], $i0l1i10001010000010[2], $res)); $res = "<?php\n" . $res . "?>"; preg_match('~(\$\w{1,40})\s=\simplode\(array_map\(\"[^\"]+\",str_split\(\"(([^\"\\\\]++|\\\\.)*)\"\)\)\);(\$\w{1,40})\s=\s\$\w{1,40}\(\"\",\s\1\);\s\4\(\);~msi', $res, $i0l1i10001010000010); $i0l1i10001010000010[2] = stripcslashes($i0l1i10001010000010[2]); for ($i=0, $iMax = strlen($i0l1i10001010000010[2]); $i < $iMax; $i++) { $i0l1i10001010000010[2][$i] = chr(ord($i0l1i10001010000010[2][$i])-1); } $res = str_replace($i0l1i10001010000010[0], $i0l1i10001010000010[2], $res); preg_match_all('~(\$\w{1,40})\s*=\s*\"(([^\"\\\\]++|\\\\.)*)\";~msi', $res, $i0l1i10001010000010, PREG_SET_ORDER); foreach ($i0l1i10001010000010 as $match) { $vars[$match[1]] = stripcslashes($match[2]); } preg_match_all('~(\$\w{1,40})\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $i0l1i10001010000010, PREG_SET_ORDER); foreach ($i0l1i10001010000010 as $match) { $vars[$match[1]] = Helpers::stripsquoteslashes($match[2]); } preg_match('~(\$\w{1,40})\s*=\s*\"\\\\x73\\\\164\\\\x72\\\\137\\\\x72\\\\145\\\\x70\\\\154\\\\x61\\\\143\\\\x65";\s(\$\w{1,40})\s=\s\'(([^\'\\\\]++|\\\\.)*)\';\seval\(\1\(\"(([^\"\\\\]++|\\\\.)*)\",\s\"(([^\"\\\\]++|\\\\.)*)\",\s\2\)\);~msi', $res, $i0l1i10001010000010); $i0l1i10001010000010[7] = stripcslashes($i0l1i10001010000010[7]); $i0l1i10001010000010[3] = Helpers::stripsquoteslashes(str_replace($i0l1i10001010000010[5], $i0l1i10001010000010[7], $i0l1i10001010000010[3])); $res = str_replace($i0l1i10001010000010[0], $i0l1i10001010000010[3], $res); preg_match_all('~(\$\w{1,40})\s*=\s*\"(([^\"\\\\]++|\\\\.)*)\";~msi', $res, $i0l1i10001010000010, PREG_SET_ORDER); foreach ($i0l1i10001010000010 as $match) { $vars[$match[1]] = stripcslashes($match[2]); } preg_match_all('~(\$\w{1,40})\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $i0l1i10001010000010, PREG_SET_ORDER); foreach ($i0l1i10001010000010 as $match) { $vars[$match[1]] = Helpers::stripsquoteslashes($match[2]); } preg_match('~\$\w{1,40}\s=\sarray\(((\'(([^\'\\\\]++|\\\\.)*)\',?(\.(\$\w{1,40})\.)?)+)\);~msi', $res, $i0l1i10001010000010); foreach ($vars as $var => $value) { $i0l1i10001010000010[1] = str_replace("'." . $var . ".'", $value, $i0l1i10001010000010[1]); } $array2 = explode("','", substr($i0l1i10001010000010[1], 1, -1)); preg_match('~eval\(\$\w{1,40}\(array\((((\"[^\"]\"+),?+)+)\),\s(\$\w{1,40}),\s(\$\w{1,40})\)\);~msi', $res, $i0l1i10001010000010); $array1 = explode('","', substr($i0l1i10001010000010[1], 1, -1)); $temp = array_keys($vars); $temp = $temp[9]; $arr = explode('|', $vars[$temp]); $off=0; $funcs=[]; for ($i = 0, $iMax = count($arr); $i < $iMax; $i++) { if ($i === 0) { $off = 0; } else { $off = $arr[$i - 1] + $off; } $len = $arr[$i]; $temp = array_keys($vars); $temp = $temp[7]; $funcs[] = substr($vars[$temp], $off, $len); } for ($i = 0; $i < 5; $i++) { if ($i % 2 === 0) { $funcs[$i] = strrev($funcs[$i]); $g = substr($funcs[$i], strpos($funcs[$i], "9") + 1); $g = stripcslashes($g); $v = explode(":", substr($funcs[$i], 0, strpos($funcs[$i], "9"))); for ($j = 0, $jMax = count($v); $j < $jMax; $j++) { $q = explode("|", $v[$j]); $g = str_replace($q[0], $q[1], $g); } $funcs[$i] = $g; } else { $h = explode("|", strrev($funcs[$i])); $d = explode("*", $h[0]); $b = $h[1]; for ($j = 0, $jMax = count($d); $j < $jMax; $j++) { $b = str_replace($j, $d[$j], $b); } $funcs[$i] = $b; } } $temp = array_keys($vars); $temp = $temp[8]; $funcs[] = str_replace("9", ' ', strrev($vars[$temp])); $funcs = implode("\n", $funcs); preg_match('~\$\w{1,40}\s=\s\'.+?eval\([^;]+;~msi', $res, $i0l1i10001010000010); $res = str_replace($i0l1i10001010000010[0], $funcs, $res); $res = stripcslashes($res); $res = str_replace('}//}}', '}}', $res); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateArrayOffsetsEval($str, $i0l1i10001010000010) { $arg1 = explode(chr(Helpers::calculateMathStr($i0l1i10001010000010[4])), $i0l1i10001010000010[5]); $arg2 = $i0l1i10001010000010[2]; $code = null; for ($enqvlelpmr = 0; $enqvlelpmr < (sizeof($arg1) / 2); $enqvlelpmr++) { $code .= substr($arg2, $arg1[($enqvlelpmr * 2)], $arg1[($enqvlelpmr * 2) + 1]); } $res = str_replace( chr(Helpers::calculateMathStr($i0l1i10001010000010[20])), chr(Helpers::calculateMathStr($i0l1i10001010000010[21])), $code ); $arg1 = substr( $i0l1i10001010000010[2], Helpers::calculateMathStr($i0l1i10001010000010[7]), Helpers::calculateMathStr($i0l1i10001010000010[8]) ); $func = substr( $i0l1i10001010000010[2], Helpers::calculateMathStr($i0l1i10001010000010[23]), Helpers::calculateMathStr($i0l1i10001010000010[24]) ); return $res; } private function deobfuscateXoredVar($str, $i0l1i10001010000010) { $res = $str; $find = $i0l1i10001010000010[0]; $str = str_replace('\\\'', '@@quote@@', $str); preg_match_all('~(\$\w{1,40})\s*=\s*\'([^\']*)\'\s*(?:\^\s*\'([^\']*)\')?;~msi', $str, $i0l1i10001010000010, PREG_SET_ORDER); $vars = []; foreach ($i0l1i10001010000010 as $match) { $vars[$match[1]] = str_replace('@@quote@@', '\\\'', $match[2]); if (isset($match[3])) { $vars[$match[1]] ^= str_replace('@@quote@@', '\\\'', $match[3]); } $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res); } preg_match_all('~(\$\w{1,40})\s*=\s*(\w+);~msi', $str, $i0l1i10001010000010, PREG_SET_ORDER); foreach ($i0l1i10001010000010 as $match) { $vars[$match[1]] = $match[2]; } preg_match_all('~(\$\w{1,40})\s*=\s*\'([^\']*)\'\^(\$\w+);~msi', $str, $i0l1i10001010000010, PREG_SET_ORDER); foreach ($i0l1i10001010000010 as $match) { if (isset($vars[$match[3]])) { $vars[$match[1]] = str_replace('@@quote@@', '\\\'', $match[2]) ^ $vars[$match[3]]; $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res); } } preg_match_all('~(\$\w{1,40})\s*=\s*(\$\w+)\^\'([^\']*)\';~msi', $res, $i0l1i10001010000010, PREG_SET_ORDER); foreach ($i0l1i10001010000010 as $match) { if (isset($vars[$match[2]])) { $vars[$match[1]] = str_replace('@@quote@@', '\\\'', $match[3]) ^ $vars[$match[2]]; $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res); } } preg_match_all('~(?<!\.)\'([^\']*)\'\^(\$\w+)~msi', $res, $i0l1i10001010000010, PREG_SET_ORDER); foreach ($i0l1i10001010000010 as $match) { if (isset($vars[$match[2]])) { $res = str_replace($match[0], "'" . addcslashes(str_replace('@@quote@@', '\\\'', $match[1]) ^ $vars[$match[2]], '\\\'') . "'", $res); } } preg_match_all('~(\$\w+)\^\'([^\']*)\'~msi', $res, $i0l1i10001010000010, PREG_SET_ORDER); foreach ($i0l1i10001010000010 as $match) { if (isset($vars[$match[1]])) { $res = str_replace($match[0], "'" . addcslashes($vars[$match[1]] ^ str_replace('@@quote@@', '\\\'', $match[2]), '\\\'') . "'", $res); } } preg_match_all('~(\$\w+)(\.)?=(\$\w+)?(?:\'([^\']*)\')?\.?(\$\w+)?(?:\'([^\']*)\')?(?:\^(\$\w+))?(?:\.\'([^\']*)\')?;~msi', $res, $i0l1i10001010000010, PREG_SET_ORDER); foreach ($i0l1i10001010000010 as $match) { $val = ''; if (isset($match[2]) && $match[2] !== '') { if (isset($vars[$match[1]])) { $val .= $vars[$match[1]]; } else { continue; } } if (isset($match[3]) && $match[3] !== '') { if (isset($vars[$match[3]])) { $val .= $vars[$match[3]]; } else { continue; } } if (isset($match[4]) && $match[4] !== '') { $val .= $match[4]; } if (isset($match[5]) && $match[5] !== '') { if (isset($vars[$match[5]])) { $val .= $vars[$match[5]]; } else { continue; } } if (isset($match[6]) && $match[6] !== '') { $val .= $match[6]; } if (isset($match[7]) && $match[7] !== '') { if (isset($vars[$match[7]])) { $additionalStr = ''; if (isset($match[8]) && $match[8] !== '') { $additionalStr = $match[8]; } $val ^= $vars[$match[7]] . $additionalStr; } else { continue; } } else { if (isset($match[8]) && $match[8] !== '') { $val .= $match[8]; } } $vars[$match[1]] = $val; $res = str_replace($match[0], '', $res); } $res = preg_replace_callback('~(\$\w+)([()]|==)~msi', static function ($match) use ($vars) { $res = $vars[$match[1]] ?? $match[1]; if (isset($vars[$match[1]]) && ($match[2] === ')' || $match[2] === '==')) { $res = "'$res'"; } return $res . $match[2]; }, $res); foreach ($vars as $var => $value) { $res = str_replace($var, $value, $res); $res = str_replace($value . "='" . $value . "';", '', $res); } $res = str_replace($find, $res, $str); if (preg_match('~((\$\w+)=\${\'(\w+)\'};)(?:.*?)((\$\w+)=\2(\[\'[^\']+\'\]);)~msi', $res, $i0l1i10001010000010)) { $res = str_replace($i0l1i10001010000010[1], '', $res); $res = str_replace($i0l1i10001010000010[4], '', $res); $cookieVar = sprintf('$%s%s', $i0l1i10001010000010[3], $i0l1i10001010000010[6]); $res = str_replace($i0l1i10001010000010[5], $cookieVar, $res); } return $res; } private function deobfuscatePhpMess($str, $i0l1i10001010000010) { $res = base64_decode(gzuncompress(base64_decode(base64_decode($i0l1i10001010000010[4])))); $res = str_replace($i0l1i10001010000010[0], $res, $str); return $res; } private function deobfuscatePregReplaceSample05($str) { $res = ''; preg_match('~(\$\w{1,40})\s*=\s*\"([^\"]+)\";\s*\$\w+\s*=\s*\$\w+\(\1,\"([^\"]+)\",\"([^\"]+)\"\);\s*\$\w+\(\"[^\"]+\",\"[^\"]+\",\"\.\"\);~msi', $str, $i0l1i10001010000010); $res = strtr($i0l1i10001010000010[2], $i0l1i10001010000010[3], $i0l1i10001010000010[4]); $res = base64_decode($res); $res = str_replace($i0l1i10001010000010[0], $res, $str); return $res; } private function deobfuscatePregReplaceB64($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = str_replace($find, base64_decode($i0l1i10001010000010[4]), $str); $res = stripcslashes($res); preg_match('~eval\(\${\$\{"G\x4c\x4fB\x41\x4cS"\}\[\"\w+\"\]}\(\${\$\{"G\x4c\x4fB\x41\x4cS"\}\[\"\w+\"]}\(\"([^\"]+)\"\)\)\);~msi', $res, $i0l1i10001010000010); $res = gzuncompress(base64_decode($i0l1i10001010000010[1])); preg_match('~eval\(\$\w+\(\$\w+\("([^"]+)"\)\)\);~msi', $res, $i0l1i10001010000010); $res = gzuncompress(base64_decode($i0l1i10001010000010[1])); preg_match('~eval\(\$\w+\(\$\w+\("([^"]+)"\)\)\);~msi', $res, $i0l1i10001010000010); $res = gzuncompress(base64_decode($i0l1i10001010000010[1])); preg_match_all('~\$(\w+)\s*(\.)?=\s*("[^"]*"|\$\w+);~msi', $res, $i0l1i10001010000010, PREG_SET_ORDER); $var = $i0l1i10001010000010[0][1]; $vars = []; foreach ($i0l1i10001010000010 as $match) { if($match[2]!==".") { $vars[$match[1]] = substr($match[3], 1, -1); } else { $vars[$match[1]] .= $vars[substr($match[3], 1)]; } } $res = str_replace("s\x72\x72K\x65\x50J\x55\x77r\x4d\x5a", "=", $vars[$var]); $res = gzuncompress(base64_decode($res)); preg_match_all('~function\s*(\w+)\(\$\w+,\$\w+\)\{.+?}\s*};\s*eval\(((\1\(\'(\w+)\',)+)\s*"([\w/\+]+)"\)\)\)\)\)\)\)\);~msi', $res, $i0l1i10001010000010); $decode = array_reverse(explode("',", str_replace($i0l1i10001010000010[1][0] . "('", '', $i0l1i10001010000010[2][0]))); array_shift($decode); $arg = $i0l1i10001010000010[5][0]; foreach ($decode as $val) { $arg = Helpers::someDecoder2($val, $arg); } $res = $arg; $res = str_replace($find, $res, $str); return $res; } private function deobfuscateDecoder($str, $i0l1i10001010000010) { $res = Helpers::someDecoder($i0l1i10001010000010[2]); $res = str_replace($i0l1i10001010000010[0], $res, $str); return $res; } private function deobfuscateGBE($str) { preg_match('~(\$\w{1,40})=\'([^\']+)\';\1=gzinflate\(base64_decode\(\1\)\);\1=str_replace\(\"__FILE__\",\"\'\$\w+\'\",\1\);eval\(\1\);~msi', $str, $i0l1i10001010000010); $res = str_replace($i0l1i10001010000010[0], gzinflate(base64_decode($i0l1i10001010000010[2])), $str); return $res; } private function deobfuscateGBZ($str, $i0l1i10001010000010) { $res = str_replace($i0l1i10001010000010[0], base64_decode(str_rot13($i0l1i10001010000010[4])), $str); return $res; } private function deobfuscateBitrix($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = $str; $funclist = []; $strlist = []; $res = preg_replace("|[\"']\s*\.\s*['\"]|smi", '', $res); $res = Helpers::replaceMinMaxRound($res, 111); $res = Helpers::replaceBase64Decode($res, '"'); $replace_from = []; $replace_to = []; if (preg_match_all('|\$GLOBALS\[[\'"](.+?)[\'"]\]\s*=\s*Array\((.+?)\);|smi', $res, $founds, PREG_SET_ORDER)) { foreach ($founds as $found) { $varname = $found[1]; $funclist[$varname] = explode(',', $found[2]); $funclist[$varname] = array_map(function ($value) { return trim($value, "'\""); }, $funclist[$varname]); foreach ($funclist as $var => $funcs) { foreach($funcs as $k => $func) { $replace_from[] = '$GLOBALS["' . $var . '"][' . $k . ']'; $replace_from[] = '$GLOBALS[\'' . $var . '\'][' . $k . ']'; $replace_to[] = $func; $replace_to[] = $func; } } $replace_from[] = $found[0]; $replace_to[] = ''; $res = str_replace($replace_from, $replace_to, $res); } } $array_temp = []; while (preg_match('~function\s*(\w{1,60})\(\$\w+\){\$\w{1,60}\s*=\s*Array\((.{1,30000}?)\);\s*return\s*base64_decode[^}]+}~msi', $res, $found)) { $strlist = explode(',', $found[2]); $array_temp[$found[1]] = array_map("b\x61\x73e\x36\x34_\x64\x65c\x6f\x64e", $strlist); $replace_from = []; $replace_to = []; foreach($array_temp[$found[1]] as $k => $v) { $replace_from[] = $found[1] . '(' . $k . ')'; $replace_to[] = '\'' . $v . '\''; } $replace_from[] = $found[0]; $replace_to[] = ''; $res = str_replace($replace_from, $replace_to, $res); } $res = preg_replace('~\'\s*\.\s*\'~', '', $res); if (preg_match_all('~\s*function\s*(_+(.{1,60}?))\(\$[_0-9]+\)\s*\{\s*static\s*\$([_0-9]+)\s*=\s*(true|false);.{1,30000}?\$\3\s*=\s*array\((.*?)\);\s*return\s*base64_decode\(\$\3~smi', $res, $founds, PREG_SET_ORDER)) { foreach ($founds as $found) { $strlist = explode('",', $found[5]); $strlist = implode("',", $strlist); $strlist = explode("',", $strlist); $array_temp[$found[1]] = array_map("b\x61\x73e\x36\x34_\x64\x65c\x6f\x64e", $strlist); $replace_from = []; $replace_to = []; foreach($array_temp[$found[1]] as $k => $v) { $replace_from[] = $found[1] . '(' . $k . ')'; $replace_to[] = '\'' . $v . '\''; } $res = str_replace($replace_from, $replace_to, $res); } } $res = str_replace($find, $res, $str); return $res; } private function deobfuscateLockIt($str, $i0l1i10001010000010) { $phpcode = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($str))); $result = $str; $offset = 0; $dictName = $i0l1i10001010000010[1]; $dictVal = urldecode($i0l1i10001010000010[2]); $vars = [$dictName => $dictVal]; $vars = Helpers::getVarsFromDictionaryDynamically($vars, $str); if (preg_match('~eval\(~msi', $i0l1i10001010000010[15])) { $phpcode = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($i0l1i10001010000010[15]))); } if ($i0l1i10001010000010[7] !== '' && preg_match('~eval\(~msi', $i0l1i10001010000010[7])) { $phpcode2 = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($i0l1i10001010000010[7]))); $vars = Helpers::collectVars($phpcode2, "'", $vars); } if (preg_match('~\$_F=__FILE__;\$_X=\'([^\']+)\';\s*eval\s*\(\s*\$?\w{1,60}\s*\(\s*[\'"][^\'"]+[\'"]\s*\)\s*\)\s*;~msi', $str, $i0l1i10001010000010)) { $needles = Helpers::getNeedles($phpcode); $needle = $needles[0]; $before_needle = $needles[1]; $strToDecode = base64_decode($i0l1i10001010000010[1]); return '<?php ' . strtr($strToDecode, $needle, $before_needle); } $count = 0; preg_match_all('~,(\d+|0x\w+)\)~msi', $phpcode, $offsetMatches, PREG_SET_ORDER); if (count($offsetMatches) === 2) { foreach ($offsetMatches as $offsetMatch) { if (strpos($offsetMatch[1], "0\x78") !== false && isset($str[$offset + hexdec($offsetMatch[1])])) { $count++; $offset += hexdec($offsetMatch[1]); } else if (isset($str[$offset + (int)$offsetMatch[1]])) { $count++; $offset += (int)$offsetMatch[1]; } } } $finalOffset = 0; if (preg_match('~(\$[O0]*)=(\d+|0x\w+);~msi', $str, $match) && $count === 2) { if (strpos($match[2], "0\x78") !== false) { $finalOffset = hexdec($match[2]); } else { $finalOffset = (int)$match[2]; } } $result = substr($str, $offset); if ($finalOffset > 0) { $result = substr($result, 0, $finalOffset); } if (preg_match('~[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]~msi', $phpcode, $needleMatches)) { $result = strtr($result, $needleMatches[1], $needleMatches[2]); } $result = base64_decode($result); $result = Helpers::replaceVarsFromArray($vars, $result, true); for ($i = 0; $i < 2; $i++) { $result = preg_replace_callback('~eval\s?\(((?:(?:gzinflate|str_rot13|base64_decode)\()+\'[^\']+\'\)+);~msi', function ($match) { return $this->unwrapFuncs($match[1]); }, $result); $result = preg_replace_callback('~eval\s?\((?:str_rot13\()+\'((?|\\\\\'|[^\'])+\')\)\);~msi', function ($match) { return str_rot13($match[1]); }, $result); } $result = preg_replace_callback( '~(echo\s*)?base64_decode\(\'([\w=\+\/]+)\'\)~', function ($match) { if ($match[1] != "") { return 'echo \'' . base64_decode($match[2]) . '\''; } return '\'' . str_replace('\'', '\\\'', base64_decode($match[2])) . '\''; }, $result ); $result = Helpers::replaceVarsFromArray($vars, $result, true); return '<?php ' . $result; } private function deobfuscateB64inHTML($str, $i0l1i10001010000010) { $obfPHP = $str; $phpcode = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($obfPHP))); $needles = Helpers::getNeedles($phpcode); $needle = $needles[count($needles) - 2]; $before_needle = end($needles); $pointer1 = $i0l1i10001010000010[2]; $temp = strtr($obfPHP, $needle, $before_needle); $end = 8; for ($i = strlen($temp) - 1; $i > strlen($temp) - 15; $i--) { if ($temp[$i] === '=') { $end = strlen($temp) - 1 - $i; } } $phpcode = base64_decode(substr($temp, strlen($temp) - $pointer1 - ($end-1), $pointer1)); $phpcode = str_replace($i0l1i10001010000010[0], $phpcode, $str); return $phpcode; } private function deobfuscateStrtrFread($str, $layer2) { $str = explode('?>', $str); $str = end($str); $res = substr($str, $layer2[1], strlen($str)); $res = base64_decode(strtr($res, $layer2[2], $layer2[3])); $res = str_replace($layer2[0], $res, $str); return $res; } private function deobfuscateStrtrBase64($str, $i0l1i10001010000010) { $str = strtr($i0l1i10001010000010[2], $i0l1i10001010000010[3], $i0l1i10001010000010[4]); $res = base64_decode($str); $res = str_replace($i0l1i10001010000010[0], $res, $str); return $res; } private function deobfuscateByteRun($str) { preg_match('~\$_F=__FILE__;\$_X=\'([^\']+)\';\s*eval\s*\(\s*\$?\w{1,60}\s*\(\s*[\'"][^\'"]+[\'"]\s*\)\s*\)\s*;~msi', $str, $i0l1i10001010000010); $res = base64_decode($i0l1i10001010000010[1]); $res = strtr($res, "1\x32\x334\x35\x36a\x6f\x75i\x65", "a\x6f\x75i\x65\x312\x33\x345\x36"); $res = str_replace($i0l1i10001010000010[0], $res, $str); return $res; } private function deobfuscateExplodeSubst($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = $str; preg_match('~(\$_\w+\[\w+\])\s*=\s*explode\(\'([^\']+)\',\s*\'([^\']+)\'\);.+?(\1\[[a-fx\d]+\])\(\);~msi', $res, $i0l1i10001010000010); $subst_array = explode($i0l1i10001010000010[2], $i0l1i10001010000010[3]); $res = preg_replace_callback('~((\$_GET\[[O0]+\])|(\$[O0]+))\[([a-fx\d]+)\](\()?~msi', static function ($i0l1i10001010000010) use ($subst_array) { if (isset($i0l1i10001010000010[5])) { return $subst_array[hexdec($i0l1i10001010000010[4])] . '('; } return "'" . $subst_array[hexdec($i0l1i10001010000010[4])] . "'"; }, $res); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateSubst($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = $str; $alph = stripcslashes($i0l1i10001010000010[2]); for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) { $res = str_replace( [$i0l1i10001010000010[1] . '[' . $i . '].', $i0l1i10001010000010[1] . '[' . $i . ']'], ["'" . $alph[$i] . "'", "'" . $alph[$i] . "'"], $res ); } $res = str_replace("''", '', $res); $var = $i0l1i10001010000010[3]; preg_match_all('~(\$\w+)\[\]\s*=\s*\'([\w\*\-\#]+)\'~msi', $res, $i0l1i10001010000010); for ($i = 0, $iMax = count($i0l1i10001010000010[2]); $i <= $iMax; $i++) { if ($i0l1i10001010000010[1][$i] !== $var) { continue; } if (@function_exists($i0l1i10001010000010[2][$i])) { $res = str_replace($var . '[' . $i . ']', $i0l1i10001010000010[2][$i], $res); } else { $res = @str_replace($var . '[' . $i . ']', "'" . $i0l1i10001010000010[2][$i] . "'", $res); } } $res = str_replace($find, $res, $str); return $res; } private function deobfuscateUrldecode($str) { preg_match('~(\$\w+=\'[^\']+\';\s*)+(\$[\w{1,40}]+)=(urldecode|base64_decode)?\(?[\'"]([\w+%=-]+)[\'"]\)?;(\$[\w+]+=(\$(\w+\[\')?[O_0]*(\'\])?([\{\[]\d+[\}\]])?\.?)+;)+[^\?]+(\?\>[\w\~\=\/\+]+|.+\\\\x[^;]+;)~msi', $str, $i0l1i10001010000010); $find = $i0l1i10001010000010[0]; $res = $str; $res = stripcslashes($res); if ($i0l1i10001010000010[3] === "u\x72\x6cd\x65\x63o\x64\x65") { $alph = urldecode($i0l1i10001010000010[4]); $res = str_replace('urldecode(\'' . $i0l1i10001010000010[4] . '\')', "'" . $alph . "'", $res); } elseif ($i0l1i10001010000010[3] === "b\x61\x73e\x36\x34_\x64\x65c\x6f\x64e") { $alph = base64_decode($i0l1i10001010000010[4]); $res = str_replace('base64_decode(\'' . $i0l1i10001010000010[4] . '\')', "'" . $alph . "'", $res); } else { $alph = $i0l1i10001010000010[4]; } for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) { $res = str_replace([ $i0l1i10001010000010[2] . '[' . $i . '].', $i0l1i10001010000010[2] . '[' . $i . ']', $i0l1i10001010000010[2] . '{' . $i . '}.', $i0l1i10001010000010[2] . '{' . $i . '}' ], [ "'" . $alph[$i] . "'", "'" . $alph[$i] . "'", "'" . $alph[$i] . "'", "'" . $alph[$i] . "'"], $res ); } $res = str_replace("''", '', $res); preg_match_all('~\$(\w+)\s*=\s*\'([\w\*\-\#]+)\'~msi', $res, $i0l1i10001010000010, PREG_SET_ORDER); for ($i = 0, $iMax = count($i0l1i10001010000010); $i < $iMax; $i++) { $res = str_replace(['$' . $i0l1i10001010000010[$i][1] . '(' , '${"G\x4c\x4fB\x41\x4cS"}["' . $i0l1i10001010000010[$i][1] . '"]' . '('], $i0l1i10001010000010[$i][2] . '(', $res, $c); $res = str_replace(['$' . $i0l1i10001010000010[$i][1], '${"G\x4c\x4fB\x41\x4cS"}["' . $i0l1i10001010000010[$i][1] . '"]'], "'" . $i0l1i10001010000010[$i][2] . "'", $res, $cc); if ($c > 0 || $cc > 0) { $res = str_replace([ "'" . $i0l1i10001010000010[$i][2] . "'='" . $i0l1i10001010000010[$i][2] . "';", $i0l1i10001010000010[$i][2] . "='" . $i0l1i10001010000010[$i][2] . "';", $i0l1i10001010000010[$i][2] . "=" . $i0l1i10001010000010[$i][2] . ';', $i0l1i10001010000010[$i][0] . ';' ], '', $res); } } $res = Helpers::replaceCreateFunction($res); preg_match('~\$([0_O]+)\s*=\s*function\s*\((\$\w+)\)\s*\{\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),(\d+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,([\d-]+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),strlen\s*\(\2\)-(\d+)\);\s*return\s*gzinflate\s*\(base64_decode\s*\(\$[O_0]+\s*\.\s*\$[O_0]+\s*\.\s*\$[O_0]+\)+;~msi', $res, $i0l1i10001010000010); $res = preg_replace_callback('~\$\{"G\x4c\x4fB\x41\x4cS"}\["([0_O]+)"\]\s*\(\'([^\']+)\'\)~msi', static function ($calls) use ($i0l1i10001010000010) { if ($calls[1] !== $i0l1i10001010000010[1]) { return $calls[0]; } $temp1 = substr($calls[2], $i0l1i10001010000010[3], $i0l1i10001010000010[4]); $temp2 = substr($calls[2], $i0l1i10001010000010[5]); $temp3 = substr($calls[2], $i0l1i10001010000010[6],strlen($calls[2]) - $i0l1i10001010000010[7]); return "'" . gzinflate(base64_decode($temp1 . $temp3 . $temp2)) . "'"; }, $res); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateUrlDecode3($str, $i0l1i10001010000010) { $dictionaryKey = $i0l1i10001010000010[4]; $dictionaryVal = urldecode($i0l1i10001010000010[3]); $result = Helpers::replaceVarsFromDictionary($dictionaryKey, $dictionaryVal, $str); return $result; } public function unwrapFuncs($string, $level = 0) { $close_tag = false; $res = ''; if (trim($string) == '') { return ''; } if ($level > 100) { return ''; } if ((($string[0] === '\'') || ($string[0] === '"')) && (substr($string, 1, 2) !== '?>')) { if($string[0] === '"' && preg_match('~\\\\x\d+~', $string)) { return stripcslashes($string); } $end = -2; if ($string[-3] === '\'') { $end = -3; } return substr($string, 1, $end); } if ($string[0] === '$') { preg_match('~\$\w{1,40}~', $string, $string); $string = $string[0]; $str = $this->getPreviouslyDeclaredVars($string); return $str; } $pos = strpos($string, '('); $function = substr($string, 0, $pos); $arg = $this->unwrapFuncs(substr($string, $pos + 1), $level + 1); if (strpos($function, '?>') !== false || strpos($function, "'.") !== false) { $function = str_replace(["'?>'.", '"?>".', "'?>' .", '"?>" .', "'."], '', $function); $close_tag = true; } $function = str_replace(['@', ' '], '', $function); $safe = Helpers::isSafeFunc($function); if ($safe) { if ($function === "p\x61\x63k") { $args = explode(',', $arg); $args[0] = substr(trim($args[0]), 0, -1); $args[1] = substr(trim($args[1]), 1); $res = @$function($args[0], $args[1]); } elseif ($function === "u\x6e\x73e\x72\x69a\x6c\x69z\x65") { $res = Helpers::unserialize($arg); } elseif ($function === "s\x74\x72_\x72\x65p\x6c\x61c\x65") { $args = explode(',', $arg); $args[0] = substr(trim($args[0]), 0, -1 ); $args[1] = substr(trim($args[1]), 0); if (trim($args[1]) === "n\x75\x6cl") { $args[1] = null; } $args[2] = $this->unwrapFuncs(trim($args[2]), $level + 1) ?? $args[2]; $res = @$function($args[0], $args[1], $args[2]); } else if ($function === "c\x68\x72") { $res = @$function((int)$arg); } else { $res = @$function($arg); } } else { $res = $arg; } if ($close_tag) { $res = "?> " . $res; $close_tag = false; } return $res; } private function deobfuscateEvalFunc($str) { $res = $str; $res = stripcslashes($res); preg_match('~function\s*(\w{1,40})\((\$\w{1,40})\)\s*\{\s*(\$\w{1,40})\s*=\s*\"base64_decode\";\s*(\$\w{1,40})\s*=\s*\"gzinflate\";\s*return\s*\4\(\3\(\2\)\);\s*\}\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*eval\(\1\(\"([^\"]*)\"\)\);~msi', $res, $i0l1i10001010000010); $res = gzinflate(base64_decode($i0l1i10001010000010[5])); $res = str_replace($str, $res, $str); return $res; } private function deobfuscateEvalConcatFunc($str, $i0l1i10001010000010) { $res = $i0l1i10001010000010[2]; if (str_replace('"."', '', $i0l1i10001010000010[6]) === '"c\x72\x65a\x74\x65_\x66\x75n\x63\x74i\x6f\x6e"') { $brackets = ''; $res = preg_replace_callback('~[\w."]+\(~', static function ($match) use (&$brackets) { $replace = strtolower(str_replace('"."', '', $match[0])); if (strpos($replace, "e\x76\x61l") === false) { $brackets .= ')'; return $replace; } return ""; }, $res); $res .= "'$i0l1i10001010000010[4]'" . $brackets . ';'; $res = $this->unwrapFuncs($res); } return $res; } private function deobfuscateEvalHex($str) { preg_match('~eval\s*\("(\\\\x?\d+[^"]+)"\);~msi', $str, $i0l1i10001010000010); $res = stripcslashes($i0l1i10001010000010[1]); $res = str_replace($i0l1i10001010000010[1], $res, $res); $res = str_replace($i0l1i10001010000010[0], $res, $str); return $res; } private function deobfuscateEvalVarConcat($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = $str; preg_match_all('~(\$\w+)\s*\.?=\s*"([^"]+)";~msi', $str, $i0l1i10001010000010, PREG_SET_ORDER); $vars = []; foreach ($i0l1i10001010000010 as $match) { $res = str_replace($match[0], '', $res); $res = str_replace($match[1], '"' . $match[2] . '"', $res); } $res = preg_replace('/[\'"]\s*?\.+\s*?[\'"]/smi', '', $res); $res = str_replace($find, $res, $str); return $res; } public function deobfuscateEvalVarSpecific($str, $i0l1i10001010000010) { $res = $str; if (preg_match('~\${"[^"]+"}\["[^"]+"\]|\${\${"[^"]+"}\["[^"]+"\]}~msi', $str)) { $res = stripcslashes($res); preg_match_all('~(\${"[^"]+"}\["[^"]+"\])="([^"]+)";~msi',$res, $match, PREG_SET_ORDER); foreach ($match as $m) { $res = str_replace('${' . $m[1] . '}', '$' . $m[2], $res); } } $vars = Helpers::collectVars($res); if (preg_match('~eval\(htmlspecialchars_decode\(urldecode\(base64_decode\((\$\w+)\)\)\)\);~msi', $res, $m) && isset($vars[$m[1]])) { $res = htmlspecialchars_decode(urldecode(base64_decode($vars[$m[1]]))); } $res = Helpers::replaceVarsFromArray($vars, $res, false, true); return $res; } private function deobfuscateEvalVar($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $evalVar = $i0l1i10001010000010[7]; if (!$evalVar) { $evalVar = $i0l1i10001010000010[6]; $pregVal = '\$\w+'; $pregStr = '[\'"]?([\/\w\+=]+)[\'"]?'; $pregFunc = '(?:base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\()+(?:["\']([\/\w\+=]+)["\'])'; while (preg_match('~str_replace\(["\']([\/\w]+)["\'],\s?["\']([\/\w\+=]+)["\'],\s?(?|(' . $pregVal . ')|(?:' . $pregStr . ')|(' . $pregFunc . '))\)~msi', $evalVar, $match)) { $result = $match[0]; if (preg_match('~' . $pregVal . '~', $match[3], $arg)) { $result = str_replace($match[1], $match[2], $i0l1i10001010000010[3]); } elseif (preg_match('~' . $pregFunc . '~', $match[3], $arg)) { $unwrappedVar = $this->unwrapFuncs($arg[0]); $result = str_replace($match[1], $match[2], $unwrappedVar); } elseif (preg_match('~' . $pregStr . '~', $match[3], $arg)) { $result = str_replace($match[1], $match[2], $match[3]); } $evalVar = str_replace($match[0], "\"$result\"" . ')', $evalVar); } return $this->unwrapFuncs($i0l1i10001010000010[5] . $evalVar); } $str = str_replace(['\\\'', '\\"'], ['@@slaquote@@', '@@sladquote@@'], $str); $val = ''; $index = 0; if (@preg_match_all('~(\$[^\s=\'"\)]+)\s*=\s*\(?(?|("[^"]+")|(\'[^\']+\'))\)?\s*;?~msi', $str, $i0l1i10001010000010)) { $i0l1i10001010000010[1] = array_reverse($i0l1i10001010000010[1], true); $index = array_search($evalVar, $i0l1i10001010000010[1], true); if ($index !== false) { $val = @$i0l1i10001010000010[2][$index]; } } $string = $str; if ($val !== '') { $string = str_replace($i0l1i10001010000010[0][$index], '', $string); $val = substr($val, 1, -1); $var_index = substr_count($string, $evalVar . ' = '); $text = "'" . addcslashes(stripcslashes($val), "\\'") . "'"; preg_match_all('~(\$[^\s=\'"\)]+)(?=[^a-zA-Z0-9])~ms', $string, $i0l1i10001010000010, PREG_OFFSET_CAPTURE); $i0l1i10001010000010 = array_reverse($i0l1i10001010000010[1]); foreach($i0l1i10001010000010 as $match) { if ($match[0] === $evalVar) { $string = substr_replace($string, $text, $match[1], strlen($match[0])); break; } } $string = preg_replace_callback('~\(\s*(\$[^\s=\'"\)]+)~msi', static function($m) use ($evalVar, $text) { if ($m[1] !== $evalVar) { return $m[0]; } return '(' . $text; }, $string); } $string = str_replace('assert(', 'eval(', $string); $string = str_replace('@@slaquote@@', '\\\'', $string); $string = str_replace('@@sladquote@@', '\\"', $string); $string = str_replace("eval(''.", 'eval(', $string); $res = str_replace($find, $string, $str); if (strpos($string, 'gzinflate(\'') !== false) { $res = $this->deobfuscateEval(stripcslashes($res), []); } return $res; } private function deobfuscateEval($str, $i0l1i10001010000010) { if (preg_match('~\)+\..{0,30}base64_decode~msi', $str)) { $res = explode(').', $str); $res = implode(')); eval(', $res); return $res; } if (preg_match('~@?stream_get_contents\(\$\w+\),\s*true~msi', $str, $i0l1i10001010000010)) { if (preg_match('~(\$\w+)\s*=\s*@?fopen\(__FILE__,\s*\'\w+\'\);\s*@?fseek\(\1,\s*([0-9a-fx]+)~msi', $this->full_source, $m)) { $offset = hexdec($m[2]); $end = substr($this->full_source, $offset); $res = str_replace($i0l1i10001010000010[0], '\'' . $end . '\'', $str); return $res; } } $res = $str; $group = ''; if (preg_match('~(preg_replace\(["\'](?:/\.\*?/[^"\']+|[\\\\x0-9a-f]+)["\']\s*,\s*)[^\),]+(?:[\)\\\\0-5]+;[\'"])?(,\s*["\'][^"\']*["\'])\)+;~msi', $res, $i0l1i10001010000010)) { if (strpos(stripcslashes($i0l1i10001010000010[1]), '(.*)') !== false || strpos(stripcslashes($i0l1i10001010000010[1]), '(.+)') !== false) { $group = substr(stripcslashes($i0l1i10001010000010[2]), 2, -1); } $res = str_replace([$i0l1i10001010000010[1], $i0l1i10001010000010[2]], ['eval(', ''], $res); if ($group !== '' && strpos(stripcslashes($res), '\1') !== false) { $res = stripcslashes($res); $res = str_replace('\1', $group, $res); } return $res; } if (strpos($res, 'e\x76al') !== false || strpos($res, '\x29') !== false || strpos($res, 'base64_decode("\\x') !== false ) { $res = stripcslashes($res); } if (strpos($res, '"."') !== false) { $res = str_replace('"."', '', $res); } if (preg_match('~((\$\w+)\s*=\s*create_function\(\'\',\s*)[^\)]+\)+;\s*(\2\(\);)~msi', $res, $i0l1i10001010000010)) { $res = str_replace($i0l1i10001010000010[1], 'eval(', $res); $res = str_replace($i0l1i10001010000010[3], '', $res); return $res; } if (preg_match('~eval\s*/\*[\w\s\.:,]+\*/\s*\(~msi', $res, $i0l1i10001010000010)) { $res = str_replace($i0l1i10001010000010[0], 'eval(', $res); return $res; } if (preg_match('~\$_(POST|GET|REQUEST|COOKIE)~ms', $res)) { return $res; } $res = preg_replace('~"\s+\?>\s*"\s*\.~m', '"?>".', $res, 3); $string = substr($res, 5, -2); $res = $this->unwrapFuncs($string); if (preg_match('~\?>\s*([\w/+]+==)~msi', $res, $match)) { $code = base64_decode($match[1]); if (strpos($code, 'error_reporting(') !== false) { $res = '?> ' . $code; } } if (preg_match('~chr\(\d+\^\d+\)~msi', $res)) { $res = Helpers::normalize($res); } $res = str_replace($str, $res, $str); return $res; } private function deobfuscateEvalCodeFunc($str, $i0l1i10001010000010) { $res = substr($str, 5, -2); $res = $this->unwrapFuncs($res); $res = stripcslashes($res); $res = str_replace($str, $res, $str); return $res; } private function deobfuscateEcho($str, $i0l1i10001010000010) { $res = $str; $string = $i0l1i10001010000010[0]; if (preg_match('~\$_(POST|GET|REQUEST|COOKIE)~ms', $res)) { return $res; } $string = substr($string, 5); $res = $this->unwrapFuncs($string); $res = str_replace($string, '\'' . addcslashes($res, '\'') . '\';', $str); return $res; } private function deobfuscateFOPO($str, $i0l1i10001010000010) { $phpcode = Helpers::formatPHP($str); $phpcode = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($phpcode))); if (preg_match('~eval\s*\(\s*\$[\w|]+\s*\(\s*\$[\w|]+\s*\(~msi', $phpcode)) { preg_match_all('~\$\w+\(\$\w+\(\$\w+\("[^"]+"\)+~msi', $phpcode, $i0l1i100010100000102); $array = end($i0l1i100010100000102); @$phpcode = gzinflate(base64_decode(str_rot13(Helpers::getTextInsideQuotes(end($array))))); $old = ''; $hangs = 0; while (($old != $phpcode) && (strpos($phpcode, 'eval($') !== false) && (strpos($phpcode, "_\x5f\x46I\x4c\x45_\x5f") === false) && $hangs < 30) { $old = $phpcode; $funcs = explode(';', $phpcode); if (count($funcs) === 5) { $phpcode = gzinflate(base64_decode(str_rot13(Helpers::getTextInsideQuotes(Helpers::getEvalCode($phpcode))))); } elseif (count($funcs) === 4) { $phpcode = gzinflate(base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($phpcode)))); } $hangs++; } $res = str_replace($i0l1i10001010000010[0], substr($phpcode, 2), $str); } else { $res = str_replace($i0l1i10001010000010[0], $phpcode, $str); } return $res; } private function deobfuscateFakeIonCube($str, $i0l1i10001010000010) { $subst_value = 0; $i0l1i10001010000010[1] = Helpers::calc($i0l1i10001010000010[1]); $subst_value = (int)$i0l1i10001010000010[1] - 21; $code = @pack("H*", preg_replace("/[A-Z,\r,\n]/", "", substr($str, $subst_value))); $res = str_replace($i0l1i10001010000010[0], $code, $str); return $res; } private function deobfuscateCobra($str, $i0l1i10001010000010) { $find = $i0l1i10001010000010[0]; $res = $str; $res = preg_replace_callback( '~eval\(\"return strrev\(base64_decode\(\'([^\']+)\'\)\);\"\)~msi', static function ($i0l1i10001010000010) { return strrev(base64_decode($i0l1i10001010000010[1])); }, $res ); $res = preg_replace_callback( '~eval\(gzinflate\(base64_decode\(\.\"\'([^\']+)\'\)\)\)\;~msi', static function ($i0l1i10001010000010) { return gzinflate(base64_decode($i0l1i10001010000010[1])); }, $res ); preg_match('~(\$\w{1,40})\s*=\s*\"([^\"]+)\"\;\s*\1\s*=\s*explode\(\"([^\"]+)\",\s*\s*\1\);~msi', $res, $i0l1i10001010000010); $var = $i0l1i10001010000010[1]; $decrypt = base64_decode(current(explode($i0l1i10001010000010[3], $i0l1i10001010000010[2]))); $decrypt = preg_replace_callback( '~eval\(\"return strrev\(base64_decode\(\'([^\']+)\'\)\);\"\)~msi', static function ($i0l1i10001010000010) { return strrev(base64_decode($i0l1i10001010000010[1])); }, $decrypt ); $decrypt = preg_replace_callback( '~eval\(gzinflate\(base64_decode\(\.\"\'([^\']+)\'\)\)\)\;~msi', static function ($i0l1i10001010000010) { return gzinflate(base64_decode($i0l1i10001010000010[1])); }, $decrypt ); preg_match('~if\(\!function_exists\(\"(\w+)\"\)\)\s*\{\s*function\s*\1\(\$string\)\s*\{\s*\$string\s*=\s*base64_decode\(\$string\)\;\s*\$i0l1i10000100010000\s*=\s*\"(\w+)\"\;~msi', $decrypt, $i0l1i10001010000010); $decrypt_func = $i0l1i10001010000010[1]; $xor_key = $i0l1i10001010000010[2]; $res = preg_replace_callback( '~\\' . $var . '\s*=\s*.*?eval\(' . $decrypt_func . '\(\"([^\"]+)\"\)\)\;\"\)\;~msi', static function ($i0l1i10001010000010) use ($xor_key) { $string = base64_decode($i0l1i10001010000010[1]); $i0l1i10000100010000 = $xor_key; $xor = ""; for ($i = 0, $iMax = strlen($string); $i < $iMax;) { for ($j = 0, $jMax = strlen($i0l1i10000100010000); $j < $jMax; $j++,$i++) { if (isset($string[$i])) { $xor .= $string[$i] ^ $i0l1i10000100010000[$j]; } } } return $xor; }, $res ); $res = str_replace($find, $res, $str); return $res; } private function deobfuscateFlamux($str, $i0l1i10001010000010) { $str = $i0l1i10001010000010[0]; $vars = []; preg_match_all('~(\$\w+=[\'"]\w+[\'"];)~', $str, $match); foreach ($match[0] as $var) { $split = explode('=', str_replace(';', '', $var)); $vars[$split[0]] = $split[1]; } $res = ''; preg_match_all('~(\$\w+=\$\w+[\'.]+\$\w+;)~', $str, $match); for ($i = 0, $iMax = count($match[0]); $i < $iMax; $i++) { $split = explode('=', str_replace(';', '', $match[0][$i])); $concats = explode(".", $split[1]); $str_to_concat = ''; foreach ($concats as $concat) { $str_to_concat .= $vars[$concat] ?? ''; } $vars[$split[0]] = $str_to_concat; if ($i === ($iMax - 1)) { $res = gzinflate(base64_decode(base64_decode(str_rot13($str_to_concat)))); } } return $res; } private function deobfuscateDarkShell($str, $i0l1i10001010000010) { return stripcslashes($i0l1i10001010000010[0]); } private function deobfuscateWso($str, $i0l1i10001010000010) { $result = $i0l1i10001010000010[0]; $i0l1i10000111110110Var = $i0l1i10001010000010[8]; preg_match_all('~(\[([-+\(\d*\/\)]+)\])+~', $result, $mathMatches); foreach ($mathMatches[0] as $index => $match) { $search = $mathMatches[2][$index]; $mathResult = Helpers::calculateMathStr($search); $result = str_replace("[$search]", "[$mathResult]", $result); } $dictionary = $i0l1i10001010000010[2]; $variables = Helpers::getVarsFromDictionary($dictionary, $result); $variables[$i0l1i10001010000010[6]] = $i0l1i10001010000010[7]; preg_match_all('~(\$\w+)\.=(\$\w+)~', $result, $i0l1i10001010000010); foreach ($i0l1i10001010000010 as $index => $match) { $var = $i0l1i10001010000010[1][$index]; $value = $i0l1i10001010000010[2][$index]; if (!isset($variables[$var])) { $variables[$var] = (string)$variables[$value] ?? ''; } else { $variables[$var] .= (string)$variables[$value] ?? ''; } } if (isset($variables[$i0l1i10000111110110Var])) { $result = $variables[$i0l1i10000111110110Var]; } if (preg_match('~(\$\w+)\s+=\s+(["\'\w\/+]+);(\$\w+)=base64_decode\(\1\);(\$\w+)=gzinflate\(\3\);eval\(\4\);~msi', $result, $match)) { $result = gzinflate(base64_decode($match[2])); } $result = str_replace('<?php', '', $result); return $result; } private function deobfuscateAnonymousFox($str, $i0l1i10001010000010) { $string = $i0l1i10001010000010[7]; $array = strlen(trim($string)); $debuger = ''; for ($one = 0; $one < $array; $one += 2) { $debuger .= pack("C", hexdec(substr($string, $one, 2))); } $string = $debuger; $result = $string . $i0l1i10001010000010[8] . "';"; return $result; } private function deobfuscateWsoEval($str, $i0l1i10001010000010) { $result = base64_decode($i0l1i10001010000010[2]); preg_match('~data:image/png;(.*)">~im', $result, $match); $result = str_replace( array ('%', '#'), array ("/", '+'), $match[1]); $result = gzinflate(base64_decode($result)); return $result; } private function deobfuscateAssertStr($str, $i0l1i10001010000010) { return "e\x76\x61l" . $i0l1i10001010000010[3]; } private function deobfuscateEvalFuncFunc($str, $i0l1i10001010000010) { return Helpers::decrypt_T_func(base64_decode($i0l1i10001010000010[15])); } private function deobfuscateFuncVar($str, $i0l1i10001010000010) { $arg1 = str_replace($i0l1i10001010000010[5], '', $i0l1i10001010000010[3]); $funcName = str_replace($i0l1i10001010000010[8], '', $i0l1i10001010000010[7]); $insidefuncName = str_replace($i0l1i10001010000010[11], '', $i0l1i10001010000010[10]); if ($funcName === "c\x72\x65a\x74\x65_\x66\x75n\x63\x74i\x6f\x6e") { $result = sprintf('%s(%s(\'%s\');', $insidefuncName, $arg1, $i0l1i10001010000010[15]); } else { $result = sprintf( '%s = %s(\'%s\',\'%s(%s(%s));\');%s(\'%s\');', $i0l1i10001010000010[14], $funcName, $i0l1i10001010000010[13], $insidefuncName, $arg1, $i0l1i10001010000010[13], $i0l1i10001010000010[14], $i0l1i10001010000010[15] ); } return $result; } private function deobfuscateEchoEval($str, $i0l1i10001010000010) { $i0l1i10000111110110 = $i0l1i10001010000010[4]; $i0l1i10000111110110 = str_replace($i0l1i10001010000010[1], $i0l1i10001010000010[2], $i0l1i10000111110110); $result = str_replace($i0l1i10001010000010[3], $i0l1i10000111110110, $i0l1i10001010000010[5]); return $result; } private function deobfuscateDictionaryVars($str, $i0l1i10001010000010) { $dictionary = $i0l1i10001010000010[2]; $dictionary = str_replace("\'", "'", $dictionary); $dictionary = str_replace('\"', '"', $dictionary); $i0l1i10000111110110 = $i0l1i10001010000010[4]; $vars = Helpers::getVarsFromDictionary($dictionary, $i0l1i10001010000010[0]); if (isset($vars[$i0l1i10001010000010[6]]) && $vars[$i0l1i10001010000010[6]] === "c\x72\x65a\x74\x65_\x66\x75n\x63\x74i\x6f\x6e") { $i0l1i10000111110110 = str_replace($i0l1i10001010000010[5], 'eval(' . $i0l1i10001010000010[7] . ');', $i0l1i10000111110110); } $i0l1i10000111110110 = Helpers::replaceVarsFromDictionary($i0l1i10001010000010[1], $dictionary, $i0l1i10000111110110); foreach ($vars as $i0l1i10000100010000 => $value) { $i0l1i10000111110110 = str_replace($i0l1i10000100010000, $value, $i0l1i10000111110110); } $i0l1i10000111110110 = preg_replace_callback('~\${[\'"](\w+)[\'"]}~msi', static function ($m) { return '$' . $m[1]; }, $i0l1i10000111110110); $i0l1i10000111110110 = str_replace("''}", "\''}", $i0l1i10000111110110); return $i0l1i10000111110110; } private function deobfuscateConcatVarFunc($str, $i0l1i10001010000010) { $strVar = ""; if ($i0l1i10001010000010["c\x6f\x6ec\x61\x74V\x61\x72"] !== "") { $strVar = Helpers::concatVariableValues($i0l1i10001010000010[2], false); } else { if ($i0l1i10001010000010["s\x74\x72V\x61\x6c"] !== "") { $strVar = $i0l1i10001010000010["s\x74\x72V\x61\x6c"]; } } $result = ""; $iMax = strlen($strVar) / 2; for ($i = 0; $i < $iMax; $i++) { $result .= chr(base_convert(substr($strVar, $i * 2, 2), 16, 10)); } return $result; } private function deobfuscateConcatVarFuncFunc($str, $i0l1i10001010000010) { $result = $i0l1i10001010000010[12]; $func1 = Helpers::concatVariableValues($i0l1i10001010000010[2]); $func2 = Helpers::concatVariableValues($i0l1i10001010000010[22]); $func3 = Helpers::concatVariableValues($i0l1i10001010000010[19]); $func4 = Helpers::concatVariableValues($i0l1i10001010000010[7]); $result = sprintf('eval(%s(%s(%s(%s("%s")))));', $func1, $func2, $func3, $func4, $result); return $result; } private function deobfuscateEvalVarDoubled($str) { $result = $str; preg_match_all('~(\$\w+)\s?=\s?(\w+)\([\'"]([^\'"]+)[\'"]\);~', $str, $varMatches); foreach ($varMatches[0] as $index => $varMatch) { $var_name = $varMatches[1][$index]; $func_name = $varMatches[2][$index]; $str = $varMatches[3][$index]; if (Helpers::isSafeFunc($func_name)) { $str = @$func_name($str); } $result = str_replace($varMatch, '', $result); $result = str_replace($var_name, $str, $result); } return $result; } private function deobfuscateVarFuncsEcho($str, $i0l1i10001010000010) { $result = $str; $func = $i0l1i10001010000010[2]; if (Helpers::isSafeFunc($i0l1i10001010000010[2])) { $result = @$func($i0l1i10001010000010[3]); $result = str_replace('<?php', '', $result); } return $result; } private function deobfuscateVarFuncsMany($str, $i0l1i10001010000010) { $result = $i0l1i10001010000010[0]; $strName = $i0l1i10001010000010[1]; $dictionaryName = $i0l1i10001010000010[2]; $dictionaryValue = Helpers::collectStr("$i0l1i10001010000010[3]", "'"); $funcs = []; $vars = []; $result = preg_replace_callback('~(\$\w+)=((?:(\$\w{1,50})\[?{?\d+\]?}?\.?)+);~msi', function ($m) use (&$vars, $dictionaryValue) { $vars = array_merge($vars, Helpers::getVarsFromDictionary($dictionaryValue, $m[0])); return ''; }, $result); $result = preg_replace_callback( '~(\$\w+)\s?=\s?array\([\'"]([\w+\/]+)[\'"]\s?,\s?[\'"]([\w+\/]+)[\'"](?:\s?,[\'"]([\w+\/]+)[\'"]\s?)?\);\s?((?:(?:\$\w+=\s?\w+\(\$\w+,\s?)|(?:return\s?))(join\([\'"]{2},\s?\1\))\s?\)?\s?;)~msi', function ($match) { $joinedVars = implode("", [$match[2], $match[3], $match[4]]); $replace = str_replace($match[6], "'$joinedVars'", $match[5]); return $replace; }, $result ); $result = preg_replace_callback( '~global\s(\$\w+);\s?((\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?\1\s?\.=\s?"({\3}{\5}{\7})");~', function ($match) { $concatedVars = $match[4] . $match[6] . $match[8]; $replace = str_replace($match[2], sprintf('%s.="%s"', $match[1], $concatedVars), $match[0]); return $replace; }, $result ); $result = preg_replace_callback( '~((\$\w+)\s?=\s?[\'"]([\w\/+=]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+=]+)[\'"];\s?return\s?"({\2}{\4})");~msi', function ($match) { $concatedVars = $match[3] . $match[5]; $replace = str_replace($match[1], sprintf('return "%s"', $concatedVars), $match[0]); return $replace; }, $result ); $result = preg_replace_callback( '~(?:class\s(?<className>\w+)\s?{\s?)?(?:public\s)?function\s(?<methodName>\w+\(\)){\s?(?<codeBlock>.*?;)\s}\s?(?:}\s?)?~msi', function ($match) use (&$funcs, $strName, $dictionaryName, $dictionaryValue) { $str = ""; $isConcat = false; if (preg_match( '~return\s[\'"]([\w+\/+=]+)[\'"];~msi', $match[0], $returnCode )) { $str = $returnCode[1]; } else { if (preg_match( '~global\s(\$\w+);\s?\1\s?\.=\s?["\']([\w+\/+]+)["\'];?~msi', $match[0], $concatCode )) { $str = $concatCode[2]; $isConcat = true; } else { if (preg_match( '~global\s(\$' . substr( $dictionaryName, 1 ) . ');\s*return\s*((?:\s?\1\[?{?\d+\]?}?\s?\.?\s?)+);?~msi', $match[0], $returnCode )) { $str = Helpers::getVarsFromDictionary( $dictionaryValue, sprintf('%s=%s', $dictionaryName, $returnCode[2]) ); $str = $str[$dictionaryName]; $isConcat = false; } } } $funcs[$match["m\x65\x74h\x6f\x64N\x61\x6de"]]["s\x74\x72"] = $str; $funcs[$match["m\x65\x74h\x6f\x64N\x61\x6de"]]["c\x6f\x6ec\x61\x74"] = $isConcat; return ""; }, $result ); $result = preg_replace_callback( '~(\$[^' . substr($strName, 1) . ']\w+)\s?=\s?(\w+\(\));~ms', function ($match) use ($funcs, &$vars) { if (isset($funcs[$match[2]]) && !$funcs[$match[2]]["c\x6f\x6ec\x61\x74"]) { $vars[$match[1]] = $funcs[$match[2]]["s\x74\x72"]; } return ""; }, $result ); foreach ($vars as $name => $var) { $result = str_replace($name, $var, $result); } $result = preg_replace_callback( '~([\w_]+)\s?\(\s?([\w_]+)\s?\(\s?((?:\$' . substr($dictionaryName, 1) . '[{\[]\d+[\]}]\s?\.?)+)\s?,\s?(\d+)\s?\),\s?((?:\d+,?)+)\);~msi', function ($match) use ($dictionaryValue, $dictionaryName) { $str = Helpers::getVarsFromDictionary( $dictionaryValue, sprintf('%s=%s', $dictionaryName, $match[3]) ); $res = ""; if (Helpers::isSafeFunc($match[2])) { $res = @$match[2]($str[$dictionaryName], $match[4]); } if (Helpers::isSafeFunc($match[1])) { $args = [$res]; $digits = explode(',', $match[5]); foreach ($digits as $digit) { $args[] = (int)$digit; } $reflectionMethod = new ReflectionFunction($match[1]); $res = $reflectionMethod->invokeArgs($args); } return "\"$res\";"; }, $result ); $strToDecode = ""; $regexFinal = str_replace("m\x61\x69n\x56\x61r", $strName, '~(?:\mainVar\s?=\s?\w+\(\s?\mainVar\s*,\s?["\'](?<concat>[\w+\/]+)[\'"]\s?\)\s?;)|(?:\mainVar\s?=\s?\w+\(\s?\mainVar\s?,\s?(?<concatFunc>\w+\(\))\)\s?;)|(?:\mainVar\s?\.?=\s?(?:\mainVar\.)?\s?["\'](?<concatStr>[\w+\/=]+)[\'"]\s?;)|(?:\mainVar\s?\.?=\s?(?<concatFuncSingle>\w+\(\))\s?;)|(\$\w+\s?=\s?new\s\w+\(\)\s?;\s?\mainVar\s?\.?=\s?\mainVar\s?\.\s?\$\w+->(?<concatFuncClass>\w+\(\)\s?))|(?:(?<func>[^,\s]\w+\(\)))~msi'); $result = preg_replace_callback( $regexFinal, function ($match) use (&$strToDecode, $funcs) { if (isset($match["c\x6f\x6ec\x61\x74"]) && $match["c\x6f\x6ec\x61\x74"] !== "") { $strToDecode .= $match["c\x6f\x6ec\x61\x74"]; return; } if (isset($match["c\x6f\x6ec\x61\x74S\x74\x72"]) && $match["c\x6f\x6ec\x61\x74S\x74\x72"] !== "") { $strToDecode .= $match["c\x6f\x6ec\x61\x74S\x74\x72"]; return; } if (isset($match["c\x6f\x6ec\x61\x74F\x75\x6ec"]) && $match["c\x6f\x6ec\x61\x74F\x75\x6ec"] !== "") { $strToDecode .= $funcs[$match["c\x6f\x6ec\x61\x74F\x75\x6ec"]]["s\x74\x72"]; return; } if (isset($match["c\x6f\x6ec\x61\x74F\x75\x6ec\x53\x69n\x67\x6ce"]) && $match["c\x6f\x6ec\x61\x74F\x75\x6ec\x53\x69n\x67\x6ce"] !== "") { $strToDecode .= $funcs[$match["c\x6f\x6ec\x61\x74F\x75\x6ec\x53\x69n\x67\x6ce"]]["s\x74\x72"]; return; } if (isset($match["c\x6f\x6ec\x61\x74F\x75\x6ec\x43\x6ca\x73\x73"]) && $match["c\x6f\x6ec\x61\x74F\x75\x6ec\x43\x6ca\x73\x73"] !== "") { $strToDecode .= $funcs[$match["c\x6f\x6ec\x61\x74F\x75\x6ec\x43\x6ca\x73\x73"]]["s\x74\x72"]; return; } if (isset($match["f\x75\x6ec"]) && $match["f\x75\x6ec"] !== "") { $strToDecode .= $funcs[$match["f\x75\x6ec"]]["s\x74\x72"]; return; } }, $result ); $code = $result; $result = base64_decode($strToDecode); if (preg_match('~((\$\w+)="";).*?((\$\w+)=create_function\(\'(\$\w+,\$\w+)\',\s?(base64_decode\(((?:"[\w+=]+"\.?)+)\))\);).*?(\$\w+\s?=\s?create_function\("",\s?\4\(base64_decode\(\2\),\s?(\$_COOKIE\[\'\w+\'\])\)\s?\);)~msi', $code, $codeMatch)) { $initialCode = base64_decode(Helpers::collectStr($codeMatch[7])); $result = sprintf("function %s(%s){%s}%s='%s';%s(%s,%s);", substr($codeMatch[4], 1), $codeMatch[5], $initialCode, $codeMatch[2], $result, substr($codeMatch[4], 1), $codeMatch[2], $codeMatch[9]); } return $result; } private function deobfuscateGlobalArrayEval($str, $i0l1i10001010000010) { $result = str_replace($i0l1i10001010000010[1], "", $str); $dictionary = stripcslashes($i0l1i10001010000010[3]); $dictionaryVar = stripcslashes($i0l1i10001010000010[2]); $dictionaryVar = str_replace('{"G\x4c\x4fB\x41\x4cS"}', "G\x4c\x4fB\x41\x4cS", $dictionaryVar); $result = Helpers::replaceVarsFromDictionary($dictionaryVar, $dictionary, $result); preg_match_all('~(\$GLOBALS\[[\'\w]+\])\s?=\s?[\'"]?([\w\-\_\$]+)["\']?;\s?~msi', $result, $varMatch); foreach ($varMatch[1] as $index => $var) { $result = str_replace([$varMatch[0][$index], $varMatch[1][$index]], ["", $varMatch[2][$index]], $result); } return $result; } private function deobfuscateTinkleShell($str, $i0l1i10001010000010) { $result = $str; $dictionaryStr = $i0l1i10001010000010[2]; $decodeKey = Helpers::getDecryptKeyForTinkleShell(strlen($str)); $vars = [ $i0l1i10001010000010[4] => $i0l1i10001010000010[5], ]; $result = str_replace(' ', '', $result); $i0l1i10001010000010[3] = str_replace(' ', '', $i0l1i10001010000010[3]); preg_match_all('~(\$\w+)=(?:\$\w+\[\'\w\'\+\d+\+\'\w\'\]\.?)+;~msi', $i0l1i10001010000010[3], $matchVars); foreach ($matchVars[0] as $index => $match) { preg_match_all('~\$\w+\[\'\w\'\+(\d+)\+\'\w\'\]\.?~msi', $match, $values); foreach ($values[1] as $value) { if (!isset($vars[$matchVars[1][$index]])) { $vars[$matchVars[1][$index]] = $dictionaryStr[$value] ?? $value; } else { $vars[$matchVars[1][$index]] .= $dictionaryStr[$value] ?? $value; } } } $result = str_replace($i0l1i10001010000010[3], "", $result); preg_match_all('~(\$\w+)=(\$\w+)\((\$\w+),(\$\w+)\(""\),"([\w\+]+)"\);~msi', $result, $matchVars); foreach ($matchVars[1] as $index => $varName) { $func = $vars[$matchVars[2][$index]] ?? $matchVars[2][$index]; $arg1 = $vars[$matchVars[3][$index]] ?? $matchVars[3][$index]; $arg2 = $vars[$matchVars[4][$index]] ?? $matchVars[4][$index]; $argStr = $matchVars[5][$index]; if (Helpers::isSafeFunc($func)) { $value = @$func($arg1, $arg2 === "t\x72\x69m" ? "" : $arg2, $argStr); $vars[$varName] = $value; } $result = str_replace($matchVars[0][$index], '', $result); } $func = $vars[$i0l1i10001010000010[10]] ?? ''; if (Helpers::isSafeFunc($func)) { $result = @$func($i0l1i10001010000010[11], $vars[$i0l1i10001010000010[12]] ?? "", $decodeKey); } $func = $vars[$i0l1i10001010000010[7]] ?? ''; if (Helpers::isSafeFunc($func)) { $result = @$func($vars[$i0l1i10001010000010[8]] ?? '', "", $result); } $func = $vars[$i0l1i10001010000010[6]] ?? ''; if (Helpers::isSafeFunc($func)) { $result = @$func($result); } return $result; } private function deobfuscateWsoFunc($str, $i0l1i10001010000010) { if (isset($i0l1i10001010000010["s\x74\x72"])) { return gzinflate(base64_decode($i0l1i10001010000010["s\x74\x72"])); } return $i0l1i10001010000010[0]; } private function deobfuscateEvalWanFunc($str, $i0l1i10001010000010) { $result = gzinflate(base64_decode($i0l1i10001010000010[5])); for ($i = 0, $iMax = strlen($result); $i < $iMax; $i++) { $result[$i] = chr(ord($result[$i]) - (int)$i0l1i10001010000010[4]); } return $result; } private function deobfuscateFuncFile($str, $i0l1i10001010000010) { return base64_decode($i0l1i10001010000010[2]); } private function deobfuscateFuncFile2($str, $i0l1i10001010000010) { $var_fragment = $i0l1i10001010000010[1]; $decoded_code = base64_decode($i0l1i10001010000010[3]); $var_name = $i0l1i10001010000010[4]; $new_fragment = "$var_name = '$decoded_code';"; return str_replace($var_fragment, $new_fragment, $str); } private function deobfuscateGulf($str, $i0l1i10001010000010) { $result = str_replace(""."", '', str_replace($i0l1i10001010000010[2], '', $i0l1i10001010000010[1])); $vars = Helpers::collectVars($i0l1i10001010000010[2], "'"); $result = Helpers::replaceVarsFromArray($vars, $result); $tempCode = gzinflate(base64_decode($i0l1i10001010000010[4])); $result .= PHP_EOL . $tempCode; return $result; } private function deobfuscateEvalConcatAsciiChars($str, $i0l1i10001010000010) { $result = ''; $i0l1i10000100011010 = (int)$i0l1i10001010000010[2]; $str = (string)$i0l1i10001010000010[3]; $len = strlen($str); for ($i = 0; $i < $len; $i++) { $result .= chr(ord($str[$i]) ^ $i0l1i10000100011010); } $result = str_replace(['<?php', '?>', '', ''], '', $result); return $result; } private function deobfuscateEvalPost($str, $i0l1i10001010000010) { $vars = Helpers::collectVars($str); $result = str_replace(".", "", $i0l1i10001010000010[8]); $result = str_replace($i0l1i10001010000010[7], "", Helpers::replaceVarsFromArray($vars, $result)); $result = base64_decode(base64_decode($result)); return $result; } private function deobfuscateEvalPregStr($str, $i0l1i10001010000010) { $result = sprintf("%s'%s'%s", stripcslashes($i0l1i10001010000010[1]), $i0l1i10001010000010[2], stripcslashes($i0l1i10001010000010[3])); $result = $this->unwrapFuncs($result); return $result; } private function deobfuscateClassDestructFunc($str, $i0l1i10001010000010) { $result = $str; $arg1 = $i0l1i10001010000010[1] ^ stripcslashes($i0l1i10001010000010[2]); $arg2 = $i0l1i10001010000010[3] ^ stripcslashes($i0l1i10001010000010[4]); if ($arg1 === "a\x73\x73e\x72\x74" && $arg2 === "e\x76\x61l") { $result = base64_decode($i0l1i10001010000010[5]); } return $result; } private function deobfuscateCreateFuncEval($str, $i0l1i10001010000010) { $result = $str; $func = stripcslashes($i0l1i10001010000010[1]); if (Helpers::isSafeFunc($func)) { $result = @$func($i0l1i10001010000010[2]); } return $result; } private function deobfuscateEvalCreateFunc($str, $i0l1i10001010000010) { $result = $str; if (!(isset($i0l1i10001010000010[4]) && $i0l1i10001010000010[4] !== '')) { $arr = [ 0 => $i0l1i10001010000010[5], 1 => $i0l1i10001010000010[6], 2 => $i0l1i10001010000010[13], ]; $func_1 = Helpers::decodeEvalCreateFunc_2($arr); if (strtoupper($func_1) === "C\x52\x45A\x54\x45_\x46\x55N\x43\x54I\x4f\x4e") { $arr[2] = $i0l1i10001010000010[10]; $result = Helpers::decodeEvalCreateFunc_2($arr); return $result; } } $arr = [ 0 => $i0l1i10001010000010[4], 1 => $i0l1i10001010000010[5], 2 => $i0l1i10001010000010[6], 3 => $i0l1i10001010000010[13], ]; $func_1 = Helpers::decodeEvalCreateFunc_1($arr); if (strtoupper($func_1) === "C\x52\x45A\x54\x45_\x46\x55N\x43\x54I\x4f\x4e") { $arr[3] = $i0l1i10001010000010[10]; $result = Helpers::decodeEvalCreateFunc_1($arr); $result = preg_replace_callback(Helpers::REGEXP_BASE64_DECODE, function ($match) { $extraCode = $this->unwrapFuncs($match[0]); if (preg_match('~if\(!function_exists\([\'"](\w+)[\'"]\)\){function\s?\1\((\$\w+)\){(\$\w+)=array\(\'([{\w\]]+)\',\'([\w`]+)\',\2\);for\((\$\w+)=0;\6<3;\6\+\+\){for\((\$\w+)=0;\7<strlen\(\3\[\6\]\);\7\+\+\)\s?\3\[\6\]\[\7\]\s?=\s?chr\(ord\(\3\[\6\]\[\7\]\)-1\);if\(\6==1\)\s?\3\[2\]=\3\[0\]\(\3\[1\]\(\3\[2\]\)\);}\s?return\s?\3\[2\];}(\$\w+)=["\']([\w\+\/=]+)["\'];(\$\w+)=[\'"]\1[\'"];(\$\w+)=\10\([\'"]([\w=]+)[\'"]\);\$\w+=\11\(\'\',\10\(\8\)\);\$\w+\(\);}~msi', $extraCode, $matchCode)) { $arr = [ 0 => $matchCode[4], 1 => $matchCode[5], 2 => $matchCode[12], ]; $func_1 = Helpers::decodeEvalCreateFunc_2($arr); if (strtoupper($func_1) === "C\x52\x45A\x54\x45_\x46\x55N\x43\x54I\x4f\x4e") { $arr[2] = $matchCode[9]; $extraCode = str_replace($matchCode[0], Helpers::decodeEvalCreateFunc_2($arr), $extraCode); } } return $extraCode; }, $result); } return $result; } private function deobfuscateEvalFuncVars($str, $i0l1i10001010000010) { $result = $str; $vars = Helpers::collectFuncVars($i0l1i10001010000010[1]); $result = Helpers::replaceVarsFromArray($vars, $i0l1i10001010000010[2]); if (strpos($result, "e\x76\x61l") !== false) { $result = $this->unwrapFuncs($result); } return $result; } private function deobfuscateDictionaryCreateFuncs($str, $i0l1i10001010000010) { $vars = Helpers::getVarsFromDictionary($i0l1i10001010000010[3], $i0l1i10001010000010[4]); $result = str_replace($i0l1i10001010000010[4], '', $str); $result = preg_replace_callback('~\${"[\\\\\w]+"}\["[\\\\\w]+"\]~msi', static function ($match) { return stripcslashes($match[0]); }, $result); $result = preg_replace_callback('~\${"G\x4c\x4fB\x41\x4cS"}\["(\w+)"\]~msi', static function ($match) use ($vars) { $varName = '$' . $match[1]; return $vars[$varName] ?? $varName; }, $result); preg_match('~(\$\w+)=create_function\(\'(\$\w+)\',\'\$\w+=substr\(\2,0,5\);\$\w+=substr\(\2,-5\);\$\w+=substr\(\2,7,strlen\(\2\)-14\);return\s*gzinflate\(base64_decode\(\$\w+\.\$\w+\.\$\w+\)\);\'\);~msi', $result, $decoderFunc); $result = str_replace($decoderFunc[0], '', $result); $decoderFunc = $decoderFunc[1]; $result = Helpers::replaceCreateFunction($result); $result = preg_replace_callback('~(\$\w+)\s*\(\'([^\']+)\'\)~msi', function($m) use ($decoderFunc) { if ($m[1] !== $decoderFunc) { return $m[0]; } return '\'' . Helpers::dictionarySampleDecode($m[2]) .'\''; }, $result); $result = Helpers::normalize($result); return $result; } private function deobfuscateEvalPostDictionary($str, $i0l1i10001010000010) { $finalCode = $i0l1i10001010000010[19]; $result = str_replace($finalCode, '', $str); $arrayNum = []; $arrayStr = []; $regex = '~"?([\w\.\/\s]+)"?,?\s?~msi'; preg_match_all($regex, $i0l1i10001010000010[6], $arrayStrMatches); foreach ($arrayStrMatches[1] as $arrayStrMatch) { $arrayStr[] = $arrayStrMatch; } $result = Helpers::replaceVarsFromDictionary($i0l1i10001010000010[5], $arrayStr, $result); $vars = Helpers::collectVars($result, "'"); $regexSpecialVars = '~(\$\w+)([()\]])~msi'; $code1 = preg_replace_callback($regexSpecialVars, static function ($match) use ($vars) { $res = $vars[$match[1]] ?? $match[1]; if ($match[2] === ']' || $match[2] === ')') { $res = "'$res'"; } return $res . $match[2]; }, $i0l1i10001010000010[20]); $code2 = str_replace($i0l1i10001010000010[18], '$_POST[\'' . ($vars[$i0l1i10001010000010[18]] ?? $i0l1i10001010000010[18]) . '\']', $i0l1i10001010000010[21]); $code2 = Helpers::replaceVarsFromArray($vars, $code2); $tempStr = Helpers::replaceVarsFromDictionary($i0l1i10001010000010[5], $arrayStr, $i0l1i10001010000010[22]); $vars = Helpers::collectVars($tempStr, "'"); $code3 = preg_replace_callback($regexSpecialVars, static function ($match) use ($vars) { $res = $vars[$match[1]] ?? $match[1]; if ($match[2] === ']' || $match[2] === ')') { $res = "'$res'"; } return $res . $match[2]; }, $i0l1i10001010000010[23]); $result = $code1 . $code2 . $code3; return $result; } private function deobfuscateDropInclude($str, $i0l1i10001010000010) { $i0l1i10000100010000 = basename($i0l1i10001010000010[2]); $i0l1i10000110001000ypted = base64_decode(base64_decode($i0l1i10001010000010[4])); return $this->deobfuscateXorFName($i0l1i10000110001000ypted, null, $i0l1i10000100010000); } private function deobfuscateEvalComments($str, $i0l1i10001010000010) { return preg_replace('~/\*[^/]*/?\*/~msi', '', $str); } private function deobfuscateStrrevUrldecodeEval($str, $i0l1i10001010000010) { return strrev(urldecode($i0l1i10001010000010[2])); } private function deobfuscateEvalPackStrrot($str, $i0l1i10001010000010) { return pack("H*", str_rot13($i0l1i10001010000010[3])); } private function deobfuscateUrlDecodeTable($str, $i0l1i10001010000010) { $i0l1i10001010000010[3] = str_replace([" ", "\r", "\n", "\t", "".""], '', $i0l1i10001010000010[3]); $i0l1i10001010000010[5] = str_replace([" ", "'", ">"], '', $i0l1i10001010000010[5]); $temp = explode(',', $i0l1i10001010000010[5]); $array = []; foreach ($temp as $value) { $temp = explode("=", $value); $array[$temp[0]] = $temp[1]; } $res = ''; for ($i=0, $iMax = strlen($i0l1i10001010000010[3]); $i < $iMax; $i++) { $res .= isset($array[$i0l1i10001010000010[3][$i]]) ? $array[$i0l1i10001010000010[3][$i]] : $i0l1i10001010000010[3][$i]; } $res = substr(rawurldecode($res), 1, -2); return $res; } private function deobfuscateEvalVarChar($str, $i0l1i10001010000010) { $chars = Helpers::collectVarsChars($i0l1i10001010000010[1]); $vars = Helpers::assembleStrings($chars, $i0l1i10001010000010[2]); $str = str_replace($i0l1i10001010000010[1], '', $str); $str = str_replace($i0l1i10001010000010[2], '', $str); foreach ($vars as $var => $func) { $str = str_replace($var, $func, $str); } return $str; } private function deobfuscateEvalVarFunc($str, $i0l1i10001010000010) { $var = Helpers::collectFuncVars($i0l1i10001010000010[1]); return $var[$i0l1i10001010000010[4]]; } private function deobfuscateEvalVarsFuncs($str, $i0l1i10001010000010) { $vars = Helpers::collectVars($i0l1i10001010000010[1]); $vars[$i0l1i10001010000010[5]] = $i0l1i10001010000010[2]; $res = Helpers::replaceVarsFromArray($vars, $i0l1i10001010000010[3]); return $res; } private function deobfuscateEvalFileContent($str, $i0l1i10001010000010) { $res = $i0l1i10001010000010[4]; $vars = Helpers::getVarsFromDictionary($i0l1i10001010000010[2], $i0l1i10001010000010[3]); $vars[$i0l1i10001010000010[1]] = $i0l1i10001010000010[2]; $res = Helpers::replaceVarsFromArray($vars, $res); if (preg_match('~\$[^=]{0,50}=file\(str_replace\(\'\\\\{2}\',\'/\',__FILE__\)\);(\$[^=]{0,50})=array_pop\(\$[^)]{0,50}\);(\$[^=]{0,50})=array_pop\(\$[^)]{0,50}\);\$[^=]{0,50}=implode\(\'\',\$[^)]{0,50}\)\.substr\(\$[^,]{0,50},0,strrpos\(\$[^,]{0,50},\'@ev\'\)\);\$[^=]{0,50}=md5\(\$[^)]{0,50}\);(?:\$[^=]{0,50}=){0,3}NULL;@eval\(base64_decode\(str_replace\(\$[^,]{0,50},\'\',strtr\(\'~msi', $res, $match)) { $arr = explode(PHP_EOL, $str); foreach ($arr as $index => $val) { if ($index !== count($arr) - 1) { $arr[$index] .= PHP_EOL; } } $arr1 = array_pop($arr); $arr2 = array_pop($arr); $vars[$match[1]] = $arr1; $vars[$match[2]] = $arr2; $res = implode('', $arr) . substr($arr2, 0, strrpos($arr2, '@ev')); $md5 = md5($res); $res = base64_decode(str_replace($md5, '', strtr($i0l1i10001010000010[5], $i0l1i10001010000010[6], $i0l1i10001010000010[7]))); if (preg_match('~eval\((?:\$[^(]{0,50}\(){2}\$[^,]{0,50},\s{0,10}\'([^\']{1,500})\',\s{0,10}\'([^\']{1,500})\'\){3};~msi', $res, $match)) { $res = Helpers::replaceVarsFromArray($vars, $res); if (preg_match('~eval\(base64_decode\(strtr\(~msi', $res)) { $res = base64_decode(strtr($arr1, $match[1], $match[2])); $res = '<?php ' . PHP_EOL . $res; } } } return $res; } private function deobfuscateEvalArrayVar($str, $i0l1i10001010000010) { $result = $str; $array1 = str_split($i0l1i10001010000010[2]); $array2 = []; $arrayStr = base64_decode($i0l1i10001010000010[1]); if (preg_match('~(\$\w+)=\[(["\'][\w\[\];\'"|,.{}+=/&][\'"]=>["\'][\w\[\];\'"|,.{}+=/&][\'"],?\s{0,50})+\];~msi', $arrayStr, $match)) { preg_match_all('~["\']([\w\[\];\'"|,.{}+=/&])[\'"]=>["\']([\w\[\];\'"|,.{}+=/&])[\'"]~msi', $match[0], $arrayMatches); foreach ($arrayMatches[1] as $index => $arrayMatch) { $array2[$arrayMatches[1][$index]] = $arrayMatches[2][$index]; } $newStr = ""; foreach ($array1 as $xx) { foreach ($array2 as $main => $val) { if ($xx == (string)$val) { $newStr .= $main; break; } } } $result = gzinflate(base64_decode($newStr)); } return $result; } private function deobfuscateEvalConcatedVars($str, $i0l1i10001010000010) { $iter = [2 => $i0l1i10001010000010[2], 4 => $i0l1i10001010000010[4], 6 => $i0l1i10001010000010[6], 12 => $i0l1i10001010000010[12]]; foreach ($iter as $index => $item) { $i0l1i10001010000010[$index] = preg_replace_callback('~chr\((\d+)\)~msi', static function ($match) use (&$i0l1i10001010000010) { return '\'' . chr($match[1]) . '\''; }, $i0l1i10001010000010[$index]); $i0l1i10001010000010[$index] = Helpers::concatStr($i0l1i10001010000010[$index]); $i0l1i10001010000010[$index] = base64_decode($i0l1i10001010000010[$index]); } $result = str_replace([$i0l1i10001010000010[1], $i0l1i10001010000010[8], $i0l1i10001010000010[10]], [$i0l1i10001010000010[2], 0, 0], $i0l1i10001010000010[7]); if (Helpers::isSafeFunc($i0l1i10001010000010[4])) { $code = @$i0l1i10001010000010[4]($i0l1i10001010000010[6]); $code = gzinflate(str_rot13($code)); } else { $code = 'gzinflate(str_rot13(\'' . $i0l1i10001010000010[4] . '\')));'; } $result .= $i0l1i10001010000010[12] . $code; return $result; } private function deobfuscateEchoEscapedStr($str, $i0l1i10001010000010) { $i = 1; $result = $i0l1i10001010000010[1]; $result = str_replace('\\\\\\', '\\\\', $result); while ($i < 3) { if (!preg_match('~(\\\\x[0-9a-f]{2,3})~msi', $result)) { break; } $result = preg_replace_callback('~(\\\\x[0-9a-f]{2,3})~msi', static function ($m) { return stripcslashes($m[1]); }, $result); $i++; } $result = stripslashes($result); $vars = Helpers::collectVars($result); $result = preg_replace_callback('~(?<!{)\${[\'"]GLOBALS[\'"]}\[[\'"](\w+)[\'"]\]=[\'"](\w+)[\'"];~msi', function ($m) use (&$vars) { $vars['$' . $m[1]] = $m[2]; return ''; }, $result); $result = Helpers::replaceVarsFromArray($vars, $result); foreach ($vars as $name => $val) { $result = str_replace("$val=\"$val\";", '', $result); } return $result; } public function deobfuscateFilePutDecodedContents($str, $i0l1i10001010000010) { $res = $str; $i0l1i10000111110110 = base64_decode($i0l1i10001010000010[2]); $res = str_replace($i0l1i10001010000010[1], $i0l1i10000111110110, $res); $res = preg_replace_callback('~chr\((\d+)\)~msi', static function ($match) use (&$i0l1i10001010000010) { return '\'' . chr($match[1]) . '\''; }, $res); $res = Helpers::concatStringsInContent($res); $res = Helpers::replaceBase64Decode($res, '\''); $vars = Helpers::collectVars($res); $res = Helpers::replaceVarsFromArray($vars, $res); $res = Helpers::removeDuplicatedStrVars($res); return $res; } public function deobfuscatePregReplaceStr($str, $i0l1i10001010000010) { return stripcslashes($i0l1i10001010000010[1]); } public function deobfuscateEvalImplodedArrStr($str, $i0l1i10001010000010) { $split = str_split(stripcslashes($i0l1i10001010000010[2])); $map = array_map(static function($str) { return chr(ord($str) - 1); }, $split); return implode($map); } public function deobfuscatePregReplaceCodeContent($str, $i0l1i10001010000010) { $func = stripcslashes($i0l1i10001010000010[5]); $res = $i0l1i10001010000010[2]; if (preg_match('~eval\(preg_replace\([\'"]/([^/])/[\'"],\s?[\'"](.*?)[\'"],\s?(\$\w+)\)\);~msi', $func, $match)) { if ($match[3] === $i0l1i10001010000010[1]) { $res = str_replace($match[1], stripcslashes($match[2]), $res); } } $vars = []; $res = preg_replace_callback('~(\$\w+)\s?=\s?([\'"])(.*?)\2;~msi', static function ($m) use (&$vars) { $value = $m[3]; if ($m[2] === '"') { $value = stripcslashes($value); } $vars[$m[1]] = $value; return sprintf('%s=\'%s\';', $m[1], $value); }, $res); $arrayVar = []; $arrayVarName = ''; if (preg_match('~(\$\w+)\s?=\s?array\((?:\'[^\']+\',?)+\);~msi', $res, $m)) { $arrayVarName = $m[1]; preg_match_all('~\'([^\']+)\',?~msi', $m[0], $arrMatch, PREG_PATTERN_ORDER); if (isset($arrMatch[1])) { foreach ($arrMatch[1] as $arr) { $arrayVar[] = $arr; } } } if (preg_match('~(\$\w+)\((\$\w+),\s?(\$\w+)\s?\.\s?\'\(((?:["\']\w+[\'"],?)+)\)[\'"]\s?\.\s?(\$\w+),\s?null\);~msi', $res, $match)) { $arrayVar2 = []; preg_match_all('~[\'"](\w+)[\'"],?~msi', $match[4], $arrMatch2, PREG_PATTERN_ORDER); if (isset($arrMatch2[1])) { foreach ($arrMatch2[1] as $arr) { $arrayVar2[] = $arr; } } if (isset($vars[$match[5]]) && (preg_match('~,\s?(\$\w+),\s?(\$\w+)\)\);~msi', $vars[$match[5]], $m) && $m[1] === $arrayVarName && isset($vars[$m[2]]) )) { $res = str_replace($arrayVar2, $arrayVar, $vars[$m[2]]); } } return $res; } public function deobfuscateSistemitComEnc($str, $i0l1i10001010000010) { $res = gzinflate(base64_decode($i0l1i10001010000010[2])); preg_match_all('~\$\w+\s*=\s*\[((\'[^\']+\',?)+)~msi', $i0l1i10001010000010[4], $replace, PREG_SET_ORDER); $find = explode("','", substr($replace[0][1], 1, -1)); $replace = explode("','", substr($replace[1][1], 1, -1)); $res = str_replace($find, $replace, $res); return $res; } public function deobfuscateConcatVarsReplaceEval($str, $i0l1i10001010000010) { $res = Helpers::concatVariableValues($i0l1i10001010000010[1]); $res = str_replace($i0l1i10001010000010[5], '', $res); $res = base64_decode($res); return $res; } public function deobfuscateEvalVarFunc2($str, $i0l1i10001010000010) { return $this->unwrapFuncs($i0l1i10001010000010[6]); } public function deobfuscateEvalArrays($str, $i0l1i10001010000010) { $res = str_replace('\'\'', '@@empty@@', $str); $vars = explode('", "', substr($i0l1i10001010000010[10], 1, -1)); $res = preg_replace_callback('~(\$\w+)\[(\d+)\]\s*\.?\s*~msi', static function($m) use ($vars, $i0l1i10001010000010) { if ($m[1] !== $i0l1i10001010000010[9]) { return $m[0]; } return "'" . $vars[(int)$m[2]] . "'"; }, $res); $res = str_replace(['\'\'', '@@empty@@', $i0l1i10001010000010[8]], ['', '\'\'', ''], $res); preg_match_all('~(\$\w+)\s*=\s*\'([^\']+)\';~msi', $res, $m, PREG_SET_ORDER); $vars = []; foreach ($m as $var) { $vars[$var[1]] = '\'' . $var[2] . '\''; $res = str_replace($var[0], '', $res); } $res = Helpers::replaceVarsFromArray($vars, $res); return $res; } public function deobfuscatePregReplaceVar($str, $i0l1i10001010000010) { $result = stripcslashes($i0l1i10001010000010[2]); $regex = stripcslashes($i0l1i10001010000010[1]); if ($regex === '.*') { return $result; } $result = preg_replace_callback($regex, static function ($m) { return ''; }, $result); return $result; } public function deobfuscateEvalBinHexVar($str, $i0l1i10001010000010) { $func1 = stripcslashes($i0l1i10001010000010[2]); $func2 = stripcslashes($i0l1i10001010000010[4]); $result = ''; if (Helpers::isSafeFunc($func2) && Helpers::isSafeFunc($func1)) { $result = '?>' . @$func1(@$func2($i0l1i10001010000010[6])); } else { $result = sprintf("'?>'.%s(%s('%s');", $func1, $func2, $i0l1i10001010000010[6]); } return $result; } public function deobfuscateEvalFuncTwoArgs($str, $i0l1i10001010000010) { $arg1 = base64_decode($i0l1i10001010000010[5]); $arg2 = $i0l1i10001010000010[6]; $result = ""; for ($o = 0, $oMax = strlen($arg1); $o < $oMax;) { for ($u = 0, $uMax = strlen($arg2); $u < $uMax; $u++, $o++) { $result .= $arg1[$o] ^ $arg2[$u]; } } return $result; } public function deobfuscateEvalVarReplace($str, $i0l1i10001010000010) { $res = $i0l1i10001010000010[3]; $replaces = explode(';', $i0l1i10001010000010[4]); foreach ($replaces as $replace) { if (preg_match('~(\$\w+)=str_replace\(\'([^\']+)\',\s*\'(\w)\',\s*\1\);~msi', $replace, $m)) { $res = str_replace($m[2], $m[3], $res); } } $res = base64_decode($res); return $res; } public function deobfuscateEvalPregReplaceFuncs($str, $i0l1i10001010000010) { $func1Str = preg_replace("/" . $i0l1i10001010000010[3] . "/", "", $i0l1i10001010000010[2]); $func2Str = preg_replace("/" . $i0l1i10001010000010[6] . "/", "", $i0l1i10001010000010[5]); $strToDecode = ''; preg_match_all('~[\'"]([^\'"]+)[\'"],?~msi', $i0l1i10001010000010[8], $strMatches, PREG_SET_ORDER); foreach ($strMatches as $index => $strMatch) { if ($index > 0) { $strToDecode .= PHP_EOL; } $strToDecode .= $strMatch[1]; } $result = @$func2Str($strToDecode); if (preg_match('~eval\(\$\w+\);~msi', $func1Str) && Helpers::isSafeFunc($func2Str)) { $result = @$func2Str($strToDecode); $result = stripcslashes($result); $vars = Helpers::collectVars($result); if (preg_match('~\$\w+=\$\w+\([\'"]\([\'"],__FILE.*?(?:\$\w+\(){3}[\'"][^\'"]+[\'"]\)\)\)\);~msi', $result, $m)) { $result = $m[0]; } $result = Helpers::replaceVarsFromArray($vars, $result); $result = preg_replace_callback('~gzinflate\(base64_decode\(str_rot13\(["\']([^\'"]+)[\'"]\)\)\)~msi', function ($m) { return gzinflate(base64_decode(str_rot13($m[1]))); }, $result); } return $result; } public function deobfuscateEvalVarSlashed($str, $i0l1i10001010000010) { $vars = Helpers::collectVars($i0l1i10001010000010[1]); $result = Helpers::replaceVarsFromArray($vars, $i0l1i10001010000010[2]); $result = $this->unwrapFuncs($result); return $result; } public function deobfuscateUrlMd5Passwd($str, $i0l1i10001010000010) { while(preg_match('~((?:(\$\w+)=\'[^;]+\';)+)~mis', $str, $i0l1i100010100000102)) { $vars = Helpers::collectVars($i0l1i100010100000102[1], "'"); $str = Helpers::replaceVarsFromArray($vars, $str, true); $str = preg_replace_callback('~str_rot13\(urldecode\(\'([%\da-f]+)\'\)\)~mis', static function($m) { return "'" . str_rot13(urldecode($m[1])) . "'"; }, $str); $str = str_replace($i0l1i100010100000102[0], '', $str); } return $str; } public function deobfuscateBlackScorpShell($str, $i0l1i10001010000010) { $vars = Helpers::collectVars($i0l1i10001010000010[2], "'"); $vars2 = Helpers::collectVars($i0l1i10001010000010[3], "'"); array_walk($vars2, static function(&$var) { $var = "'$var'"; }); $str = gzinflate(base64_decode($vars2[$i0l1i10001010000010[5]])); $str = Helpers::replaceVarsFromArray($vars, $str, true); $str = Helpers::replaceVarsFromArray($vars2, $str); $str = str_ireplace("a\x73\x73e\x72\x74", "e\x76\x61l", $str); return $str; } public function deobfuscateManyDictionaryVars($str, $i0l1i10001010000010) { $vars = Helpers::collectVars($i0l1i10001010000010[1], "'"); $result = $i0l1i10001010000010[2]; foreach ($vars as $dictName => $dictVal) { $result = preg_replace_callback( '~(\$\w+)[\[{][\'"]?(\d+)[\'"]?[\]}]~msi', static function ($m) use ($dictVal, $dictName) { if ($m[1] !== $dictName) { return $m[0]; } return "'" . $dictVal[(int)$m[2]] . "'"; }, $result ); } $result = Helpers::replaceVarsFromArray($vars, $result, true, true); $result = preg_replace_callback('~(\.?)\s?[\'"]([\w=\+/()\$,;:"\s?\[\]]+)[\'"]\s?~msi', static function ($m) { return $m[2]; }, $result); return $result; } public function deobfuscateEvalBuffer($str, $i0l1i10001010000010) { $result = $i0l1i10001010000010[4]; preg_match_all('~"([^"]+)"~msi', $i0l1i10001010000010[2], $arrMatches, PREG_SET_ORDER); $array = []; foreach ($arrMatches as $arrMatch) { $array[] = stripcslashes($arrMatch[1]); } $result = str_replace($array, '', $result); $result = gzinflate(base64_decode($result)); return $result; } public function deobfuscateEvalArrayWalkFunc($str, $i0l1i10001010000010) { $result = stripcslashes($i0l1i10001010000010[1]) . '?>' . PHP_EOL; $encodedStr = ''; preg_match_all('~(?:[\'"]([^\'"]{1,500})[\'"])~msi', $i0l1i10001010000010[2], $arrayMatches, PREG_SET_ORDER); foreach ($arrayMatches as $arrayMatch) { $encodedStr .= stripcslashes($arrayMatch[1]); } $result .= base64_decode(str_rot13($encodedStr)); return $result; } public function deobfuscateEvalDictionaryVars($str, $i0l1i10001010000010) { $result = $str; $vars = Helpers::collectVars($i0l1i10001010000010[1]); $vars[$i0l1i10001010000010[2]] = $i0l1i10001010000010[3]; $vars = Helpers::getVarsFromDictionaryDynamically($vars, $i0l1i10001010000010[1]); $func = $vars[$i0l1i10001010000010[5]] ?? null; if ($func && Helpers::isSafeFunc($func)) { $result = @$func($i0l1i10001010000010[6]); } $result = Helpers::replaceVarsFromArray($vars, $result); return $result; } public function deobfuscateEvalSubstrVal($str, $i0l1i10001010000010) { $result = strtr( substr($i0l1i10001010000010[2], (int)$i0l1i10001010000010[3] * (int)$i0l1i10001010000010[4]), substr($i0l1i10001010000010[2], (int)$i0l1i10001010000010[5], (int)$i0l1i10001010000010[6]), substr($i0l1i10001010000010[2], (int)$i0l1i10001010000010[7], (int)$i0l1i10001010000010[8]) ); return '?> ' . base64_decode($result); } public function deobfuscateEvalFuncXored($str, $i0l1i10001010000010) { $vars = Helpers::collectFuncVars($str); $result = Helpers::replaceVarsFromArray($vars, $str); if (preg_match('~\$\w+\s?=\s?gzinflate\(base64_decode\(.*?strlen.*?chr\(\(ord.*?\^~msi', $result)) { $encodedStr = gzinflate(base64_decode($i0l1i10001010000010[1])); $len = strlen($encodedStr); $result = ''; for ($i = 0; $i < $len; $i++) { $result .= chr((ord($encodedStr[$i]) ^ (int)$i0l1i10001010000010[3])); } } return $result; } public function deobfuscateEvalFileContentOffset($str, $i0l1i10001010000010) { $result = $i0l1i10001010000010[1]; $encodedStr = substr($str, (int)$i0l1i10001010000010[3]); $result = str_replace($i0l1i10001010000010[2], "'$encodedStr'", $result); return '<?php ' . $this->unwrapFuncs($result); } public function deobfuscateEvalFuncExplodedContent($str, $i0l1i10001010000010) { $decodedStr = trim(trim($i0l1i10001010000010[7], ";"), '"'); $strMD5 = md5($i0l1i10001010000010[1]); $result = base64_decode( str_replace($strMD5, '', strtr($decodedStr . $i0l1i10001010000010[4], $i0l1i10001010000010[5], $i0l1i10001010000010[6])) ); return $result; } public function deobfuscateEvalEncryptedVars($str, $i0l1i10001010000010) { $vars_str = preg_replace_callback('~(\d{1,10}\.\d{1,10})\s?\*\s?(\d{1,10})~msi', static function ($m) { $res = (double)($m[1]) * (int)$m[2]; return "'$res'"; }, $i0l1i10001010000010[1]); $vars_str = str_replace('"', "'", Helpers::normalize($vars_str)); $vars = Helpers::collectVars($vars_str, "'"); $vars_str = Helpers::replaceVarsFromArray($vars, $vars_str); $vars = Helpers::collectFuncVars($vars_str, $vars); $vars_str = Helpers::removeDuplicatedStrVars($vars_str); if ($a = preg_match('~(\$\w{1,50})=openssl_decrypt\(base64_decode\([\'"]([^\'"]+)[\'"]\),\'AES-256-CBC\',substr\(hash\(\'SHA256\',[\'"]([^\'"]+)[\'"],true\),0,32\),OPENSSL_RAW_DATA,([^\)]{0,50})\);~msi', $vars_str, $varMatch)) { $vars[$varMatch[1]] = openssl_decrypt(base64_decode($varMatch[2]), 'AES-256-CBC', substr(hash("S\x48\x412\x35\x36", $varMatch[3], true), 0, 32), OPENSSL_RAW_DATA, $varMatch[4]); } $result = Helpers::replaceVarsFromArray($vars, str_replace(' ', '', $i0l1i10001010000010[7])); $result = str_replace($i0l1i10001010000010[4], str_replace($i0l1i10001010000010[5], '', "'$i0l1i10001010000010[6]'"), $result); return $this->unwrapFuncs($result); } public function deobfuscateEvalLoveHateFuncs($str, $i0l1i10001010000010) { $result = $i0l1i10001010000010[7]; $result .= gzinflate(base64_decode($i0l1i10001010000010[4])); $finalPHPCode = null; $problems = explode(".", gzinflate(base64_decode($i0l1i10001010000010[2]))); for ($mistake = 0, $mistakeMax = count($problems); $mistake < $mistakeMax; $mistake += strlen($i0l1i10001010000010[6])) { for ($hug = 0, $hugMax = strlen($i0l1i10001010000010[6]); $hug < $hugMax; $hug++) { $past = (int)$problems[$mistake + $hug]; $present = (int)ord(substr($i0l1i10001010000010[6], $hug, 1)); $sweet = $past - $present; $finalPHPCode .= chr($sweet); } } $finalPHPCode = gzinflate(base64_decode($finalPHPCode)); $result .= PHP_EOL . $finalPHPCode; return $result; } public function deobfuscateXoredKey($str, $i0l1i10001010000010) { $i0l1i10000110001000ypted = base64_decode($i0l1i10001010000010[4]); $i0l1i10000100010000 = $i0l1i10001010000010[7]; $res = Helpers::xorWithKey($i0l1i10000110001000ypted, $i0l1i10000100010000); $res = base64_decode($res); return $res; } public function deobfuscateEvalGzB64($str, $i0l1i10001010000010) { $res = ''; preg_match_all('~eval\(\$\w+\(\$\w+\(\'([^\']+)\'\)+;~msi', $str, $m, PREG_SET_ORDER); foreach ($m as $match) { $res .= gzuncompress(base64_decode($match[1])) . "\n"; } return $res; } public function deobfuscateEvalArrayB64($str, $i0l1i10001010000010) { if (preg_match('~function\s*(_\d+)\((\$\w+)\)\s*{(\$\w+)=Array\(\'([^)]+)\'\);return\s*base64_decode\(\3\[\2\]\);~msi', $str, $found)) { $strlist = explode("','", $found[4]); $res = preg_replace_callback( '|(\w+)\((\d+)\)|smi', function ($m) use ($strlist, $found) { if ($m[1] !== $found[1]) { return $m[0]; } return "'" . addcslashes(base64_decode($strlist[$m[2]]), '\\\'') . "'"; }, $str ); $res = str_replace($i0l1i10001010000010[1], '', $res); return $res; } } public function deobfuscateManyBase64DecodeContent($str) { return Helpers::replaceBase64Decode($str, "'"); } public function deobfuscateEvalEscapedCharsContent($str, $i0l1i10001010000010) { $res = $i0l1i10001010000010[2] . "'" . stripcslashes($i0l1i10001010000010[1]) . "')"; return $this->unwrapFuncs($res); } public function deobfuscateEvalFuncBinary($str, $i0l1i10001010000010) { $binaryVals = hex2bin($i0l1i10001010000010[2]); $res = Helpers::decodeEvalFuncBinary($binaryVals); return $res; } public function deobfuscateEvalPackFuncs($str, $i0l1i10001010000010) { return stripcslashes($i0l1i10001010000010[3]) . $i0l1i10001010000010[4]; } public function deobfuscateParseStrFunc($str, $i0l1i10001010000010) { parse_str(Helpers::concatStr($i0l1i10001010000010[1]), $vars); $res = Helpers::replaceVarsByArrayName($i0l1i10001010000010[2], $vars, $i0l1i10001010000010[4]); $res = $this->unwrapFuncs($res . $i0l1i10001010000010[5] . ')'); return $res; } public function deobfuscateEvalGzinflate($str, $match) { $res = stripcslashes($match[2]); $res = str_replace('"."', '', $res); return 'eval(' . $res . ');'; } public function deobfuscateFuncVars($str, $i0l1i10001010000010) { $i0l1i10000100010000 = $i0l1i10001010000010[3]; $res = $i0l1i10001010000010[7]; $vars = [$i0l1i10001010000010[4] => preg_replace($i0l1i10001010000010[5], "", $i0l1i10001010000010[6])]; preg_match_all('~(\$\w{1,50})\s?=\s?(?:(\$\w{1,50})\(\)\s?\.\s?)?\w{1,50}\(\\' . $i0l1i10001010000010[4] .'\(("[^"]+")\)\);~msi', $str, $match, PREG_SET_ORDER); foreach ($match as $matchVar) { $value = Helpers::decodeFuncVars($i0l1i10000100010000,$this->unwrapFuncs($vars[$i0l1i10001010000010[4]] . '(' . $matchVar[3] . ')')); if ($matchVar[2] !== '') { $func = $vars[$matchVar[2]] ?? $matchVar[2]; $value = $func . '() . \'' . $value . '\''; } $vars[$matchVar[1]] = $value; } foreach ($vars as $name => $val) { $res = str_replace($name, $val, $res); } return $res; } public function deobfuscateDictVars($str, $match) { $res = Helpers::replaceVarsFromDictionary($match[1], $match[2], $match[3]); $res = gzinflate(base64_decode(substr($res, 2, -3))); return $res; } public function deobfuscateGotoStrRot13Vars($str, $i0l1i10001010000010) { if (isset($i0l1i10001010000010[2])) { $vars = Helpers::collectVars($str); preg_match_all('~(\$\w{1,50})\s?=\s?str_rot13\(\1\);~msi', $str, $match, PREG_SET_ORDER); foreach ($match as $m) { if (isset($vars[$m[1]])) { $vars[$m[1]] = str_rot13($vars[$m[1]]); } } preg_match_all('~(\$\w{1,50})~msi', $i0l1i10001010000010[2], $match, PREG_SET_ORDER); $strToDecode = ''; foreach ($match as $var) { if (isset($vars[$var[1]])) { $strToDecode .= $vars[$var[1]]; } } return base64_decode($strToDecode); } return $str; } public function deobfuscateDecodedDoubleStrSet($str, $i0l1i10001010000010) { $strToDecode1 = ''; $strToDecode2 = ''; preg_match_all('~"([^"]+)"~msi', $i0l1i10001010000010[1], $match, PREG_SET_ORDER); foreach ($match as $m) { $strToDecode2 .= $m[1]; } preg_match_all('~\'([^\']+)\'~msi', $i0l1i10001010000010[2], $match, PREG_SET_ORDER); foreach ($match as $m) { $strToDecode1 .= $m[1]; } return base64_decode($strToDecode1) . PHP_EOL . base64_decode($strToDecode2); } public function deobfuscateCreateFuncStrrev($str, $i0l1i10001010000010) { $res = preg_replace_callback('~strrev\("([^"]+)"\)~msi', static function ($m) { return '"' . strrev($m[1]) . '"'; }, $i0l1i10001010000010[3]); $res = Helpers::concatStringsInContent($res); $vars = Helpers::collectVars($res); $res = Helpers::replaceVarsFromArray($vars, $res); $res = Helpers::removeDuplicatedStrVars($res); if (preg_match('~\$\w+=base64_decode\([\'"][^\'"]+[\'"]\);\$\w+=create_function\(\'\$\w+\',\$\w+\);\$\w+\(\$\w+\);~msi', $res)) { $funcs = base64_decode($i0l1i10001010000010[5]); $res = str_replace($i0l1i10001010000010[1], '\'' . $i0l1i10001010000010[2] . '\'', $funcs); } return $res; } public function deobfuscateStrrevBase64($str, $i0l1i10001010000010) { return strrev($i0l1i10001010000010[2]); } public function deobfuscateCustomDecode($str, $i0l1i10001010000010) { return str_rot13($i0l1i10001010000010[2] . $i0l1i10001010000010[6]); } public function deobfuscateExpDoorCode($str, $i0l1i10001010000010) { $str = str_replace( [ $i0l1i10001010000010[1], $i0l1i10001010000010[3] ], [ str_replace(['"."', "".""], '', $i0l1i10001010000010[1]), "'" . addcslashes(base64_decode($i0l1i10001010000010[4]), "'") . "'" ], $str ); return $str; } public function deobfuscateAgustus1945($str, $i0l1i10001010000010) { return str_replace($i0l1i10001010000010[1], $i0l1i10001010000010[4] . '"' . $i0l1i10001010000010[7] . '"' . $i0l1i10001010000010[5], $str); } public function deobfuscateIncludeB64($str, $i0l1i10001010000010) { return str_replace($i0l1i10001010000010[1], "'" . base64_decode($i0l1i10001010000010[2]) . "'", $str); } public function deobfuscateDecodeFileContent($str, $i0l1i10001010000010) { return gzuncompress(base64_decode($i0l1i10001010000010[3])); } public function deobfuscateBase64decodedFuncContents($str, $i0l1i10001010000010) { $vars = Helpers::collectVars($i0l1i10001010000010[2]); $res = str_replace($i0l1i10001010000010[2], '', $str); $res = Helpers::replaceVarsFromArray($vars, $res); return Helpers::replaceBase64Decode($res, '\''); } public function deobfuscateEvalVarWithComment($str, $i0l1i10001010000010) { $res = str_replace($i0l1i10001010000010[3], '', $i0l1i10001010000010[2]); $vars = Helpers::collectVars($i0l1i10001010000010[1]); $res = Helpers::replaceVarsFromArray($vars, $res); return '?> ' . $this->unwrapFuncs($res); } public function deobfuscateEvalPackPreg($str, $i0l1i10001010000010) { $varsStr = Helpers::replaceVarsFromDictionary($i0l1i10001010000010[1], $i0l1i10001010000010[2], $i0l1i10001010000010[3]); $vars = Helpers::collectVars($varsStr, "'"); if (isset($vars[$i0l1i10001010000010[6]]) && Helpers::isSafeFunc($vars[$i0l1i10001010000010[6]])) { $strToDecode = @$vars[$i0l1i10001010000010[6]]($i0l1i10001010000010[2]); $strToDecode = preg_replace('~[' . $i0l1i10001010000010[5] . ']~i', '', $strToDecode); $strToDecode = pack('H*', $strToDecode); return $strToDecode; } return $str; } function deobfuscateNib2xeh($str, $i0l1i10001010000010) { $i0l1i10001010000010[3] = str_replace("'", '', $i0l1i10001010000010[3]); $i0l1i10001010000010[5] = str_replace("'", '', $i0l1i10001010000010[5]); $i0l1i10001010000010[7] = str_replace("'", '', $i0l1i10001010000010[7]); $replace_from = explode(',', $i0l1i10001010000010[5]); $replace_from[] = ','; $replace_to = explode(',', $i0l1i10001010000010[7]); $replace_to[] = ''; $hex = str_replace($replace_from, $replace_to, $i0l1i10001010000010[3]); return hex2bin($hex); } function deobfuscateFun256($str, $i0l1i10001010000010) { $need_encode_twice = !isset($i0l1i10001010000010[4]); $replace = $need_encode_twice ? $str : $i0l1i10001010000010[1]; $code = $need_encode_twice ? $i0l1i10001010000010[3] : $i0l1i10001010000010[4]; $chr = ''; for ($i = 0; $i < 120; $i++) { $chr .= chr($i); } $encoded = gzinflate(gzinflate(base64_decode($code))); if ($need_encode_twice) { $encoded = gzinflate(gzinflate(base64_decode($encoded))); } $encoded_len = strlen ($encoded); $hash = sha1(hash("s\x68\x612\x35\x36", md5($chr))); $hash_len = strlen($hash); $result = ''; for ($i = 0; $i < $encoded_len; $i += 2) { $char = hexdec(base_convert(strrev(substr($encoded, $i, 2)), 36, 16)); if ($j === $hash_len) { $j = 0; } $delta = ord($hash[$j]); $j++; $result .= chr ($char - $delta); } $result = str_replace($replace, $result, $str); return $result; } private function deobfuscateCreateFuncObf($str, $i0l1i10001010000010) { $str = Helpers::replaceBase64Decode($i0l1i10001010000010[7], '\''); $str = preg_replace_callback('~str_rot13\(\'([^\']+)\'\)~msi', static function($m) { return '\'' . str_rot13($m[1]) . '\''; }, $str); $str = preg_replace_callback('~chr\(([^\)]+)\)~msi', static function($m) { return '\'' . Helpers::calc($m[0]) . '\''; }, $str); $str = str_replace('\'.\'', '', $str); return base64_decode(substr($str,1, -1)); } private function deobfuscateEvalFileContentBySize($str, $i0l1i10001010000010) { $res = $str; $mainContent = str_replace(["\r", "\n"], '', $str); $mainContentLen = strlen($mainContent); $main_key = $i0l1i10001010000010[2] . $mainContentLen; $str_to_code = base64_decode($i0l1i10001010000010[3]); $code = Helpers::decodeEvalFileContentBySize($str_to_code, $main_key); if (preg_match('~\$\w+=strpos\(\$\w+,((?:chr\(\d+\)\.?)+)\);\$\w+=substr\(\$\w+,0,\$\w+\);eval\(\w+\(\w+\("([^"]+)"\),\$\w+\)\);function\s\w+\(\$\w+\){.*?strpos\(\$\w+,\1\);.*?substr\(\$\w+,\$\w+\+(\d)\)\);~msi', $code, $match)) { preg_match_all('~chr\((\d+\))~msi', $match[1], $chrMatches, PREG_SET_ORDER); $find = ''; foreach ($chrMatches as $chrMatch) { $find .= chr((int)$chrMatch[1]); } $pos = strpos($mainContent, $find); $i0l1i10000111110110 = substr($mainContent, 0, $pos); $code = Helpers::decodeEvalFileContentBySize(base64_decode($match[2]), $main_key); if (preg_match('~\$\w+=md5\(\$\w+\)\.\$\w+;~msi', $code)) { $i0l1i10000100010000 = md5($i0l1i10000111110110) . $mainContentLen; $i0l1i10000111110110 = base64_decode(substr($mainContent, $pos + (int)$match[3])); $res = Helpers::decodeEvalFileContentBySize($i0l1i10000111110110, $i0l1i10000100010000); } } return '<?php ' . $res; } private function deobfuscateBase64Array($str, $i0l1i10001010000010) { $var_name = $i0l1i10001010000010[1]; $el0 = base64_decode($i0l1i10001010000010[2]); $el1 = Helpers::replaceBase64Decode($i0l1i10001010000010[3], '\''); $code = $i0l1i10001010000010[4]; $code = str_replace($var_name . '[0]', '\'' . $el0 . '\'', $code); $code = str_replace($var_name . '[1]', $el1, $code); $code = Helpers::replaceBase64Decode($code, '\''); return $code; } private function deobfuscateSimpleVarsAndEval($str, $i0l1i10001010000010) { $vars_content = $i0l1i10001010000010[1]; $eval_content = $i0l1i10001010000010[2]; $vars = Helpers::collectVars($vars_content); $code = Helpers::replaceVarsFromArray($vars, $eval_content); return $this->unwrapFuncs($code); } private function deobfuscateReplaceFuncWithBase64DecodeArray($str, $i0l1i10001010000010) { $nel_function_content = $i0l1i10001010000010[3]; $other_content = $i0l1i10001010000010[1] . $i0l1i10001010000010[4]; $array_elements = str_replace(""."", '', $nel_function_content); $elements = array_map("b\x61\x73e\x36\x34_\x64\x65c\x6f\x64e", explode(',', $array_elements)); $result = preg_replace_callback('~nel\s*\(\s*(\d+)\s*\)~mis', function($match) use ($elements) { $index = $match[1]; $value = isset($elements[$index]) ? $elements[$index] : null; if (!is_null($value)) { if ($value === "\r") { return '"\\r"'; } return "'" . addcslashes($value, "'\\") . "'"; } return $match[0]; }, $other_content ); return Helpers::replaceMinMaxRound($result); } private function deobfuscateCreateFuncVars($str, $i0l1i10001010000010) { $res = Helpers::concatStringsInContent($i0l1i10001010000010[1]); $vars = Helpers::collectVars($res); $res = Helpers::replaceVarsFromArray($vars, $i0l1i10001010000010[2]); return $this->unwrapFuncs($res); } private function deobfuscateJsonDecodedVar($str, $i0l1i10001010000010) { $decodedStr = Helpers::replaceBase64Decode($i0l1i10001010000010[1], "Q\x55\x4fT\x45"); $decodedStr = str_replace("'", "\'", $decodedStr); $decodedStr = str_replace("Q\x55\x4fT\x45", "'", $decodedStr); $res = str_replace($i0l1i10001010000010[1], $decodedStr, $str); return $res; } private function deobfuscateFilePutPureEncodedContents($str, $i0l1i10001010000010) { return $this->deobfuscateJsonDecodedVar($str, $i0l1i10001010000010); } private function deobfuscateEvalFuncReverse($str, $i0l1i10001010000010) { $decodedContent = $i0l1i10001010000010[5]; $decodedContent = preg_replace_callback('~eval\((\w+\(\'([^\']+)\'\))\);~msi', function ($m) { $strLen = strlen($m[2]); $res = ''; for ($i = 0; $i <= $strLen - 1; $i++) { $res .= $m[2][$strLen - $i - 1]; } return str_replace($m[1], $res, $m[0]); }, $decodedContent); return str_replace($i0l1i10001010000010[5], $decodedContent, $str); } private function deobfuscateBase64decodeFuncs($str, $i0l1i10001010000010) { $res = $str; $res = preg_replace_callback('~\w+\("([^"]+)"\)~msi', function ($m) { return "'" . base64_decode($m[1]) . "'"; }, $res); return $res; } private function deobfuscateEvalCreateFuncWithDictionaryVar($str, $i0l1i10001010000010) { $res = Helpers::replaceVarsFromDictionary($i0l1i10001010000010[1], $i0l1i10001010000010[2], $str); $vars = Helpers::collectVars($res, "'"); $func = stripcslashes($i0l1i10001010000010[5]); return sprintf('eval(%s(%s(\'%s\'))));', $vars[$i0l1i10001010000010[3]] ?? $i0l1i10001010000010[3], $func, $i0l1i10001010000010[6]); } private function deobfuscateEvalCreateFuncWithVars($str, $i0l1i10001010000010) { $res = Helpers::concatStringsInContent($str); $vars = Helpers::collectVars($res, false); $res = Helpers::replaceVarsFromArray($vars, $i0l1i10001010000010[4]); $res = Helpers::concatStringsInContent($res); $res = preg_replace_callback('~\w+\(((?:[\'"][^\'"]*[\'"],?)+)\)~msi', function ($m) { return str_replace(',', ".", $m[1]); }, $res); $res = Helpers::concatStringsInContent($res); return trim($res, "'"); } private function deobfuscateExplodeSubstrGzinflate($str, $i0l1i10001010000010) { $obfuscated = explode($i0l1i10001010000010[3], gzinflate(substr(stripcslashes($i0l1i10001010000010[4]), hexdec($i0l1i10001010000010[5]), (int)$i0l1i10001010000010[6]))); $str = str_replace($i0l1i10001010000010[1], '', $str); $str = preg_replace_callback('~\$(?:_GET|GLOBALS)[\{\[][^}]+[\}\]][\{\[]([0-9a-fx]+)[\}\]](\()?~msi', function($m) use ($obfuscated) { $index = hexdec($m[1]); $func = (isset($m[2]) && $m[2] !== ''); if ($func) { return $obfuscated[$index] . '('; } else { return '\'' . $obfuscated[$index] . '\''; } }, $str); return $str; } private function deobfuscateBase64Vars($str, $i0l1i10001010000010) { $vars = Helpers::collectVars($i0l1i10001010000010[2], '\''); $code = Helpers::replaceVarsFromArray($vars, $i0l1i10001010000010[5], false, true); $code = Helpers::collectStr($code, '\''); $code = base64_decode($code); $code = str_replace($i0l1i10001010000010[1], $code, $str); return $code; } private function deobfuscateChr0b($str, $i0l1i10001010000010) { $str = preg_replace_callback('~chr\(((0b|0x)?[0-9a-f]+)\)~msi', function($m) { if (isset($m[2]) && $m[2] === "0\x62") { return '\'' . chr(bindec($m[1])) . '\''; } if (isset($m[2]) && $m[2] === "0\x78") { return '\'' . chr(hexdec($m[1])) . '\''; } return '\'' . chr($m[1]) . '\''; }, $str); $str = preg_replace_callback('~\(\'(.)\'\^\'(.)\'\)~msi', function($m) { return '\'' . ($m[1] ^ $m[2]) . '\''; }, $str); $str = str_replace('\'.\'', '', $str); $str = preg_replace('~\$\{\'([^\']+)\'\}~msi', '\$\1', $str); $str = preg_replace_callback('~(\$\w+)\s*=\s*\'str_rot13\';\s*\1\s*=\s*\1\s*\(\'([^\']+)\'\);~msi', function ($m) { return $m[1] . ' = ' . '\'' . str_rot13($m[2]) . '\';'; }, $str); return $str; } private function deobfuscateCreateFuncPlugin($str, $i0l1i10001010000010) { return gzinflate(base64_decode($i0l1i10001010000010[3])); } private function deobfuscateStrreplaceEval($str, $i0l1i10001010000010) { $vars = Helpers::collectFuncVars($i0l1i10001010000010[1]); return Helpers::replaceVarsFromArray($vars, $i0l1i10001010000010[2]); } private function deobfuscateHackM19($str, $i0l1i10001010000010) { return gzinflate(base64_decode($i0l1i10001010000010[6])); } private function deobfuscateEv404($str, $i0l1i10001010000010) { return bzdecompress(base64_decode($i0l1i10001010000010[4])); } private function deobfuscateSetVars($str, $i0l1i10001010000010) { return str_replace($i0l1i10001010000010[1], gzinflate(base64_decode($i0l1i10001010000010[5])), $str); } private function deobfuscateCreateFuncGzB64($str, $i0l1i10001010000010) { return gzuncompress(base64_decode($i0l1i10001010000010[3])); } private function deobfuscateCreateFuncGzInflateB64($str, $i0l1i10001010000010) { return gzinflate(base64_decode($i0l1i10001010000010[3])); } private function deobfuscateWsoShellDictVars($str, $i0l1i10001010000010) { $vars[$i0l1i10001010000010[1]] = stripcslashes($i0l1i10001010000010[2]); $res = Helpers::replaceVarsFromArray($vars, $i0l1i10001010000010[3]); $vars = Helpers::collectFuncVars($res, $vars, false); $res = Helpers::replaceVarsFromArray($vars, $i0l1i10001010000010[5]); $finalCode = $this->unwrapFuncs($res); $dictVar = Helpers::replaceVarsFromDictionary($i0l1i10001010000010[4], $vars[$i0l1i10001010000010[4]] ?? '', $i0l1i10001010000010[6]); $vars = Helpers::collectVars($dictVar, "'", $vars); if (isset($vars[$i0l1i10001010000010[9]]) && $vars[$i0l1i10001010000010[9]] === "r\x6f\x74e\x6e\x63o\x64\x65") { $vars[$i0l1i10001010000010[8]] = Helpers::rotencode(base64_decode($i0l1i10001010000010[10]), -1); $dictVar = Helpers::replaceVarsFromDictionary($i0l1i10001010000010[8], $vars[$i0l1i10001010000010[8]] ?? '', $i0l1i10001010000010[11]); $dictVar = Helpers::replaceVarsFromDictionary($i0l1i10001010000010[4], $vars[$i0l1i10001010000010[4]] ?? '', $dictVar); $vars = Helpers::collectVars($dictVar, "'", $vars); $res = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $i0l1i10001010000010[12])); $count = 10; while ($count > 0 && preg_match('~@?eval\(\$\w+\(\$\w+\(["\'][^\'"]+[\'"]\)\)\);~msi', $res, $match)) { $res = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $res)); $count--; } return $res; } return $str; } private function deobfuscateFuncDictVars($str, $i0l1i10001010000010) { $vars[$i0l1i10001010000010[1]] = stripcslashes($i0l1i10001010000010[2]); $vars[$i0l1i10001010000010[3]] = explode($i0l1i10001010000010[4], $i0l1i10001010000010[5]); foreach ($vars[$i0l1i10001010000010[3]] as $i => $k) { $temp = preg_split("/\x2f", $k, -1, PREG_SPLIT_NO_EMPTY); $vars[$i0l1i10001010000010[3]][$i] = implode("", array_reverse($temp)); } $iterVar = explode($i0l1i10001010000010[7], $i0l1i10001010000010[8]); foreach ($iterVar as $i => $k) { $vars[$k] = $vars[$i0l1i10001010000010[3]][$i]; } $vars[$i0l1i10001010000010[1]] = Helpers::decodefuncDictVars($vars[$i0l1i10001010000010[1]], -2); $dictVar = Helpers::replaceVarsFromDictionary($i0l1i10001010000010[1], $vars[$i0l1i10001010000010[1]] ?? '', $i0l1i10001010000010[15]); $vars = Helpers::collectVars($dictVar, "'", $vars); $dictVar = Helpers::getVarsFromDictionaryDynamically($vars, $i0l1i10001010000010[20]); $vars = Helpers::collectVars($dictVar, "'", $vars); $res = Helpers::decodefuncDictVars($i0l1i10001010000010[23], 1); if (isset($vars[$i0l1i10001010000010[22]]) && Helpers::isSafeFunc($vars[$i0l1i10001010000010[22]])) { $res = @$vars[$i0l1i10001010000010[22]]($res); $res = Helpers::replaceVarsFromArray($vars, $res); } if (preg_match('~\$\w+="([^"]+)";@eval\(\'\?>\'\.gzuncompress\(base64_decode\(strtr\(substr\(\$\w+,(\d+[+\-*/]\d+)\),substr\(\$\w+,(\d+),(\d+)\),\s?substr\(\$\w+,(\d+),(\d+)\)\)\)\)\);~msi', $res, $match)) { $res = '?> ' . gzuncompress(base64_decode( strtr( substr($match[1], (int)Helpers::calculateMathStr($match[2])), substr($match[1], (int)$match[3], (int)$match[4]), substr($match[1], (int)$match[5], (int)$match[6]))) ); } return $res; } private function deobfuscateSec7or($str, $i0l1i10001010000010) { $res = $this->unwrapFuncs($i0l1i10001010000010[3] . $i0l1i10001010000010[6] . $i0l1i10001010000010[4] . ';'); for($i=0, $iMax = strlen($res); $i < $iMax; $i++) { $res[$i] = chr(ord($res[$i]) - (int)$i0l1i10001010000010[5]); } return $res; } private function deobfuscateLinesCond($str, $i0l1i10001010000010) { $vars_str = $this->unwrapFuncs($i0l1i10001010000010[1]); preg_match_all('~((?:\$\w+=)+)__LINE__==\s*(?:\d+[-+]?)+\s*\?\s*base64_decode\("([^"]+)"\)~msi', $vars_str, $m, PREG_SET_ORDER); $vars = []; foreach ($m as $var) { $func = base64_decode($var[2]); $tmp = explode('=', $var[1]); array_pop($tmp); $vars[] = array_combine(array_values($tmp), array_fill(0, count($tmp), $func)); } $vars = array_merge(...$vars); $res = preg_replace_callback('~eval\(\$\w+\(\$\w+\("[^"]+"\)\)\);~msi', function ($m) use ($vars) { while (preg_match('~eval\(\$\w+\(\$\w+\("[^"]+"\)\)\);~msi', $m[0])) { $m[0] = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $m[0])); } return $m[0]; }, $i0l1i10001010000010[3]); $tmp = []; $vars = Helpers::collectVars($res, '"', $tmp, true); $res = Helpers::replaceVarsFromArray($vars, $res, false, true); $vars = Helpers::collectVars($res, '\'', $tmp, true); $res = Helpers::replaceVarsFromArray($vars, $res, false, true); return $res; } private function deobfuscateClassWithArrays($str, $i0l1i10001010000010) { preg_match_all('~"[^"]+"=>"([^"]+)"~msi', $i0l1i10001010000010[2], $m); $data = implode('', array_reverse($m[1])); $data = gzuncompress(base64_decode($data)); $i0l1i10000100011010berSubstr = 14; if (preg_match('~,\((\d+/\d+)\)\);return~msi', $str, $calcMatch)) { $i0l1i10000100011010berSubstr = (int)Helpers::calculateMathStr($calcMatch[1]); } for ($i = 0, $iMax = strlen($data); $i < $iMax; $i++) { if(isset($data[$i])) { $param3 = ord($data[$i]); $data[$i] = chr($param3 - $i0l1i10000100011010berSubstr); } } $res = gzuncompress(base64_decode(strrev(gzinflate($data)))); return $res; } private function deobfuscateGotoBase64Decode($str) { $res = $str; $hop = 5; while ($hop > 0 && preg_match(Helpers::REGEXP_BASE64_DECODE, $res)) { $res = preg_replace_callback(Helpers::REGEXP_BASE64_DECODE, function ($match) { $code = base64_decode(stripcslashes($match[1])); return '"' . Helpers::unwrapGoto($code) . '"'; }, $res); $hop--; } return $res; } private function deobfuscateGotoB64Xor($str, $i0l1i10001010000010) { return Helpers::unwrapGoto($str); } private function deobfuscateAssertStrrev($str, $i0l1i10001010000010) { return str_replace($i0l1i10001010000010[1], strrev($i0l1i10001010000010[4]), $str); } private function deobfuscateB64strtr($str, $i0l1i10001010000010) { $code = $i0l1i10001010000010[4]; $delta = (int)$i0l1i10001010000010[1]; $code = str_split($code); foreach ($code as &$c) { $c = chr(ord($c) + $delta); } $code = implode('', $code); $code = strtr($code, $i0l1i10001010000010[2], $i0l1i10001010000010[3]); $code = base64_decode($code); preg_match('~(\$\w+)="([^"]+)";@eval\(\'\?>\'\.gzuncompress\((?:\$\w+\()+\$\w+,(\$\w+)\*2\),(\$\w+)\(\1,\3,\3\),\s*\4\(\1,0,\3\)+;~mis', $code, $m); $code = gzuncompress(base64_decode(strtr(substr($m[2],52*2),substr($m[2],52,52), substr($m[2],0,52)))); $res = Helpers::unwrapGoto($code); return $res; } private function deobfuscateGzB64strReplaceDataImage($str, $i0l1i10001010000010) { $strToDecode = str_replace([$i0l1i10001010000010[2], $i0l1i10001010000010[3]], [$i0l1i10001010000010[4], $i0l1i10001010000010[5]], $i0l1i10001010000010[7]); $res = gzinflate(base64_decode($strToDecode)); return $res; } private function deobfuscateSerializeFileContent($str, $i0l1i10001010000010) { return base64_decode(strrev(str_rot13($i0l1i10001010000010[2]))); } private function deobfuscateGlobalVarsManyReplace($str, $i0l1i10001010000010) { $vars = Helpers::collectVars($i0l1i10001010000010[1]); foreach ($vars as &$var) { $var = base64_decode(strrev(str_rot13($var))); } $res = Helpers::replaceVarsFromArray($vars, $i0l1i10001010000010[2], true, true); return $res; } private function deobfuscateConcatVarsPregReplace($str, $i0l1i10001010000010) { $vars = []; $vars = Helpers::collectConcatedVars($str, '"', $vars); $res = Helpers::replaceVarsFromArray($vars, $i0l1i10001010000010[3], true, true); $res = $this->unwrapFuncs($res); return $res; } private function deobfuscateFilePutContentsB64Decoded($str, $i0l1i10001010000010) { $res = $str; $vars = []; $vars = Helpers::collectConcatedVars($res, '"', $vars, true); $res = Helpers::replaceVarsFromArray($vars, $res, true, true); $res = Helpers::replaceBase64Decode($res, '"'); return $res; } private function deobfuscateFwriteB64DecodedStr($str, $i0l1i10001010000010) { $res = $str; $vars = []; $vars = Helpers::collectFuncVars($res, $vars, false, true); $res = Helpers::replaceVarsFromArray($vars, $res, true, true); return $res; } private function deobfuscateFilePutContentsB64Content($str, $i0l1i10001010000010) { $res = Helpers::replaceBase64Decode($str, "'"); return $res; } private function deobfuscateChrDictCreateFunc($str, $i0l1i10001010000010) { $vars = []; preg_match_all('~chr\((\d+)\)~msi', $i0l1i10001010000010[3], $chrs, PREG_SET_ORDER); $dictVar = ''; foreach ($chrs as $chr) { $dictVar .= chr((int)$chr[1]); } $res = Helpers::replaceVarsFromDictionary($i0l1i10001010000010[2], $dictVar, $i0l1i10001010000010[6]); $res = str_replace('\\\'', "'", $res); $res = Helpers::replaceBase64Decode($res, "'"); $res = substr($res, 1); $res = substr($res, 0, -1); return $res; } private function deobfuscateStrReplaceFuncsEvalVar($str, $i0l1i10001010000010) { $func = str_replace($i0l1i10001010000010[3], '', $i0l1i10001010000010[2]); if ($func === "b\x61\x73e\x36\x34_\x64\x65c\x6f\x64e") { return base64_decode($i0l1i10001010000010[4]); } return $str; } private function deobfuscateB64SlashedStr($str, $i0l1i10001010000010) { return stripcslashes(base64_decode(stripcslashes($i0l1i10001010000010[1]))); } private function deobfuscateB64ArrayStrEval($str, $i0l1i10001010000010) { return base64_decode($i0l1i10001010000010[4]); } private function deobfuscateDictVarsPregReplaceB64($str, $i0l1i10001010000010) { $res = Helpers::replaceVarsFromDictionary($i0l1i10001010000010[1], $i0l1i10001010000010[2], $str); if (strpos($res, "p\x72\x65g\x5f\x72e\x70\x6ca\x63\x65") && strpos($res, "e\x76\x61l") && strpos($res, "b\x61\x73e\x36\x34_\x64\x65c\x6f\x64e")) { return base64_decode($i0l1i10001010000010[3]); } return $res; } private function deobfuscateEvalVarB64($str, $i0l1i10001010000010) { return gzinflate(base64_decode($i0l1i10001010000010[3])); } private function deobfuscateDecodeAChar($str, $i0l1i10001010000010) { $res = str_replace($i0l1i10001010000010[1], '', $str); while (strpos($res, 'eval(' . $i0l1i10001010000010[2] . '(\'') !== false) { $res = preg_replace_callback('~eval\(\w+\(\'([^\']+)\'\)\);~msi', function ($m) { return Helpers::decodeACharCustom($m[1]); }, $res); } $vars = Helpers::collectVars($res, '\''); foreach ($vars as $var => $value) { if (strpos($res, $i0l1i10001010000010[2] . '(' . $var . ')') !== false) { $res = str_replace($var . '=\'' . $value . '\';', '', $res); $res = str_replace($i0l1i10001010000010[2] . '(' . $var . ')', '\'' . addcslashes(Helpers::decodeACharCustom($value), '\'') . '\'', $res); } } return $res; } private function deobfuscateStrReplaceCreateFunc($str, $i0l1i10001010000010) { $res = $i0l1i10001010000010[7]; $funcs = str_replace($i0l1i10001010000010[3], "s\x74\x72_\x72\x65p\x6c\x61c\x65", $i0l1i10001010000010[4]); $vars = Helpers::collectFuncVars($funcs, $vars, false); $vars[$i0l1i10001010000010[1]] = '\'' . $i0l1i10001010000010[2] . '\''; foreach ($vars as $var => $value) { $res = str_replace($var, $value, $res); } return 'eval(' . $res . ');'; } private function deobfuscateEvalbin2hex($str, $i0l1i10001010000010) { $res = hex2bin($i0l1i10001010000010[5]) . $i0l1i10001010000010[6]; $res = $this->unwrapFuncs($res); if (preg_match('~define\(\'([^\']+)\', \'[^\']+\'\);\$GLOBALS\[\1\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'((?:[^\']*\\\\\')+[^\']+)\',([0-9a-fx]+),\s*([\-0-9a-f]+)\)~msi', $res, $m)) { $m[3] = stripcslashes($m[3]); $strings = explode($m[2], gzinflate(substr($m[3], hexdec($m[4]), (int)$m[5]))); $res = str_replace($m[0], '', $res); $res = preg_replace_callback('~\$GLOBALS[\{\[].[\}\]][\[\{]([0-9a-fx]+)[\]\}]~msi', function($m) use ($strings) { return '\'' . $strings[hexdec($m[1])] . '\''; }, $res); } if (substr_count($res, 'goto ') > 50) { $res = Helpers::unwrapGoto($res); } return $res; } private function deobfuscateManyFuncsWithCode($str, $i0l1i10001010000010) { $funcs = [$i0l1i10001010000010[1] => "d\x65\x63o\x64\x65"]; preg_match_all('~function\s(\w{1,50})\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}~msi', $res, $funcMatches, PREG_SET_ORDER); foreach ($funcMatches as $funcMatch) { $funcs[$funcMatch[1]] = "s\x69\x6eg\x6c\x65_\x76\x61r"; } $res = preg_replace_callback('~(\w{1,50})\s?\(\s?[\'"]([^\'"]+)[\'"]\s?\)~msi', function ($m) use ($funcs) { $func = $funcs[$m[1]] ?? false; if (!$func) { return $m[0]; } if ($func === "d\x65\x63o\x64\x65") { $decoded = ""; for ($i = 0; $i < strlen($m[2]) - 1; $i += 2) { $decoded .= chr(hexdec($m[2][$i] . $m[2][$i + 1]) ^ 0x66); } return '"' . $decoded . '"'; } elseif ($func === "s\x69\x6eg\x6c\x65_\x76\x61r") { return '"' . $m[2] . '"'; } }, $str); return $res; } private function deobfuscateManyGlobals($str, $i0l1i10001010000010) { $vars = []; foreach ([$i0l1i10001010000010[1], $i0l1i10001010000010[2], $i0l1i10001010000010[3]] as $m) { $hangs = 50; $part = $m; while (strpos($part, "b\x61\x73e\x36\x34_\x64\x65c\x6f\x64e") !== false && $hangs--) { $part = Helpers::replaceVarsFromArray($vars, $part); $part = Helpers::replaceBase64Decode($part); } $ops = explode(';', $part); foreach ($ops as $v) { if ($v === '') { continue; } $tmp = explode('=', $v, 2); $vars[$tmp[0]] = $tmp[1]; } } $res = str_replace([$i0l1i10001010000010[1], $i0l1i10001010000010[2], $i0l1i10001010000010[3]], '', $str); $hangs = 50; while (strpos($res, '$GLOBALS') !== false && $hangs--) { $res = str_replace(array_keys($vars), array_values($vars), $res); } $res = str_replace('base64_decode(\'\')', '\'\'', $res); return $res; } private function deobfuscateB64xoredkey($str, $i0l1i10001010000010) { $b64 = Helpers::collectConcatedVars($i0l1i10001010000010[2]); $b64 = $b64[key($b64)]; $res = Helpers::xorWithKey(base64_decode($b64), $i0l1i10001010000010[10]); return $i0l1i10001010000010[1] . $res; } private function deobfuscateGzB64Func($str, $i0l1i10001010000010) { $res = Helpers::normalize($i0l1i10001010000010[5]); $res = str_replace($i0l1i10001010000010[4], '"' . $i0l1i10001010000010[6] . '"', $res); return $res; } private function deobfuscateDictArrayFuncVars($str, $i0l1i10001010000010) { $dictName = $i0l1i10001010000010[5]; $res = preg_replace_callback('~chr\((\d+)\)~msi', static function ($match) { return '\'' . chr($match[1]) . '\''; }, $i0l1i10001010000010[6]); $vars[$i0l1i10001010000010[2]] = "b\x61\x73e\x36\x34_\x64\x65c\x6f\x64e"; $vars[$i0l1i10001010000010[3]] = base64_decode(Helpers::concatStr($i0l1i10001010000010[4])); $res = Helpers::replaceVarsFromArray($vars, $res, true); $res = Helpers::concatStringsInContent($res); $res = Helpers::replaceVarsFromArray($vars, $res, true, true); $res = preg_replace_callback('~str_rot13\([\'"]([^\'"]+)[\'"]\)~msi', static function ($match) { return '\'' . str_rot13($match[1]) . '\''; }, $res); $res = preg_replace_callback('~(?:[\'"][\w=();*/]*[\'"]\.?){2,}~msi', static function ($m) { preg_match_all('~(\.?)\s?[\'"]([\w=\+/%&();*]+)[\'"]\s?~msi', $m[0], $concatStrings); $strVar = ""; foreach ($concatStrings[2] as $index => $concatString) { if ($concatStrings[1][$index] === ".") { $strVar .= $concatString; } else { $strVar = $concatString; } } return '\'' . $strVar . '\''; }, $res); $arrayVarDict = []; preg_match_all('~[\s\'"]*(.*?\]?)[\s\'"]*(,|$)~msi', $res, $arrMatches, PREG_SET_ORDER); foreach ($arrMatches as $arrMatch) { if ($arrMatch[1] === '') { continue; } $arrayVarDict[] = $arrMatch[1]; } $res = str_replace([$i0l1i10001010000010[1], $i0l1i10001010000010[6]], '', $str); $res = preg_replace_callback('~(\$\w{1,50})\[(\d+)\]~msi', static function ($match) use ($dictName, $arrayVarDict) { if ($dictName === $match[1]) { $res = $arrayVarDict[$match[2]] ?? $match[0]; if (!Helpers::isSafeFunc($res) && $res !== "j\x73\x6fn\x5f\x64e\x63\x6fd\x65" && $res !== "c\x72\x65a\x74\x65_\x66\x75n\x63\x74i\x6f\x6e" && strpos($res, '$') === false) { $res = '"' . $res . '"'; } return $res; } return $match[0]; }, $res); return $res; } private function deobfuscateCreateFuncPackStrRot13($str, $i0l1i10001010000010) { return pack('H*', str_rot13($i0l1i10001010000010[2])); } private function deobfuscateDictVarsCreateFunc($str, $i0l1i10001010000010) { $res = $str; $dictName = $i0l1i10001010000010[2]; $dictVal = stripcslashes($i0l1i10001010000010[3]); $vars = []; $res = preg_replace_callback('~(\$\w{1,50})\s?=\s?\w{1,50}\((?:(?:\$\w{1,50}\[\d+\]\s?|[\'"]{2}\s?)[.,]?\s?)+\);~msi', function($m) use (&$vars, $dictName, $dictVal) { $varName = $m[1]; $dictResultStr = ''; preg_match_all('~(\$\w{1,50})\[(\d+)\]~msi', $m[0], $dictVars, PREG_SET_ORDER); foreach ($dictVars as $dictVar) { if ($dictVar[1] !== $dictName) { continue; } if ((int)$dictVar[2][0] === 0) { $dictResultStr .= $dictVal[octdec($dictVar[2])] ?? ''; } else { $dictResultStr .= $dictVal[$dictVar[2]] ?? ''; } } $vars[$varName] = $dictResultStr; return ''; }, $str); $codeStr = ''; preg_match_all('~(\$\w{1,50})~msi', $res, $varsMatch, PREG_SET_ORDER); foreach ($varsMatch as $var) { $codeStr .= $vars[$var[1]] ?? ''; } if (strpos($codeStr, 'eval(base64_decode') !== false) { return base64_decode($i0l1i10001010000010[5]); } if (strpos($codeStr, 'eval(gzinflate(base64_decode') !== false) { return gzinflate(base64_decode($i0l1i10001010000010[5])); } return $str; } private function deobfuscateDecodedFileGetContentsWithFunc($str, $i0l1i10001010000010) { $res = str_replace($i0l1i10001010000010[6], '', $str); $resCode = implode(' ', @Helpers::unserialize(base64_decode($i0l1i10001010000010[5]))); if (preg_match('~\$\w{1,50}\s?=\s?\'([^\']+)\';\s*\$\w{1,50}\s?=\s?\'([^\']+)\';~msi', $resCode, $configs)) { $uid = $configs[1]; $cfg = $configs[2]; $resCode = preg_replace_callback('~\$this->\w{1,50}\s?=\s?(@unserialize\(\$this->\w{1,50}\(\w{1,50}::\w{1,50}\(\$this->config\),\s?[\'"]([^\'"]+)[\'"]\)\))~msi', static function ($m) use ($uid, $cfg) { $configCodeArray = Helpers::decodeFileGetContentsWithFunc(base64_decode($cfg), $m[2]); $configCodeArray = Helpers::decodeFileGetContentsWithFunc($configCodeArray, $uid); $configCodeArray = @Helpers::unserialize($configCodeArray); $configCodeArray = var_export($configCodeArray, true); return str_replace($m[1], $configCodeArray, $m[0]); }, $resCode); } $res = str_replace($i0l1i10001010000010[8], $resCode, $res); return $res; } private function deobfuscateCreateFuncVarsCode($str, $i0l1i10001010000010) { $vars = Helpers::collectConcatedVars(stripcslashes($i0l1i10001010000010[1])); $tempStr = preg_replace_callback('~(\$\w{1,50})=(.*?);~msi', function ($m) use (&$vars) { $var = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $m[2], true, true)); $vars[$m[1]] = $var; }, $i0l1i10001010000010[2]); $func = Helpers::replaceVarsFromArray($vars, $i0l1i10001010000010[7], true); $code = $this->unwrapFuncs("$func'$i0l1i10001010000010[6]))"); if (preg_match('~(\$\w{1,50})=array\(((?:\d{1,9},?)+)\);\s*(\$\w{1,50})="";for\((\$\w{1,50})=0;\4<sizeof\(\1\);\4\+=2\){if\(\4%4\){\3\.=substr\(\$\w{1,50},\1\[\4\],\1\[\4\+1\]\);}else{\3\.=\$\w{1,50}\(substr\(\$\w{1,50},\1\[\4\].\1\[\4\+1\]\)\);}};.*?return\s\$\w{1,50};~msi', $code, $codeMatches)) { $res = ""; $arrayNum = []; preg_match_all('~(\d{1,9})~msi', $codeMatches[2], $i0l1i10000100011010bers, PREG_SET_ORDER); foreach ($i0l1i10000100011010bers as $i0l1i10000100011010ber) { $arrayNum[] = $i0l1i10000100011010ber[1]; } for ($i = 0; $i < sizeof($arrayNum); $i += 2) { if ($i % 4) { $res .= substr($i0l1i10001010000010[4], $arrayNum[$i], $arrayNum[$i + 1]); } else { $res .= strrev(substr($i0l1i10001010000010[4], $arrayNum[$i], $arrayNum[$i + 1])); } }; $res = $this->unwrapFuncs("$func'$res))"); if ($res) { return $res; } } return $str; } private function deobfuscatePregConcat($str, $i0l1i10001010000010) { return Helpers::normalize($i0l1i10001010000010[2]); } private function deobfuscateUndefinedDFunc($str, $i0l1i10001010000010) { return 'eval(gzinflate(str_rot13(base64_decode(' . $i0l1i10001010000010[2] . '))));'; } private function deobfuscateXoredStrings($str, $i0l1i10001010000010) { $res = preg_replace_callback('~"([^"]+)"\s*\^\s*"([^"]+)"~msi', function($m) { return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\''; }, $str); $res = preg_replace_callback('~\$\{\'(\w+)\'\}~msi', function($m) { return '$' . $m[1]; }, $res); Helpers::collectVars($res, '\'', $vars, true); $res = Helpers::replaceVarsFromArray($vars, $res, false, false); if (preg_match('~(\$\w+)\s*=\s*(\(?\s*gzinflate\s*\(\s*base64_decode\s*)\(\s*\'([^\']+)\'\s*\)\s*\)\s*\)?\s*;\s*\$\w+\s*=\s*@?create_function\(\'([^\']*)\',\s*(?:\1|\'@?eval\(\4\)[^\']+\')\)\s*;\s*@?\$\w+(?:\(\)|\(\1\));~msi', $res, $m)) { $res = $this->deobfuscateCreateFuncGzInflateB64($res, $m); } $res = preg_replace_callback('~/\*[^\*]+\*/~msi', function($m) { return ''; }, $res); $res = str_replace('\\\'', '@@slaapos@@', $res); preg_match('~\$\{"[^"]+"\^"[^"]+"\}\s*=\s*\'([^\']+)\'\s*;~msi', $res, $m); $res = str_replace('@@slaapos@@', '\\\'', $m[1]); $res = stripcslashes($res); $res = preg_replace_callback('~\(?"([^"]+)"\)?\s*\^\s*\(?"([^"]+)"\)?~msi', function($m) { return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\''; }, $res); $res = preg_replace_callback('~\$\{\'(\w+)\'\}~msi', function($m) { return '$' . $m[1]; }, $res); $replace = function($m) use (&$vars) { if (!isset($vars[$m[1]])) { return $m[0]; } if (isset($m[2]) && $m[2] !== '') { return $vars[$m[1]] . '('; } return @($vars[$m[1]][0] !== '\'') ? '\'' . $vars[$m[1]] . '\'' : $vars[$m[1]]; }; Helpers::collectVars($res, '\'', $vars, true); $res = preg_replace_callback('~(\$\w+)\s*(\()?~msi', $replace, $res); Helpers::collectFuncVars($res, $vars, true, true); $res = preg_replace_callback('~(\$\w+)\s*(\()?~msi', $replace, $res); $res = preg_replace('~;+~msi', ';', $res); return $res; } private function deobfuscateCommentWithAlgo($str, $i0l1i10001010000010) { return str_replace($i0l1i10001010000010[1], addcslashes(base64_decode(gzinflate(str_rot13(convert_uudecode(gzinflate(base64_decode($i0l1i10001010000010[1])))))), '\''), $str); } private function deobfuscateFileEncryptor($str, $i0l1i10001010000010) { return Helpers::replaceBase64Decode($str); } private function deobfuscateDefinedB64($str, $i0l1i10001010000010) { return str_replace([$i0l1i10001010000010[1], $i0l1i10001010000010[6], $i0l1i10001010000010[8]], ['', '', gzinflate(base64_decode($i0l1i10001010000010[9]))], $str); } private function deobfuscateB64Xored($str, $i0l1i10001010000010) { return base64_decode(Helpers::xorWithKey(base64_decode($i0l1i10001010000010[4]), $i0l1i10001010000010[6])); } private function deobfuscateB64AssignedVarContent($str, $i0l1i10001010000010) { return str_replace($i0l1i10001010000010[4], "'" . (base64_decode($i0l1i10001010000010[2])) . "'", $i0l1i10001010000010[3]); } private function deobfuscateDictVarsWithMath($str, $i0l1i10001010000010) { $dictVal = $i0l1i10001010000010[2]; $dictStrs = Helpers::calculateMathStr($i0l1i10001010000010[3]); $vars = Helpers::getVarsFromDictionary($dictVal, $dictStrs); $vars = Helpers::collectVars($str, '"', $vars); $vars = Helpers::collectConcatedVars($str, '"', $vars); return $vars[$i0l1i10001010000010[4]] ?? $str; } private function deobfuscateClassDecryptedWithKey($str, $i0l1i10001010000010) { $i0l1i10000100010000 = 'WebKit#58738Educ'; $data = hex2bin($i0l1i10001010000010[2]); $res = Helpers::decodeClassDecryptedWithKey($data, 32, $i0l1i10000100010000); if (strpos($res, 'error_reporting(') !== false) { return $res; } return $str; } private function deobfuscatePHPkoru($str, $i0l1i10001010000010) { $vars[$i0l1i10001010000010[2]] = str_rot13(base64_decode($i0l1i10001010000010[3])); $vars[$i0l1i10001010000010[4]] = str_rot13(base64_decode($i0l1i10001010000010[5])); $code = $i0l1i10001010000010[6]; while (strpos($code, "e\x76\x61l") === 0) { $code = str_replace(array_keys($vars), array_values($vars), $code); $code = $this->unwrapFuncs($code); } $decoded = ''; if (preg_match('~openssl_decrypt\(base64_decode\(trim\(\$\w+\[1\]\)\),\s*"([^"]+)",\s*base64_decode\(str_rot13\("([^"]+)"\)\),\s*(\d+),\s*base64_decode\(str_rot13\("([^"]+)"\)\)\)\);~msi', $code, $openssl_data)) { $data = base64_decode(trim($i0l1i10001010000010[8])); $algo = $openssl_data[1]; $passphrase = base64_decode(str_rot13($openssl_data[2])); $iv = base64_decode(str_rot13($openssl_data[4])); $flags = $openssl_data[3]; $decoded = openssl_decrypt($data, $algo, $passphrase, $flags, $iv); $decoded = str_rot13(base64_decode(str_rot13($decoded))); } return ' ?> ' .PHP_EOL . $decoded; } private function deobfuscateJoomlaInject($str, $i0l1i10001010000010) { $vars = Helpers::collectVars($i0l1i10001010000010[0]); preg_match('~function\s*\w+\((\$\w+)\)\s*\{\s*(\$\w+)\s*=\s*array\(((?:\'[^\']+\',?)+)\1\);\s*for\((\$\w+)=0;\s*\4<\d+;\s*\4\+\+\)\s*\{\s*for\((\$\w+)=0;\s*\5<strlen\(\2\[\4\]\);\s*\5\+\+\)\s*\2\[\4\]\[\5\]\s*=\s*chr\(ord\(\2\[\4\]\[\5\]\)\s*([\-\+])\s*(\d+)~msi', $this->full_source, $decode_data); preg_match_all('~\$this->\w+\(((?|"[^"]+"|\$\w+))\)~msi', $i0l1i10001010000010[0], $to_decode); foreach ($to_decode[1] as &$item) { if ($item[0] === '"' && $item[-1] === '"') { $item = substr($item, 1, -1); } $item = str_replace(array_keys($vars), array_values($vars), $item); $item = "'" . Helpers::joomlaInjectDecoder($decode_data[3] . $item, $decode_data[6], $decode_data[7]) . "'"; } $res = str_replace($to_decode[0], $to_decode[1], $str); return $res; } private function deobfuscateFwriteB64Content($str, $i0l1i10001010000010) { $res = $str; $res = str_replace($i0l1i10001010000010[1], '', $res); $replace = base64_decode($i0l1i10001010000010[3]); $res = str_replace($i0l1i10001010000010[4], "'" . $replace . "'", $res); return $res; } private function deobfuscateB64concatedVars($str, $i0l1i10001010000010) { $res = $i0l1i10001010000010[6]; $code = "'" . base64_decode($i0l1i10001010000010[2]) . base64_decode($i0l1i10001010000010[5]) . "'"; $res = str_replace($i0l1i10001010000010[7], $code, $res); return $res; } private function deobfuscateSlashedCreateFunc($str, $i0l1i10001010000010) { $func = stripcslashes($i0l1i10001010000010[2]); if (strpos($func, "c\x72\x65a\x74\x65_\x66\x75n\x63\x74i\x6f\x6e") !== false) { $code = stripcslashes($i0l1i10001010000010[5]); $code = str_replace($i0l1i10001010000010[4], $i0l1i10001010000010[6], $code); return $code; } return $str; } private function deobfuscateVarDictCreateFunc($str, $i0l1i10001010000010) { $res = Helpers::replaceVarsFromDictionary($i0l1i10001010000010[1], $i0l1i10001010000010[2], $i0l1i10001010000010[3]); $vars = []; $vars = Helpers::collectVars($res, '"', $vars, true); $res = Helpers::replaceVarsFromArray($vars, $res); return $res; } private function deobfuscatecallFuncGzB64($str, $i0l1i10001010000010) { return gzinflate(base64_decode($i0l1i10001010000010[1])); } private function deobfuscateAssertDictVarEval($str, $i0l1i10001010000010) { $dict = $i0l1i10001010000010[2]; $arr = []; for ($i = 0; $i < 6; $i++) { $arr[] = (int)$i0l1i10001010000010[4 + $i]; } $assertStr = ""; for ($i = 0; $i < 6; $i++) { $temp = $arr[$i]; $assertStr .= $dict[$temp]; } $funcs = Helpers::concatStringsInContent(stripcslashes($i0l1i10001010000010[13])); if ($assertStr === "a\x73\x73e\x72\x74" && strpos($funcs, 'eval(base64_decode(gzinflate(base64_decode(') !== false) { return base64_decode(gzinflate(base64_decode($i0l1i10001010000010[11]))); } $vars = []; $vars[$i0l1i10001010000010[10]] = $i0l1i10001010000010[11]; $vars[$i0l1i10001010000010[12]] = $assertStr; return Helpers::replaceVarsFromArray($vars, $funcs); } private function deobfuscateB64FuncEvalGz($str, $i0l1i10001010000010) { return base64_decode(gzinflate(base64_decode($i0l1i10001010000010[4]))); } private function deobfuscateB64Gz($str, $i0l1i10001010000010) { $result = gzinflate(base64_decode($i0l1i10001010000010[2])); $break = isset($i0l1i10001010000010[5]) ? '?>' : ''; return $break . $result; } private function deobfuscateSubstrEmpty($str, $i0l1i10001010000010) { $str = preg_replace_callback('~substr\("([^"]++)",(\d++),(-?\d++)\)~msi', function ($m) { return '"' . substr(stripcslashes($m[1]), (int) $m[2], (int) $m[3]) . '"'; }, $str); $str = str_replace(['"."', '"".'], '', $str); return $str; } private function deobfuscateDeltaOrd($str, $i0l1i10001010000010) { $str = gzinflate(base64_decode($i0l1i10001010000010[4])); for($i = 0, $iMax = strlen($str); $i < $iMax; $i++) { $str[$i] = chr(ord($str[$i]) + (int) $i0l1i10001010000010[3]); } return $str; } private function deobfuscateOutputBuffer($str, $i0l1i10001010000010) { $search = explode(',', str_replace(['\',\'', '\',"', '",\'', '","'], ',', substr($i0l1i10001010000010[5], 1, -1))); $replace = explode(',', str_replace(['\',\'', '\',"', '",\'', '","'], ',', substr($i0l1i10001010000010[6], 1, -1))); $replace = array_map("s\x74\x72i\x70\x63s\x6c\x61s\x68\x65s", $replace); $buffer = str_replace($search, $replace, $i0l1i10001010000010[1] . $i0l1i10001010000010[9]); for ($i = 1, $j = ord($buffer[0]), $iMax = strlen($buffer); $i < $iMax; $i++) { $buffer[$i] = chr(ord($buffer[$i]) - $j - $i); } $buffer[0] = ' '; return $buffer; } private function deobfuscateDoorwayInstaller($str, $i0l1i10001010000010) { $vars = []; Helpers::collectVars($str, '"', $vars, true); $str = preg_replace_callback('~(\$\w+)\((?:"([^"]+)"|(\$\w+))\)~msi', function($m) use ($i0l1i10001010000010, $vars) { if ($m[1] !== $i0l1i10001010000010[1]) { return $m[0]; } if (isset($m[2]) && $m[2] !== '') { return '\'' . base64_decode($m[2]) . '\''; } if (isset($m[3]) && isset($vars[$m[3]])) { return '\'' . base64_decode($vars[$m[3]]) . '\''; } }, $str); return $str; } private function deobfuscateStrReplaceAssert($str, $i0l1i10001010000010) { return base64_decode(gzinflate(base64_decode($i0l1i10001010000010[2]))); } private function deobfuscateAnaLTEAMShell($str, $i0l1i10001010000010) { preg_match_all('~\$\{\'GLOBALS\'\}\[\'([^\']+)\'\]=[\'"]([^\'"]+)[\'"];~msi', $str, $m); $vars = array_combine($m[1], $m[2]); $str = str_replace($m[0], '', $str); $str = preg_replace_callback('~\$\{\$\{\'GLOBALS\'\}\[\'([^\']+)\'\]\}~msi', function($m) use ($vars) { if (!isset($vars[$m[1]])) { return $m[0]; } return '$' . $vars[$m[1]]; }, $str); $str = Helpers::replaceBase64Decode($str); $str = preg_replace_callback('~((\$\w+)=\'([^\']+)\';)\$\w+=\$_SERVER\[\'DOCUMENT_ROOT\'\]\.\'/\'\.\'[^\']+\';if\(file_exists\(\$\w+\)\)@?unlink\(\$\w+\);(\$\w+)=(base64_decode\(\2\));~msi', function ($m) { $res = str_replace($m[1], '', $m[0]); $res = str_replace($m[5], '\'' . base64_decode($m[3]) . '\'', $res); return $res; }, $str); $str = stripcslashes(stripcslashes($str)); return $str; } private function deobfuscateZeuraB64Gzinflate($str, $i0l1i10001010000010) { return gzinflate(base64_decode($i0l1i10001010000010[10])); } private function deobfuscateD5($str, $i0l1i10001010000010) { $i0l1i10000111110110 = explode(hex2bin($i0l1i10001010000010[4]), $str)[1]; $tmp = []; for ($i = 0; $i < strlen($i0l1i10000111110110); $i++) { $tmp[]=ord($i0l1i10000111110110[$i]) xor $i; } $i0l1i10000111110110 = hex2bin(base64_decode(implode(array_map(hex2bin($i0l1i10001010000010[8]), $tmp)))); return $i0l1i10000111110110; } private function deobfuscateStrReplaceFunc($str, $i0l1i10001010000010) { $vars = Helpers::collectFuncVars($i0l1i10001010000010[3], $vars, false, true); $cmd = Helpers::replaceVarsFromArray($vars, $i0l1i10001010000010[5]); if (strpos($cmd, "c\x72\x65a\x74\x65_\x66\x75n\x63\x74i\x6f\x6e") === 0) { $cmd = 'eval(' . str_replace('create_function(\'\',', '', $cmd); } $res = str_replace($i0l1i10001010000010[6], '\'' . $i0l1i10001010000010[7] . '\'', $cmd); return $res; } private function deobfuscateArrayMapB64($str, $i0l1i10001010000010) { $array = explode('\',\'', substr($i0l1i10001010000010[2], 1, -1)); return ' ?>' . base64_decode(str_rot13(implode('', $array))) . '<?php '; } private function deobfuscatePregReplaceStrReplace($str, $i0l1i10001010000010) { return str_replace($i0l1i10001010000010[1], $i0l1i10001010000010[2], stripcslashes($i0l1i10001010000010[3])); } private function deobfuscateEchoB64($str, $i0l1i10001010000010) { return str_replace([$i0l1i10001010000010[2], $i0l1i10001010000010[5]], ['\'' . base64_decode($i0l1i10001010000010[3]) . '\'', '\'' . base64_decode($i0l1i10001010000010[6]) . '\''], $str); } private function deobfuscateCreateFuncXored($str, $i0l1i10001010000010) { $res = preg_replace_callback('~"([^"]+)"\^"([^"]+)"~msi', function($m) { return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\''; }, $str); $vars = Helpers::collectVars($res, '\'', $vars, true); $res = gzinflate(base64_decode($i0l1i10001010000010[2])); $res = preg_replace('~/\*[^\*]+\*/~msi', '', $res); preg_match('~\$\{"[^"]+"\^"[^"]+"\}\s*=\s*\'((?:\\\\.|[^\'])*+)\';~msi', $res, $i0l1i10001010000010); $code = stripcslashes($i0l1i10001010000010[1]); $code = preg_replace_callback('~\(?"([^"]+)"\)?\^\(?"([^"]+)"\)?~msi', function($m) { return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\''; }, $code); $code = MathCalc::calcRawString($code); $vars = []; $code = preg_replace_callback('~\$(?:\{\')?(\w+)(?:\'\})?\s*=\s*\'([^\']*)\';+~msi', function($m) use (&$vars) { $vars['$' . $m[1] . '('] = $m[2] . '('; $vars['$' . $m[1]] = '\'' . $m[2] . '\''; return ''; }, $code); $vars['&& !$_0 '] = '&&'; $vars['if($_0 '] = 'if('; krsort($vars); $code = str_replace(array_keys($vars), array_values($vars), $code); preg_match('~(\$\w+)=base64_decode\(\'([^\']+)\'\);;~msi', $code, $m); $code = str_replace($m[0], '', $code); $code = str_replace('eval(' . $m[1] . ');', base64_decode($m[2]), $code); return $code; } private function deobfuscateCodeLockDecoder($str, $i0l1i10001010000010) { $codelock_stub = base64_decode($i0l1i10001010000010[1]); if (isset($i0l1i10001010000010[2]) && $i0l1i10001010000010[2] !== '') { $codelock_stub = gzinflate($codelock_stub); $hangs = 20; while (strpos($codelock_stub, "e\x76\x61l") === 0 && $hangs--) { $codelock_stub = $this->UnwrapFuncs($codelock_stub); } } preg_match('~\$codelock_active_key="([^"]*)";~msi', $codelock_stub, $m); $codelock_active_key = $m[1]; preg_match('~\$codelock_usezlib="([^"]*)";~msi', $codelock_stub, $m); $codelock_usezlib = $m[1]; $codelock_key_data = $i0l1i10001010000010[3]; if ($codelock_usezlib === "^") { $codelock_key_data = base64_decode($codelock_key_data); $codelock_key_data = gzinflate($codelock_key_data); } if (substr($codelock_active_key, 0, 15) !== "c\x6f\x64e\x6c\x6fc\x6b\x5fa\x63\x74i\x76\x65") { $codelock_key_data = Helpers::codelock_dec_int($codelock_key_data, $codelock_active_key); } else { preg_match('~\$codelock_unlock="([^"]*)";~msi', $codelock_stub, $m); $codelock_active_key = $m[1]; $codelock_key_data = Helpers::codelock_run($codelock_key_data, $codelock_active_key); } return $codelock_key_data; } private function deobfuscateEvalGzStrRotB64($str, $i0l1i10001010000010) { return gzinflate(str_rot13(base64_decode($i0l1i10001010000010[2]))); } private function deobfuscateEvalDictArrayConcat($str, $i0l1i10001010000010) { $dictVal = ''; preg_match_all('~[\'"]([^\'"])[\'"]~msi', $i0l1i10001010000010[2], $m, PREG_SET_ORDER); foreach ($m as $char) { $dictVal .= $char[1]; } $replacedStr = Helpers::replaceVarsFromDictionary($i0l1i10001010000010[1], $dictVal, $str); $vars = Helpers::collectVars($replacedStr); $funcs = Helpers::replaceVarsFromArray($vars, $i0l1i10001010000010[4]); $funcs = Helpers::concatStringsInContent($funcs); $funcs = strtolower($funcs); if (strpos($funcs, 'eval(str_rot13(gzinflate(str_rot13(gzinflate(base64_decode(') !== false) { return str_rot13(gzinflate(str_rot13(gzinflate(base64_decode($i0l1i10001010000010[6]))))); } return $str; } private function deobfuscatePregReplaceXored($str, $i0l1i10001010000010) { $res = preg_replace_callback('~"([^"]+)"\^"([^"]+)"~msi', function($m) { return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\''; }, $str); $vars = []; $vars = Helpers::collectVars($res, '\"', $vars, true); $res = Helpers::replaceVarsFromArray($vars, $res, false, true); $res = str_replace('\'.\'', '', $res); Helpers::collectVars($res, '\'', $vars, true); $res = str_replace(['preg_replace("/' . $i0l1i10001010000010[2] . '/e",\'\'', '\'\',"' . $i0l1i10001010000010[2] . '");'], '', $res); $res = Helpers::replaceVarsFromArray($vars, $res, false, true); return $res; } private function deobfuscateR4C($str, $i0l1i10001010000010) { $vars = []; $res = $str; $hangs = 20; do { Helpers::collectConcatedVars($res, '"', $vars, true); $res = str_replace('"".$', '$', $res); Helpers::collectConcatedVars($res, '\'', $vars, true); $res = trim($res); $res = Helpers::replaceVarsFromArray($vars, $res, false, true); $res = $this->unwrapFuncs($res); } while (preg_match('~eval\((?:\w+\()*(?:\$\w+\.?)+\)~', $res) && $hangs--); return $res; } private function deobfuscateBase64EncryptedGz($str, $i0l1i10001010000010) { $text = $i0l1i10001010000010[1]; $hash = $i0l1i10001010000010[3]; $i0l1i10000100010000 = "a\x73\x64f"; $i0l1i10000100010000_len = strlen($i0l1i10000100010000); $text = base64_decode(str_replace("\n", '', $text)); $text_len = strlen($text); $w = []; for ($i = 0; $i < $i0l1i10000100010000_len; ++$i) { $w[] = $text_len - $i0l1i10000100010000_len - ord($i0l1i10000100010000[$i]); } for ($i = 0; $i < $text_len; ++$i) { $j = abs($w[$i % $i0l1i10000100010000_len] - $i); $x = $text[$j]; $text[$j] = $text[$i]; $text[$i] = $x; } if ($i0l1i10000100010000_len < 10) { $i0l1i10000100010000_len *= $i0l1i10000100010000_len & 1 ? 3 : 2; } if (($text = @gzinflate($text)) && (md5(substr($text, 0, $i0l1i10000100010000_len)) === $hash)) { return substr($text, $i0l1i10000100010000_len); } return ''; } private function deobfuscateJS_fromCharCode($str, $i0l1i10001010000010) { $result = ''; $chars = explode(',', $i0l1i10001010000010[2]); foreach ($chars as $char) { $result .= chr((int)trim($char)); } if ($i0l1i10001010000010[1] == 'eval(') { return $result; } return '\''.$result.'\';'; } private function deobfuscateJS_unescapeContentFuncWrapped($str, $i0l1i10001010000010) { $result = ''; $functionCode = urldecode($i0l1i10001010000010[1]); $functionName = urldecode($i0l1i10001010000010[2]); $strDecoded = $i0l1i10001010000010[3]; if (preg_match('~function\s?(\w{1,50})\(\w{1,50}\)\s{0,50}{\s{0,50}var\s?\w{1,50}\s?=\s?[\'"]{2};\s{0,50}var\s?\w{1,50}\s?=\s?\w{1,50}\.split\("(\d+)"\);\s{0,50}\w{1,50}\s?=\s?unescape\(\w{1,50}\[0\]\);\s{0,50}\w{1,50}\s?=\s?unescape\(\w{1,50}\[1\]\s?\+\s?"(\d{1,50})"\);\s{0,50}for\(\s?var\s?\w{1,50}\s?=\s?0;\s?\w{1,50}\s?<\s?\w{1,50}\.length;\s?\w{1,50}\+\+\)\s?{\s{0,50}\w{1,50}\s?\+=\s?String\.fromCharCode\(\(parseInt\(\w{1,50}\.charAt\(\w{1,50}%\w{1,50}\.length\)\)\^\w{1,50}\.charCodeAt\(\w{1,50}\)\)\+-2\);\s{0,50}}\s{0,50}return\s\w{1,50};\s{0,50}}~msi', $functionCode, $match) && strpos($functionName, $match[1])) { $tmp = explode((string)$match[2], $strDecoded); $s = urldecode($tmp[0]); $k = urldecode($tmp[1] . (string)$match[3]); $kLen = strlen($k); $sLen = strlen($s); for ($i = 0; $i < $sLen; $i++) { $result .= chr(((int)($k[$i % $kLen]) ^ ord($s[$i])) - 2); } } else { $result = $i0l1i10001010000010[3]; $result = str_replace([$i0l1i10001010000010[1], $i0l1i10001010000010[2]], [$functionCode, $functionCode], $result); } return $result; } private function deobfuscateJS_ObfuscatorIO($str, $i0l1i10001010000010) { $detectPattern = '~((?![^_a-zA-Z$])[\w$]*)\(-?(\'|")(0x[a-f\d]+|\\x30\\x78[\\xa-f\d]+)\2(\s*,\s*(\'|").+?\5)?\)~msi'; preg_match_all($detectPattern, $str, $detectMatch); $detectMatch = array_unique($detectMatch[1]); if (count($detectMatch) !== 1) { return $str; } preg_match('~\b(?:var|const|let)\s+' . $detectMatch[0] . '\s*=\s*function\s*\(.*?\)\s*~msi', $str, $index, PREG_OFFSET_CAPTURE); $index = $index[0][1]; $bo = 0; $bc = 0; $strSize = strlen($str); $mainCode = ''; while ($index < $strSize) { if ($str[$index] === '{') { $bo++; } if ($str[$index] === '}') { $bc++; } if ($bc === $bo && $bo !== 0) { $mainCode = substr($str, $index + 2); break; } $index++; } $array = explode('\',\'', substr($i0l1i10001010000010[2], 1, -1)); $shuffle = hexdec($i0l1i10001010000010[3]); while ($shuffle--) { $array[] = array_shift($array); } $mainCode = preg_replace_callback('~((?![^_a-zA-Z$])[\w$]*)\(-?(\'|")(0x[a-f\d]+|\\x30\\x78[\\xa-f\d]+)\2(\s*,\s*(\'|")(.+?)\5)?\)~msi', function ($m) use ($array) { return '\'' . Helpers::deobfuscatorIO_string($array[hexdec($m[3])], $m[6]) . '\''; }, $mainCode); return Helpers::normalize($mainCode); } private function deobfuscateJS_documentWriteUnescapedStr($str, $i0l1i10001010000010) { if (strpos($i0l1i10001010000010[1], '\u00') !== false) { $i0l1i10001010000010[1] = str_replace('\u00', '%', $i0l1i10001010000010[1]); } return urldecode($i0l1i10001010000010[1]); } private function deobfuscateJS_deanPacker($str, $i0l1i10001010000010) { $payload = $i0l1i10001010000010[1]; $symtab = explode('|', $i0l1i10001010000010[4]); $radix = (int)$i0l1i10001010000010[2]; $count = (int)$i0l1i10001010000010[3]; if ($count !== count($symtab)) { return $str; } $array = []; while ($count--) { $tmp = Helpers::jsPackerUnbaser($count, $radix); $array[$tmp] = (isset($symtab[$count]) && $symtab[$count] !== '') ? $symtab[$count] : $tmp; } $result = preg_replace_callback('~\b\w+\b~', function($m) use ($array) { return $array[$m[0]]; }, $payload); $result = str_replace('\\', '', $result); if (preg_match('~function\(\)\{var\s*(\w+)=\{([\$\w]+):\'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\+/=\',\w+:function\(\w+\){var\s*\w+=\'\',\w,\w,\w,\w,\w,\w,\w,\w=0;\w=\1\.[\w\$]+\(\w\);while\(\w<\w\.length\)\{[^{]+\{\w=\w=64\}else[^{]+\{\w=64\};[^}]+};return\s*\w},(\w+):function\(\w\)\{var\s*\w+=\'\',\w,\w,\w,\w,\w,\w,\w,\w=0;\w=\w\.replace\(/\[\^A\-Za\-z0\-9\+/=\]/g,\'\'\);while\(\w<\w\.length\){\w=this\.\2\.indexOf\(\w\.charAt\(\w\+\+\)\);~msi', $result, $m)) { $class = $m[1]; $b64_func = $m[3]; $result = preg_replace_callback('~(?:var\s(\w+)=\'([^\']+)\';\1=(\w+\.\w+)\(\1\)|(\w+\.\w+)\(\'([^\']+)\'\))~msi', function($m) use ($class, $b64_func) { if ((isset($m[4]) && $m[4] !== '' && $m[4] !== $class . "." . $b64_func) || (isset($m[3]) && $m[3] !== '' && $m[3] !== $class . "." . $b64_func) ) { return $m[0]; } if (isset($m[4]) && $m[4] !== '') { return '\'' . base64_decode($m[5]) . '\''; } if (isset($m[3]) && $m[3] !== '') { return 'var ' . $m[1] . '=\'' . base64_decode($m[2]) . '\''; } }, $result); $result = preg_replace_callback('~\w+=\[((?:\'[^\']+\',?)+)\]~msi', function($m) { $arr = explode('\',\'', substr($m[1], 1, -1)); $arr = array_map("b\x61\x73e\x36\x34_\x64\x65c\x6f\x64e", $arr); return str_replace($m[1], '\'' . implode('\',\'', $arr) . '\'', $m[0]); }, $result); } return $result; } private function deobfuscateJS_objectDecode($str, $i0l1i10001010000010) { $ciphered = explode('+', $i0l1i10001010000010[9]); $chars = explode('\',\'', substr($i0l1i10001010000010[13], 1, -1)); $count = (int)$i0l1i10001010000010[8]; $arr = []; for ($i = 0; $i < $count; $i++) { $arr[Helpers::jsObjectDecodeIndexToString($i)] = $ciphered[$i][0] !== ';' ? '\'' . Helpers::jsObjectStringDecoder($i0l1i10001010000010[11], $chars, $ciphered[$i]) . '\'' : (float)substr($ciphered[$i], 1); } $ret = preg_replace_callback('~\$\.\b(\w+)\b~', function($m) use ($arr) { if (!isset($arr[$m[1]])) { return $m[0]; } return $arr[$m[1]]; }, $i0l1i10001010000010[2]); return $ret; } private function deobfuscatePY_evalCompileStr($str, $i0l1i10001010000010) { return gzuncompress(base64_decode($i0l1i10001010000010[1])); } } class LoadSignaturesForScan { private $sig_db = []; private $sig_db_meta_info = []; private $sig_db_location = "i\x6e\x74e\x72\x6ea\x6c"; private $i0l1i10000001001000; private $debug; public $_DBShe; public $X_DBShe; public $_FlexDBShe; public $X_FlexDBShe; public $XX_FlexDBShe; public $_ExceptFlex; public $_AdwareSig; public $_PhishingSig; public $_JSVirSig; public $X_JSVirSig; public $_SusDB; public $_SusDBPrio; public $_DeMapper; public $_Mnemo; public $whiteUrls; public $blackUrls; public $ownUrl = null; private $count; private $count_susp; private $result = 0; private $last_error = ''; const SIGN_INTERNAL = 1; const SIGN_EXTERNAL = 2; const SIGN_IMPORT = 3; const SIGN_ERROR = 9; public function __construct($avdb_file, $i0l1i10000001001000, $debug) { $this->mode = $i0l1i10000001001000; $this->debug = $debug; $this->sig_db_meta_info = [ 'build-date' => "n\x2f\x61", "v\x65\x72s\x69\x6fn" => "n\x2f\x61", 'release-type' => "n\x2f\x61", ]; if ($avdb_file && file_exists($avdb_file)) { $avdb = explode("\n", gzinflate(base64_decode(str_rot13(strrev(trim(file_get_contents($avdb_file))))))); $this->sig_db_location = "e\x78\x74e\x72\x6ea\x6c"; $this->_DBShe = explode("\n", base64_decode($avdb[0])); $this->X_DBShe = explode("\n", base64_decode($avdb[1])); $this->_FlexDBShe = explode("\n", base64_decode($avdb[2])); $this->X_FlexDBShe = explode("\n", base64_decode($avdb[3])); $this->XX_FlexDBShe = explode("\n", base64_decode($avdb[4])); $this->_ExceptFlex = explode("\n", base64_decode($avdb[5])); $this->_AdwareSig = explode("\n", base64_decode($avdb[6])); $this->_PhishingSig = explode("\n", base64_decode($avdb[7])); $this->_JSVirSig = explode("\n", base64_decode($avdb[8])); $this->X_JSVirSig = explode("\n", base64_decode($avdb[9])); $this->_SusDB = explode("\n", base64_decode($avdb[10])); $this->_SusDBPrio = explode("\n", base64_decode($avdb[11])); $this->_DeMapper = array_combine(explode("\n", base64_decode($avdb[12])), explode("\n", base64_decode($avdb[13]))); $this->_Mnemo = @array_flip(@array_combine(explode("\n", base64_decode($avdb[14])), explode("\n", base64_decode($avdb[15])))); $avdb_meta_info = json_decode(base64_decode($avdb[16]), true); $this->sig_db_meta_info['build-date'] = $avdb_meta_info ? $avdb_meta_info['build-date'] : "n\x2f\x61"; $this->sig_db_meta_info["v\x65\x72s\x69\x6fn"] = $avdb_meta_info ? $avdb_meta_info["v\x65\x72s\x69\x6fn"] : "n\x2f\x61"; $this->sig_db_meta_info['release-type'] = $avdb_meta_info ? $avdb_meta_info['release-type'] : "n\x2f\x61"; if (count($this->_DBShe) <= 1) { $this->_DBShe = []; } if (count($this->X_DBShe) <= 1) { $this->X_DBShe = []; } if (count($this->_FlexDBShe) <= 1) { $this->_FlexDBShe = []; } if (count($this->X_FlexDBShe) <= 1) { $this->X_FlexDBShe = []; } if (count($this->XX_FlexDBShe) <= 1) { $this->XX_FlexDBShe = []; } if (count($this->_ExceptFlex) <= 1) { $this->_ExceptFlex = []; } if (count($this->_AdwareSig) <= 1) { $this->_AdwareSig = []; } if (count($this->_PhishingSig) <= 1) { $this->_PhishingSig = []; } if (count($this->X_JSVirSig) <= 1) { $this->X_JSVirSig = []; } if (count($this->_JSVirSig) <= 1) { $this->_JSVirSig = []; } if (count($this->_SusDB) <= 1) { $this->_SusDB = []; } if (count($this->_SusDBPrio) <= 1) { $this->_SusDBPrio = []; } $this->result = self::SIGN_EXTERNAL; } else { InternalSignatures::init(); $this->_DBShe = InternalSignatures::$_DBShe; $this->X_DBShe = InternalSignatures::$X_DBShe; $this->_FlexDBShe = InternalSignatures::$_FlexDBShe; $this->X_FlexDBShe = InternalSignatures::$X_FlexDBShe; $this->XX_FlexDBShe = InternalSignatures::$XX_FlexDBShe; $this->_ExceptFlex = InternalSignatures::$_ExceptFlex; $this->_AdwareSig = InternalSignatures::$_AdwareSig; $this->_PhishingSig = InternalSignatures::$_PhishingSig; $this->_JSVirSig = InternalSignatures::$_JSVirSig; $this->X_JSVirSig = InternalSignatures::$X_JSVirSig; $this->_SusDB = InternalSignatures::$_SusDB; $this->_SusDBPrio = InternalSignatures::$_SusDBPrio; $this->_DeMapper = InternalSignatures::$_DeMapper; $this->_Mnemo = InternalSignatures::$_Mnemo; $avdb_meta_info = InternalSignatures::$i0l1i10001000101000_meta_info; $this->sig_db_meta_info['build-date'] = $avdb_meta_info ? $avdb_meta_info['build-date'] : "n\x2f\x61"; $this->sig_db_meta_info["v\x65\x72s\x69\x6fn"] = $avdb_meta_info ? $avdb_meta_info["v\x65\x72s\x69\x6fn"] : "n\x2f\x61"; $this->sig_db_meta_info['release-type'] = $avdb_meta_info ? $avdb_meta_info['release-type'] : "n\x2f\x61"; $this->result = self::SIGN_INTERNAL; } if ($i0l1i10000001001000 < 2) { $this->X_FlexDBShe = []; $this->XX_FlexDBShe = []; $this->X_JSVirSig = []; } if (file_exists(__DIR__ . '/ai-bolit.sig')) { try { $s_file = new SplFileObject(__DIR__ . '/ai-bolit.sig'); $s_file->setFlags(SplFileObject::READ_AHEAD | SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE); foreach ($s_file as $i0l1i10000101000010) { $this->_FlexDBShe[] = preg_replace('#\G(?:[^~\\\\]+|\\\\.)*+\K~#', '\\~', $i0l1i10000101000010); } $this->result = self::SIGN_IMPORT; $s_file = null; } catch (Exception $e) { $this->result = self::SIGN_ERROR; $this->last_error = $e->getMessage(); } } $this->count = count($this->_JSVirSig) + count($this->X_JSVirSig) + count($this->_DBShe) + count($this->X_DBShe) + count($this->_FlexDBShe) + count($this->X_FlexDBShe) + count($this->XX_FlexDBShe); $this->count_susp = $this->count + count($this->_SusDB); if (!$debug) { $this->OptimizeSignatures($debug); } $this->_DBShe = array_map("s\x74\x72t\x6f\x6co\x77\x65r", $this->_DBShe); $this->X_DBShe = array_map("s\x74\x72t\x6f\x6co\x77\x65r", $this->X_DBShe); } private function OptimizeSignatures($debug) { ($this->mode == 2) && ($this->_FlexDBShe = array_merge($this->_FlexDBShe, $this->X_FlexDBShe, $this->XX_FlexDBShe)); ($this->mode == 1) && ($this->_FlexDBShe = array_merge($this->_FlexDBShe, $this->X_FlexDBShe)); $this->X_FlexDBShe = $this->XX_FlexDBShe = []; ($this->mode == 2) && ($this->_JSVirSig = array_merge($this->_JSVirSig, $this->X_JSVirSig)); $this->X_JSVirSig = []; $count = count($this->_FlexDBShe); for ($i = 0; $i < $count; $i++) { if ($this->_FlexDBShe[$i] == '[a-zA-Z0-9_]+?\(\s*[a-zA-Z0-9_]+?=\s*\)') $this->_FlexDBShe[$i] = '\((?<=[a-zA-Z0-9_].)\s*[a-zA-Z0-9_]++=\s*\)'; if ($this->_FlexDBShe[$i] == '([^\?\s])\({0,1}\.[\+\*]\){0,1}\2[a-z]*e') $this->_FlexDBShe[$i] = '(?J)\.[+*](?<=(?<d>[^\?\s])\(..|(?<d>[^\?\s])..)\)?\g{d}[a-z]*e'; if ($this->_FlexDBShe[$i] == '$[a-zA-Z0-9_]\{\d+\}\s*\.$[a-zA-Z0-9_]\{\d+\}\s*\.$[a-zA-Z0-9_]\{\d+\}\s*\.') $this->_FlexDBShe[$i] = '\$[a-zA-Z0-9_]\{\d+\}\s*\.\$[a-zA-Z0-9_]\{\d+\}\s*\.\$[a-zA-Z0-9_]\{\d+\}\s*\.'; $this->_FlexDBShe[$i] = str_replace('http://.+?/.+?\.php\?a', 'http://[^?\s]++(?<=\.php)\?a', $this->_FlexDBShe[$i]); $this->_FlexDBShe[$i] = preg_replace('~\[a-zA-Z0-9_\]\+\K\?~', '+', $this->_FlexDBShe[$i]); $this->_FlexDBShe[$i] = preg_replace('~^\\\\[d]\+&@~', '&@(?<=\d..)', $this->_FlexDBShe[$i]); $this->_FlexDBShe[$i] = str_replace('\s*[\'"]{0,1}.+?[\'"]{0,1}\s*', '.+?', $this->_FlexDBShe[$i]); $this->_FlexDBShe[$i] = str_replace('[\'"]{0,1}.+?[\'"]{0,1}', '.+?', $this->_FlexDBShe[$i]); $this->_FlexDBShe[$i] = preg_replace('~^\[\'"\]\{0,1\}\.?|^@\*|^\\\\s\*~', '', $this->_FlexDBShe[$i]); } self::optSig($this->_FlexDBShe, $debug, 'AibolitHelpers::myCheckSum'); self::optSig($this->_JSVirSig, $debug, 'AibolitHelpers::myCheckSum'); self::optSig($this->_AdwareSig, $debug, 'AibolitHelpers::myCheckSum'); self::optSig($this->_PhishingSig, $debug, 'AibolitHelpers::myCheckSum'); self::optSig($this->_SusDB, $debug, 'AibolitHelpers::myCheckSum'); $cnt = count($this->_ExceptFlex); for ($i = 0; $i < $cnt; $i++) { $this->_ExceptFlex[$i] = trim(Normalization::normalize($this->_ExceptFlex[$i])); if ($this->_ExceptFlex[$i] == '') unset($this->_ExceptFlex[$i]); } $this->_ExceptFlex = array_values($this->_ExceptFlex); } public static function optSig(&$sigs, $debug = false, $func_id = null) { $sigs = array_unique($sigs); foreach ($sigs as $k => &$s) { if ($func_id && is_callable($func_id)) { $id = $func_id($s); } else { $id = $k; } $s .= '(?<X' . $id . '>)'; } unset($s); $fix = [ '([^\?\s])\({0,1}\.[\+\*]\){0,1}\2[a-z]*e' => '(?J)\.[+*](?<=(?<d>[^\?\s])\(..|(?<d>[^\?\s])..)\)?\g{d}[a-z]*e', 'http://.+?/.+?\.php\?a' => 'http://[^?\s]++(?<=\.php)\?a', '\s*[\'"]{0,1}.+?[\'"]{0,1}\s*' => '.+?', '[\'"]{0,1}.+?[\'"]{0,1}' => '.+?' ]; $sigs = str_replace(array_keys($fix), array_values($fix), $sigs); $fix = [ '~^\\\\[d]\+&@~' => '&@(?<=\d..)', '~^((\[\'"\]|\\\\s|@)(\{0,1\}\.?|[?*]))+~' => '' ]; $sigs = preg_replace(array_keys($fix), array_values($fix), $sigs); self::optSigCheck($sigs, $debug); $tmp = []; foreach ($sigs as $i => $s) { if (!preg_match('~^(?>(?!\.[*+]|\\\\\d)(?:\\\\.|\[.+?\]|.))+$~', $s)) { unset($sigs[$i]); $tmp[] = $s; } } usort($sigs, "s\x74\x72c\x61\x73e\x63\x6dp"); $txt = implode("\n", $sigs); for ($i = 24; $i >= 1; ($i > 4) ? $i -= 4 : --$i) { $txt = preg_replace_callback('#^((?>(?:\\\\.|\\[.+?\\]|[^(\n]|\((?:\\\\.|[^)(\n])++\))(?:[*?+]\+?|\{\d+(?:,\d*)?\}[+?]?|)){' . $i . ',})[^\n]*+(?:\\n\\1(?![{?*+]).+)+#im', 'LoadSignaturesForScan::optMergePrefixes', $txt); } $sigs = array_merge(explode("\n", $txt), $tmp); self::optSigCheck($sigs, $debug); } private static function optMergePrefixes($m) { $limit = 8000; $prefix = $m[1]; $prefix_len = strlen($prefix); $len = $prefix_len; $r = []; $suffixes = []; foreach (explode("\n", $m[0]) as $i0l1i10000101000010) { if (strlen($i0l1i10000101000010) > $limit) { $r[] = $i0l1i10000101000010; continue; } $s = substr($i0l1i10000101000010, $prefix_len); $len += strlen($s); if ($len > $limit) { if (count($suffixes) == 1) { $r[] = $prefix . $suffixes[0]; } else { $r[] = $prefix . '(?:' . implode('|', $suffixes) . ')'; } $suffixes = []; $len = $prefix_len + strlen($s); } $suffixes[] = $s; } if (!empty($suffixes)) { if (count($suffixes) == 1) { $r[] = $prefix . $suffixes[0]; } else { $r[] = $prefix . '(?:' . implode('|', $suffixes) . ')'; } } return implode("\n", $r); } private function optMergePrefixes_Old($m) { $prefix = $m[1]; $prefix_len = strlen($prefix); $suffixes = []; foreach (explode("\n", $m[0]) as $i0l1i10000101000010) { $suffixes[] = substr($i0l1i10000101000010, $prefix_len); } return $prefix . '(?:' . implode('|', $suffixes) . ')'; } private static function optSigCheck(&$sigs, $debug) { $result = true; foreach ($sigs as $k => $sig) { if (trim($sig) == "") { if ($debug) { echo ("************>>>>> EMPTY\n     pattern: " . $sig . "\n"); } unset($sigs[$k]); $result = false; } if (@preg_match('~' . $sig . '~smiS', '') === false) { $error = error_get_last(); if ($debug) { echo ("************>>>>> " . $error["m\x65\x73s\x61\x67e"] . "\n     pattern: " . $sig . "\n"); } unset($sigs[$k]); $result = false; } } return $result; } public static function getSigId($l_Found) { foreach ($l_Found as $i0l1i10000100010000 => &$v) { if (is_string($i0l1i10000100010000) && $v[1] != -1 && strlen($i0l1i10000100010000) == 9) { return substr($i0l1i10000100010000, 1); } } return null; } public function setOwnUrl($url) { if (isset($this->blackUrls)) { foreach ($this->blackUrls->getDb() as $black) { if (preg_match('~' . $black . '~msi', $url)) { $this->ownUrl = null; return; } } } $this->ownUrl = $url; } public function getOwnUrl() { return $this->ownUrl; } public function getDBLocation() { return $this->sig_db_location; } public function getDB() { return $this->sig_db; } public function getDBMetaInfo() { return $this->sig_db_meta_info; } public function getDBMetaInfoVersion() { return $this->sig_db_meta_info["v\x65\x72s\x69\x6fn"]; } public function getDBCount() { return $this->count; } public function getDBCountWithSuspicious() { return $this->count_susp; } public function getResult() { return $this->result; } public function getLastError() { return $this->last_error; } } class ScanUnit { public static function QCR_ScanContent($checkers, $l_Unwrapped, $l_Content, $signs, $debug = null, $precheck = null, $processResult = null, &$return = null) { $smart_skipped = false; $flag = false; foreach ($checkers as $checker => $full) { $l_pos = 0; $l_SignId = ''; if (isset($precheck) && is_callable($precheck)) { if (!$precheck($checker, $l_Unwrapped) && ($full && !$precheck($checker, $l_Content))) { $smart_skipped = true; continue; } } $flag = ScanCheckers::{$checker}($l_Unwrapped, $l_pos, $l_SignId, $signs, $debug); if ($flag && isset($processResult) && is_callable($processResult)) { $processResult($checker, $l_Unwrapped, $l_pos, $l_SignId, $return); } if (!$flag && $full) { $flag = ScanCheckers::{$checker}($l_Content, $l_pos, $l_SignId, $signs, $debug); if ($flag && isset($processResult) && is_callable($processResult)) { $processResult($checker, $l_Content, $l_pos, $l_SignId, $return); } } if ($flag) { return true; } } if (!$flag && $smart_skipped) { $return = [RapidScanStorageRecord::RX_SKIPPED_SMART, '', '']; } return false; } public static function Rescan($i0l1i10000111110110, $signs, $debug = null, $deobfuscate = false, $processResult = null, &$return = null) { $checkers["C\x72\x69t\x69\x63a\x6c\x50H\x50"] = true; $l_Unwrapped = Normalization::strip_whitespace($i0l1i10000111110110); $l_UnicodeContent = Encoding::detectUTFEncoding($i0l1i10000111110110); if ($l_UnicodeContent !== false) { if (Encoding::iconvSupported()) { $l_Unwrapped = Encoding::convertToCp1251($l_UnicodeContent, $l_Unwrapped); } } if ($deobfuscate) { $l_DeobfObj = new Deobfuscator($l_Unwrapped, $i0l1i10000111110110); $l_DeobfType = $l_DeobfObj->getObfuscateType($l_Unwrapped); } if (isset($l_DeobfType) && $l_DeobfType != '') { $l_Unwrapped = $l_DeobfObj->deobfuscate(); } $l_Unwrapped = Normalization::normalize($l_Unwrapped); return self::QCR_ScanContent($checkers, $l_Unwrapped, $i0l1i10000111110110, $signs); } } class ScanCheckers { const URL_GRAB = '~(?:https?:)?\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+\~#=]{2,256}\.[a-z]{2,4}\b(?:[-a-zA-Z0-9@:%_\+.\~#?&/=]*)~msi'; public static function WarningPHP($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null) { foreach ($signs->_SusDB as $l_Item) { if (preg_match('~' . $l_Item . '~smiS', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) { if (!self::CheckException($l_Content, $l_Found, $signs)) { $l_Pos = $l_Found[0][1]; $l_SigId = LoadSignaturesForScan::getSigId($l_Found); return true; } } } return false; } public static function Adware($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null) { $l_Res = false; foreach ($signs->_AdwareSig as $l_Item) { $offset = 0; while (preg_match('~' . $l_Item . '~smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) { if (!self::CheckException($l_Content, $l_Found, $signs)) { $l_Pos = $l_Found[0][1]; $l_SigId = "a\x64\x77a\x72\x65"; return true; } $offset = $l_Found[0][1] + 1; } } return $l_Res; } public static function CheckException(&$l_Content, &$l_Found, $signs, $debug = null) { if (!(isset($signs->_ExceptFlex) && is_array($signs->_ExceptFlex))) { return false; } $l_FoundStrPlus = substr($l_Content, max($l_Found[0][1] - 10, 0), 70); foreach ($signs->_ExceptFlex as $l_ExceptItem) { if (@preg_match('~' . $l_ExceptItem . '~smi', $l_FoundStrPlus, $l_Detected)) { return true; } } return false; } public static function Phishing($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null) { $l_Res = false; foreach ($signs->_PhishingSig as $l_Item) { $offset = 0; while (preg_match('~' . $l_Item . '~smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) { if (!self::CheckException($l_Content, $l_Found, $signs)) { $l_Pos = $l_Found[0][1]; $l_SigId = LoadSignaturesForScan::getSigId($l_Found); if (is_object($debug) && $debug->getDebugMode() == true) { echo "Phis: $l_Content matched [$l_Item] in $l_Pos\n"; } return $l_Pos; } $offset = $l_Found[0][1] + 1; } } return $l_Res; } public static function CriticalJS($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null) { $l_Res = false; foreach ($signs->_JSVirSig as $l_Item) { $offset = 0; if (is_object($debug) && $debug->getDebugPerfomance() == true) { $stat_start = microtime(true); } $time = microtime(true); $res = preg_match('~' . $l_Item . '~smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset); if (class_exists("P\x65\x72f\x6f\x6da\x6e\x63e\x53\x74a\x74\x73")) { PerfomanceStats::addPerfomanceItem(PerfomanceStats::PCRE_SCAN_STAT, microtime(true) - $time); } while ($res) { if (!self::CheckException($l_Content, $l_Found, $signs)) { $l_Pos = $l_Found[0][1]; $l_SigId = LoadSignaturesForScan::getSigId($l_Found); if (is_object($debug) && $debug->getDebugMode() == true) { echo "JS: $l_Content matched [$l_Item] in $l_Pos\n"; } $l_Res = true; break; } $offset = $l_Found[0][1] + 1; $time = microtime(true); $res = preg_match('~' . $l_Item . '~smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset); if (class_exists("P\x65\x72f\x6f\x6da\x6e\x63e\x53\x74a\x74\x73")) { PerfomanceStats::addPerfomanceItem(PerfomanceStats::PCRE_SCAN_STAT, microtime(true) - $time); } } if (is_object($debug) && $debug->getDebugPerfomance() == true) { $stat_stop = microtime(true); $debug->addPerfomanceItem($l_Item, $stat_stop - $stat_start); } } return $l_Res; } public static function CriticalJS_PARA($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null) { foreach ($signs->X_JSVirSig as $l_Item) { if (is_object($debug) && $debug->getDebugPerfomance() == true) { $stat_start = microtime(true); } if (preg_match('~' . $l_Item . '~smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) { if (!self::CheckException($l_Content, $l_Found, $signs)) { $l_Pos = $l_Found[0][1]; $l_SigId = LoadSignaturesForScan::getSigId($l_Found); if (is_object($debug) && $debug->getDebugMode() == true) { echo "JS PARA: $l_Content matched [$l_Item] in $l_Pos\n"; } return true; } } if (is_object($debug) && $debug->getDebugPerfomance() == true) { $stat_stop = microtime(true); $debug->addPerfomanceItem($l_Item, $stat_stop - $stat_start); } } return false; } public static function CriticalPHPGIF($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null) { if (strpos($l_Content, "G\x49\x468\x39") === 0) { $l_Pos = 0; $l_SigId = "G\x49\x46"; if (is_object($debug) && $debug->getDebugMode() == true) { echo "CRIT 6: $l_Content matched [GIF] in $l_Pos\n"; } return true; } return false; } public static function CriticalPHPUploader($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null) { $l_Found = null; if ((strlen($l_Content) < 2048) && ((($l_Pos = strpos($l_Content, 'multipart/form-data')) > 0) || (($l_Pos = strpos($l_Content, '$_FILE[') > 0)) || (($l_Pos = strpos($l_Content, "m\x6f\x76e\x5f\x75p\x6c\x6fa\x64\x65d\x5f\x66i\x6c\x65")) > 0) || (preg_match('|\bcopy\s*\(|smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)))) { if ($l_Found != null) { $l_Pos = $l_Found[0][1]; $l_SigId = "u\x70\x6co\x61\x64e\x72"; } if (is_object($debug) && $debug->getDebugMode() == true) { echo "CRIT 7: $l_Content matched [uploader] in $l_Pos\n"; } return true; } } public static function CriticalPHP_3($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null) { foreach ($signs->X_FlexDBShe as $l_Item) { if (is_object($debug) && $debug->getDebugPerfomance() == true) { $stat_start = microtime(true); } if (preg_match('~' . $l_Item . '~smiS', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) { if (!self::CheckException($l_Content, $l_Found, $signs)) { $l_Pos = $l_Found[0][1]; $l_SigId = LoadSignaturesForScan::getSigId($l_Found); if (is_object($debug) && $debug->getDebugMode() == true) { echo "CRIT 3: $l_Content matched [$l_Item] in $l_Pos\n"; } return true; } } if (is_object($debug) && $debug->getDebugPerfomance() == true) { $stat_stop = microtime(true); $debug->addPerfomanceItem($l_Item, $stat_stop - $stat_start); } } return false; } public static function CriticalPHP_2($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null) { foreach ($signs->XX_FlexDBShe as $l_Item) { if (is_object($debug) && $debug->getDebugPerfomance() == true) { $stat_start = microtime(true); } if (preg_match('~' . $l_Item . '~smiS', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) { if (!self::CheckException($l_Content, $l_Found, $signs)) { $l_Pos = $l_Found[0][1]; $l_SigId = LoadSignaturesForScan::getSigId($l_Found); if (is_object($debug) && $debug->getDebugMode() == true) { echo "CRIT 2: $l_Content matched [$l_Item] in $l_Pos\n"; } return true; } } if (is_object($debug) && $debug->getDebugPerfomance() == true) { $stat_stop = microtime(true); $debug->addPerfomanceItem($l_Item, $stat_stop - $stat_start); } } return false; } public static function CriticalPHP_4($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null) { $l_Content_lo = strtolower($l_Content); foreach ($signs->_DBShe as $l_Item) { $l_Pos = strpos($l_Content_lo, $l_Item); if ($l_Pos !== false) { $l_SigId = AibolitHelpers::myCheckSum($l_Item); if (is_object($debug) && $debug->getDebugMode() == true) { echo "CRIT 4: $l_Content matched [$l_Item] in $l_Pos\n"; } return true; } } return false; } public static function CriticalPHP_5($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null) { $l_Content_lo = strtolower($l_Content); foreach ($signs->X_DBShe as $l_Item) { $l_Pos = strpos($l_Content_lo, $l_Item); if ($l_Pos !== false) { $l_SigId = AibolitHelpers::myCheckSum($l_Item); if (is_object($debug) && $debug->getDebugMode() == true) { echo "CRIT 5: $l_Content matched [$l_Item] in $l_Pos\n"; } return true; } } return false; } public static function CriticalPHP($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null) { foreach ($signs->_FlexDBShe as $l_Item) { $offset = 0; if (is_object($debug) && $debug->getDebugPerfomance() == true) { $stat_start = microtime(true); } $time = microtime(true); $res = preg_match('~' . $l_Item . '~smiS', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset); if (class_exists("P\x65\x72f\x6f\x6da\x6e\x63e\x53\x74a\x74\x73")) { PerfomanceStats::addPerfomanceItem(PerfomanceStats::PCRE_SCAN_STAT, microtime(true) - $time); } while ($res) { if (!self::CheckException($l_Content, $l_Found, $signs)) { $l_Pos = $l_Found[0][1]; $l_SigId = LoadSignaturesForScan::getSigId($l_Found); if (is_object($debug) && $debug->getDebugMode() == true) { echo "CRIT 1: $l_Content matched [$l_Item] in $l_Pos\n"; } return true; } $offset = $l_Found[0][1] + 1; $time = microtime(true); $res = preg_match('~' . $l_Item . '~smiS', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset); if (class_exists("P\x65\x72f\x6f\x6da\x6e\x63e\x53\x74a\x74\x73")) { PerfomanceStats::addPerfomanceItem(PerfomanceStats::PCRE_SCAN_STAT, microtime(true) - $time); } } if (is_object($debug) && $debug->getDebugPerfomance() == true) { $stat_stop = microtime(true); $debug->addPerfomanceItem($l_Item, $stat_stop - $stat_start); } } return false; } public static function isOwnUrl($url, $own_domain) { if (!isset($own_domain)) { return false; } return (bool)preg_match('~^(http(s)?:)?//(www\.)?' . preg_quote($own_domain, '~') . '~msi', $url); } public static function isUrlInList($url, $list) { if (isset($list)) { foreach ($list as $item) { if (preg_match('~' . $item . '~msiS', $url, $id, PREG_OFFSET_CAPTURE)) { return $id; } } } return false; } public static function UrlChecker($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null) { $l_Pos = []; $l_SigId = []; $offset = 0; while (preg_match(self::URL_GRAB, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) { if (!self::isOwnUrl($l_Found[0][0], $signs->getOwnUrl()) && (isset($signs->whiteUrls) && !self::isUrlInList($l_Found[0][0], $signs->whiteUrls->getDb())) ) { if ($id = self::isUrlInList($l_Found[0][0], $signs->blackUrls->getDb())) { $l_Pos["b\x6c\x61c\x6b"][] = $l_Found[0][1]; $l_SigId["b\x6c\x61c\x6b"][] = $signs->blackUrls->getSig($id); } else { $l_Pos["u\x6e\x6b"][] = $l_Found[0][1]; $l_SigId["u\x6e\x6b"][] = $l_Found[0][0]; } } $offset = $l_Found[0][1] + strlen($l_Found[0][0]); } return !empty($l_Pos); } } class AibolitHelpers { public static function bytes2Human($bytes) { if ($bytes < 1024) { return $bytes . ' b'; } elseif (($kb = $bytes / 1024) < 1024) { return number_format($kb, 2) . ' Kb'; } elseif (($mb = $kb / 1024) < 1024) { return number_format($mb, 2) . ' Mb'; } elseif (($gb = $mb / 1024) < 1024) { return number_format($gb, 2) . ' Gb'; } else { return number_format($gb / 1024, 2) . "T\x62"; } } public static function seconds2Human($seconds) { $r = ''; $_seconds = floor($seconds); $ms = $seconds - $_seconds; $seconds = $_seconds; if ($hours = floor($seconds / 3600)) { $r .= $hours . ' h '; $seconds %= 3600; } if ($minutes = floor($seconds / 60)) { $r .= $minutes . ' m '; $seconds %= 60; } if ($minutes < 3) { $r .= ' ' . (string)($seconds + ($ms > 0 ? round($ms) : 0)) . ' s'; } return $r; } public static function getBytes($val) { $val = trim($val); $last = strtolower($val[strlen($val) - 1]); $val = preg_replace('~\D~', '', $val); switch ($last) { case "t": $val *= 1024; case "g": $val *= 1024; case "m": $val *= 1024; case "k": $val *= 1024; } return intval($val); } public static function makeSafeFn($par_Str, $addPrefix = '', $noPrefix = '', $replace_path = false) { if ($replace_path) { $i0l1i10000101000010s = explode("\n", $par_Str); array_walk($i0l1i10000101000010s, static function(&$n) use ($addPrefix, $noPrefix) { $n = $addPrefix . str_replace($noPrefix, '', $n); }); $par_Str = implode("\n", $i0l1i10000101000010s); } return htmlspecialchars($par_Str, ENT_SUBSTITUTE | ENT_QUOTES); } public static function myCheckSum($str) { return hash("c\x72\x633\x32\x62", $str); } } 